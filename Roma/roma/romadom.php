<?php
// ######################################################################
//
// Path: roma/romadom.php
//
// ######################################################################

/**
 * This class is responsible for Romas customization file. 
 *
 * @author: Arno Mittelbach <arno@mittelbach-online.de>
 * @version: 0.9 ($Id$)
 * @access:  public
 * @package: roma
 */
class romaDom extends domDocument
  {
    function __construct( $szXML = '')
      {
	parent::__construct();

	$this->preserveWhiteSpace = false;
	
	//making sure Roma can deal with multibyte regex (for non-Latin tags, attributes etc.)
	mb_internal_encoding('UTF-8');
	mb_regex_encoding('utf-8');

	if ( $szXML == '' )
	  {
 	    $this->constructDocument();
          }
	else
	  {
	    $this->loadXML( $szXML );
          }
      }

    private function constructDocument()
      {
        $oTemp = new domDocument();
	$oTEI = $oTemp->createElementNS( 'http://www.tei-c.org/ns/1.0', 'TEI' );
	$oTemp->appendChild( $oTEI );
	$oTEI->setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:lang', 'en' );

	$oTeiHeader = $oTEI->appendChild( new domElement( 'teiHeader' ) );

	$oFileDesc = $oTeiHeader->appendChild( new domElement( 'fileDesc' ) );

	$oTitleStmt = $oFileDesc->appendChild( new domElement( 'titleStmt' ) );
	$oTitle = $oTitleStmt->appendChild( new domElement( 'title' ) );
	$oTitle->appendChild( new domText( 'My TEI Extension' ) );
	$oAuthor = $oTitleStmt->appendChild( new domElement( 'author' ) );
	$oAuthor->appendChild( new domText( 'generated by Roma ' . roma_version ) );

	$oPublicationStmt = $oFileDesc->appendChild( new domElement( 'publicationStmt' ) );
	$oP = $oPublicationStmt->appendChild( new domElement( 'p' ) );
	$oP->appendChild( new domText( 'for use by whoever wants it' ) );

	$oNotes = $oFileDesc->appendChild( new domElement( 'notesStmt' ) );
	$oNote = $oNotes->appendChild( new domElement( 'note' ) );
	$oNote->setAttribute( 'type', 'ns' );
	$oNote->appendChild( new domText( 'http://www.example.org/ns/nonTEI' ) );

	$oSourceDesc = $oFileDesc->appendChild( new domElement( 'sourceDesc' ) );
	$oP = $oSourceDesc->appendChild( new domElement( 'p' ) );
//Tuesday 13th 2006f June 2006 10:57:23 PM
	date_default_timezone_set('Europe/London');

	$script_tz = date_default_timezone_get();

	$oP->appendChild( new domText( 'created on ' . date( "l dS F Y h:i:s A" ) . '' ) );

	$oText = $oTEI->appendChild( new domElement( 'text' ) );
	$oFront = $oText->appendChild( new domElement( 'front' ) );
	$oBody = $oText->appendChild( new domElement( 'body' ) );
	$oBodyP = $oBody->appendChild( new domElement( 'p' ) );
	$oBodyP->appendChild( new domText( 'My TEI Customization
	starts with modules tei, core, textstructure and header' ) );

	$oDivgen = $oFront->appendChild( new domElement( 'divGen' ) );
	$oDivgen->setAttribute( 'type', 'toc' );

	$oSchema = $oBody->appendChild( new domElement( 'schemaSpec' ) );
	$oSchema->setAttribute( 'ident', 'myTEI' );
	$oSchema->setAttribute('docLang', 'en' );
	$oSchema->setAttribute('prefix', 'tei_' );
	$oSchema->setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:lang', 'en' );

	$this->loadXML( $oTemp->SaveXML() );
      }

    // #####################################################################
    // --- Little Helper functions
    // #####################################################################

    /**
     * Creates an XPath Object with the current customization
     * and registers the namespace tei
     */
    public function getXPath( &$oXPath )
      {
        $oXPath = new domxpath( $this );
	$oXPath->registerNamespace( 'rng', 'http://relaxng.org/ns/structure/1.0' );
	$oXPath->registerNamespace( 'tei', 'http://www.tei-c.org/ns/1.0' );
      }


    // #####################################################################
    // --- Get Information out of the Customization
    // #####################################################################

    /**
     * returns a numbered array with all those modules the user selected
     */
    public function getHeader( &$aszHeader )
      {
	$this->getXPath( $oXPath );
        $aszHeader = $oXPath->query( "//tei:teiHeader" );
      }

    public function getSelectedModules( &$aszModules )
      {
	$this->getXPath( $oXPath );
        $aoModules = $oXPath->query( "//tei:schemaSpec/tei:moduleRef/@key" );

	$aszModules = array();
	foreach( $aoModules as $oModule )
	  {
	    $aszModules[] = $oModule->nodeValue;
          }
      }

    /**
     * returns a dom
     */
    public function getSelectedModulesDom( &$oDom )
      {
	$this->getSelectedModules( $aszModules );
	$oDom = new domDocument();
	$oDom->appendChild( new domElement( 'selectedModules' ) );
	
	foreach( $aszModules as $szModule )
	  {
	    $oDom->documentElement->appendChild( new domElement( 'module', $szModule ) );
	  } 
      }


    /**
     * returns a numbered array with all those modules the user changed
     */
    public function getChangedModules( &$aszModules )
      {
	$this->getXPath( $oXPath );
        $aoModules = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@mode='change']/@module");
	$aszModules = array();
	foreach( $aoModules as $oModule )
	  {
	    $aszModules[] = $oModule->nodeValue;
          }
      }

    /**
     * returns a dom
     */
    public function getChangedModulesDom( &$oDom )
      {
	$this->getChangedModules( $aszModules );
	$oDom = new domDocument();
	$oDom->appendChild( new domElement( 'changedModules' ) );

	foreach( $aszModules as $szModule )
	  {
	    $oDom->documentElement->appendChild( new domElement( 'module', $szModule ) );
	  }
      }


    /*
     * returns a Dom object with all excluded elements for a module
     */
    public function getExcludedElementsInModule( $szModule, &$oDom)
      {
	$oDom = new domDocument();
	$oDom->appendChild( new domElement( 'excludedElements' ) );
	$this->getXPath( $oXPath );
        $aszElements = $oXPath->query("/tei:TEI/tei:text//tei:moduleRef[@key='$szModule']/@except" );
	foreach ($aszElements as $domElement){
	  foreach( explode(' ',$domElement->nodeValue) as $szElement )
	    {
	      $oDom->documentElement->appendChild( new domElement( 'element', $szElement ) );
	    }
	}
        $aszElements = $oXPath->query(
    "/tei:TEI/tei:text//tei:elementSpec[@mode='delete' and @module='$szModule']/@ident" );
	foreach( $aszElements as $oElement )
	  {
	    $oDom->documentElement->appendChild( new domElement( 'element', $oElement->nodeValue ) );
	  }

      }
    /*
     * returns a Dom object with all included elements for a module
     */
    public function getIncludedElementsInModule( $szModule, &$oDom)
      {
	$oDom = new domDocument();
	$oDom->appendChild( new domElement( 'includedElements' ) );
	$this->getXPath( $oXPath );
        $aszElements = $oXPath->query("/tei:TEI/tei:text//tei:moduleRef[@key='$szModule']/@include" );
	foreach ($aszElements as $domElement){
	  foreach( explode(' ',$domElement->nodeValue) as $szElement )
	    {
	      $oDom->documentElement->appendChild( new domElement( 'element', $szElement ) );
	    }
	}
      }

    /**
     * returns a domDocument with all added Elements.
     * returns true if the user did not yet create any new Elements.
     * The structure of the domDocument:
     *
     *   <addedElements>
     *    <Element>
     *     <elementName>Name</elementName>
     *     <include>change|delete</include>
     *     <desc>Description</desc>
     *    </Element>
     *   </addedElements>
     *
     * There might be some more tags inside the Element-tag like
     * <classes> but since they are not of interest here, they were
     * omitted. There is also just one level of Elements beyond the
     * Element-tag. So <classes> might be there, but there would be no
     * <memberOf> inside the <classes> */

    public function getAddedElements( &$oElementDom )
      {
	$errResult = false;

        $oElementDom = new domDocument;
        $oRoot = $oElementDom->appendChild( new domElement( 'addedElements' ) );

	$this->getXPath( $oXPath );
        $aoElements = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@mode='add']" );

	if ( ! is_object( $aoElements->item(0) ) )
	  {
	    $errResult = true;
	  }

        foreach( $aoElements as $oElement )
          {
	    $oElem = $oRoot->appendChild( new domElement( 'Element' ) );
	    $oName = $oElem->appendChild( new domElement( 'elementName' ) );	    
            $oName->appendChild( new domText( $oElement->getAttribute( 'ident' ) ) );
	    
	    $oInclude = $oElem->appendChild( new domElement( 'include' ) );
	    $oInclude->appendChild( new domText( $oElement->getAttribute( 'mode' ) ) );
	      

	    foreach( $oElement->childNodes as $oChild )
	      {
		if ( $oChild->nodeType == XML_ELEMENT_NODE )
		  {
		    $oElemDesc = $oElem->appendChild( new domElement( $oChild->nodeName ) );
		    $oElemDesc->appendChild( new domText( $oChild->nodeValue ) );
		  }
	      }
          }

	return $errResult;
      }

    public function getAddedElementsDescription( $szIdent, &$szDescription )
      {
	$this->getXPath( $oXPath );
        $oDesc = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szIdent']/tei:desc" )->item(0);

        if ( is_object( $oDesc ) )
          {
            $szDescription = $oDesc->nodeValue;
          }
      }

    public function getAddedElementsContents( $szIdent, &$szContents )
      {
	$this->getXPath( $oXPath );
        $oContent = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szIdent']/tei:content" )->item(0);

        if ( is_object( $oContent ) )
          {
	    $oRNG = $oContent->childNodes->item(0);
            switch( $oRNG->nodeName ) 
              {
                case 'rng:empty':
                  $szContents = 'empty';
                  break;
                case 'rng:text':
                  $szContents = 'text';
                  break;
                default:
		  if ( is_object( $oRNG ) )
		    {
		      $szContents = $oRNG->nodeValue;
/* ->getAttribute( 'name' ); */
		    }
                  break;
              }
          }
      }
    public function getAddedElementsFullContents( $szIdent, &$szContents )
      {
	$this->getXPath( $oXPath );
        $oContent = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szIdent']/tei:content" )->item(0);
	$szContents = $this->SaveXML( $oContent );
      }

    public function getAddedElementsNamespace( $szIdent, &$szContents )
      {
	$this->getXPath( $oXPath );
        $szContents = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szIdent']/@ns" )->item(0)->nodeValue;
	if ($szContents == '') {
	   $szContents = 'http://www.tei-c.org/ns/1.0';
	}
      }


    public function getAddedElementsClasses( $szIdent, &$aszClasses )
      {
        $aszClasses = array();

	$this->getXPath( $oXPath );
        $aoClasses = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szIdent']/tei:classes/tei:memberOf/@key" );
   
        foreach( $aoClasses as $oClass )
          {
            $aszClasses[] = $oClass->nodeValue;
          }        
      }

    public function getElementsWithChangedNameInModule( $szModule, &$aszElements )
      {
	$aszElements = array();

	$this->getXPath( $oXPath );
	$aoElements = $oXPath->query(
	"/tei:TEI/tei:text//tei:elementSpec[@mode='change' and @module='{$szModule}']/tei:altIdent" );

	foreach( $aoElements as $oElement )
	  {
	    $aszElements[ $oElement->parentNode->getAttribute( 'ident' ) ] =  $oElement->firstChild->nodeValue;
	  }
      }

    public function getElementsWithChangedNameInModuleDom( $szModule, &$oDom )
      {
	$oDom = new domDocument;
	$oDom->appendChild( new domElement( 'changedNames' ) );

	$this->getElementsWithChangedNameInModule( $szModule, $aszElements );
	foreach ( $aszElements as $szOld => $szNew )
	  {
	    $oElement = $oDom->documentElement->appendChild( new domElement( 'element' ) );
	    $oElement->setAttribute( 'ident', $szOld );
	    $oElement->appendChild( new domElement( 'altIdent', $szNew ) );
	  }
      }


    public function getElementsChangedNameInModule( $szModule, $szElement, &$szElementNew )
      {
	$this->getXPath( $oXPath );
	$oElement = $oXPath->query(
      "/tei:TEI/tei:text//tei:elementSpec[@module='$szModule'
      and @mode='change' and @ident='{$szElement}']/tei:altIdent" )->item(0);

	$szElementNew = ( is_object ( $oElement ) ) ? $oElement->nodeValue : $szElement;
      }

    public function getClassesByElementNameInModule( $szElement, $szModule, &$aszClasses )
      {
        $aszClasses = array();
	$this->getXPath( $oXPath );
	$this->getDocLanguage( $szDocLanguage );
	$oClasses = $oXPath->query(
	"/tei:TEI/tei:text//tei:elementSpec[@module='$szModule'
	and @mode='change' and @ident='$szElement']/tei:classes" )->item(0);

	if ( is_object( $oClasses ) )
	  {
	    foreach ( $oClasses->childNodes as $oMember )
	      {
		$aszClasses[] = $oMember->getAttribute( 'key' );
	      }
	  }
	else
	  {
	    $oElementDom = new domDocument();
	    $oElementDom->loadXML( join( '', file( roma_xquery_server
	  . 'element.xql?lang=' . $szDocLanguage . '&name=' . $szElement ) ) );
	    
	    $oXPath = new domxpath( $oElementDom );
	    $aoClasses = $oXPath->query( "/Element/elementClasses/class" );
	    
	    foreach( $aoClasses as $oClass )
	      {
		$aszClasses[] = $oClass->nodeValue;
	      }
	  }
      } 

    public function getDescriptionByElementNameInModule( $szElement,
      $szModule,  &$szDesc )
      {
	$this->getXPath( $oXPath );
	$oDesc = $oXPath->query(
      "/tei:TEI/tei:text//tei:elementSpec[@module='$szModule'
      and @mode='change' and @ident='$szElement']/tei:desc" )->item(0);

        if ( is_object( $oDesc ) ) 
          {
  	    $szDesc = $oDesc->nodeValue;
          }
	else
	  {
	    $this->getDescriptionByElementName($szElement, $szDesc );
	  }
      }

    public function getDescriptionByElementName($szElement, &$szDesc )
      {
	$oElementDom = new domDocument();
	$this->getDocLanguage( $szDocLanguage );
	$oElementDom->loadXML( join( '', file( roma_xquery_server . 'element.xql?lang=' . $szDocLanguage .'&name=' . $szElement ) ) );
	
	$oXPath = new domxpath( $oElementDom );
	$oDesc = $oXPath->query( "/Element/elementDesc" )->item(0);
	
	if ( is_object( $oDesc ) )
	  {
	    $szDesc = $oDesc->nodeValue;
	  }
      } 

    public function getContentsByElementNameInModuleDom( $szElement, $szModule, &$oContents )
      {
	$this->getXPath( $oXPath );
	$this->getDocLanguage( $szDocLanguage );
	$oContent = $oXPath->query(
      "/tei:TEI/tei:text//tei:elementSpec[@module='$szModule'
      and @mode='change' and @ident='$szElement']/tei:content" )->item(0);

        if ( is_object( $oContent ) ) 
          {
	    $oContents = new domDocument();
	    $oContent = $oContents->importNode( $oContent, true );
	    $oContents->appendChild( $oContent );
          }
	else
	  {
	    $oElementDom = new domDocument();
	    $oElementDom->loadXML( join( '', file( roma_xquery_server
          . 'element.xql?lang=' . $szDocLanguage . '&name=' . $szElement ) ) );
	    
	    $oXPath = new domxpath( $oElementDom );
	    $oXPath->registerNamespace( 'rng', 'http://relaxng.org/ns/structure/1.0' );
	    $oContent = $oXPath->query( "/Element/elementContent/child::*" )->item(0);
	    
	    if ( is_object( $oContent ) )
	      {
		$oContents = new domDocument();

                $theCon = $oContents->createElementNS( 'http://www.tei-c.org/ns/1.0', 'content' );
		$oCon = $oContents->appendChild( $theCon );
		$oContent = $oContents->importNode( $oContent, true );
		$oCon->appendChild( $oContent );
	      }
	  } 
      }
 
    public function getContentsByElementNameInModule( $szElement, $szModule, &$szContents )
      {
	$this->getXPath( $oXPath );
	$this->getDocLanguage( $szDocLanguage );
	$oContent = $oXPath->query(
      "/tei:TEI/tei:text//tei:elementSpec[@module='$szModule'
      and @mode='change' and @ident='$szElement']/tei:content" )->item(0);

        if ( is_object( $oContent ) ) 
          {
	    $oConDom = new domDocument();
	    $oContent = $oConDom->importNode( $oContent, true );
	    $oConDom->appendChild( $oContent );
	    $szContents = $oConDom->SaveHTML();
          }
	else
	  {
	    $oElementDom = new domDocument();
	    $oElementDom->loadXML( join( '', file( roma_xquery_server . 'element.xql?lang=' . $szDocLanguage . '&name=' . $szElement ) ) );
	    
	    $oXPath = new domxpath( $oElementDom );
	    $oXPath->registerNamespace( 'rng', 'http://relaxng.org/ns/structure/1.0' );
	    $oContent = $oXPath->query( "/Element/elementContent/child::*" )->item(0);
	    
	    if ( is_object( $oContent ) )
	      {
		$oDom = new domDocument();

                $theCon = $oDom->createElementNS( 'http://www.tei-c.org/ns/1.0', 'content' );
		$oCon = $oDom->appendChild( $theCon );
		$oContent = $oDom->importNode( $oContent, true );
		$oCon->appendChild( $oContent );
		
		$szContents = $oDom->SaveHTML();
	      }
	  } 
      }

    public function getAttributesByElement( $szElement, &$aszAttributes )
      {
	$aszAttributes = array();
	$this->getDocLanguage( $szDocLanguage );
	$oAttributesDom = new domDocument();
	$oAttributesDom->loadXML( join( '', file( roma_xquery_server
	. 'attsbyelem.xql?lang=' . $szDocLanguage . '&name=' . $szElement ) ) );
	
	$oElement = $oAttributesDom->documentElement;
	foreach( $oElement->childNodes as $oChild )
	  {
	    $aszAttributes[] = $oChild->nodeValue;
	  }
      }

    public function getAttributeDomByElementInModule( $szElement, $szModule, $szClass, &$oAttDom )
      {
	$errResult = false;

	$oAttDom = new domDocument;
	$this->getXPath( $oXPath );
	$this->getDocLanguage( $szDocLanguage );
	if ( $szModule != '' && $szClass == '')
	  {
// I get here if I edit an attribute for the first time on an existing element
	    @$oAttDom->loadXML( join( '', file( roma_xquery_server
	  . 'attsbyelem.xql?lang=' . $szDocLanguage . '&name=' . $szElement ) ) );
	    $oElement = $oAttDom->documentElement;
		
	    if ( is_object( $oElement ) )
	      {
		if ( ! is_object( $oElement->getElementsByTagname( 'att' )->item(0) ) )
		  {
		    $errResult = true;
		  }
	      }
	    else
	      {
		$errResult = true;
	      }

	    $oAttList = $oXPath->query(
	  "/tei:TEI/tei:text//tei:elementSpec[@mode='change' and
	  @ident='{$szElement}' and @module='{$szModule}']/tei:attList" )->item(0);
	  }
	elseif( $szClass == '' )
	  {
// I get here if I edit an attribute on a new element
	    $oAttDom->appendChild( new domElement( 'Element' ) );
	    $oElement = $oAttDom->documentElement;

	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList" )->item(0);
	    $errResult = true;
	  }
	else
	  {
// I get here if I look at class attributes 
	    $oAttDom->appendChild( new domElement( 'Element' ) );
	    $oElement = $oAttDom->documentElement;

	    $oAttClassDom = new domDocument;
	    $oAttClassDom->loadXML( join( '', file( roma_xquery_server . 'attclassbyname.xql?lang=' . $szDocLanguage . '&class=' . $szClass ) ) );
	    $oRoot = $oAttClassDom->documentElement;
	    $oAttributes = $oAttClassDom->getElementsByTagName( 'attributes' )->item(0);

	    foreach( $oAttributes->childNodes as $oChild )
	      {
		$oNode = $oAttDom->importNode( $oChild, true );
		$oElement->appendChild( $oNode );
	      }
	    $oAttList = $oXPath->query("/tei:TEI/tei:text//tei:classSpec[@module='$szModule'
	      and @mode='change' and @ident='$szClass']/tei:attList" )->item(0);
	  }

// ok we are sitting on an element. Now check its attributes.
	if ( is_object( $oAttList ) )
	  {
	    if ( $errResult && count( $oAttList->childNodes ) > 0 )
	      {
		$errResult = false;
	      }

	    $oAttXPath = new domxpath( $oAttDom );

	    foreach ( $oAttList->childNodes as $oChild )
	      {
   	        if ($oChild->nodeType != XML_ELEMENT_NODE) { continue; }

		$oAtt = $oAttXPath->query( "/Element/att[child::name[node()='" . $oChild->getAttribute( 'ident' ) . "']]" )->item(0);
		if ( ( $szModule != '' && ! is_object( $oAtt ) ) || $szModule == '' ) //if attribute was added
		  { 
		    $oAtt = $oElement->appendChild( new domElement ( 'att' ) );
		    $oAtt->setAttribute( 'added', 'true' );

		    $oAttName = $oAtt->appendChild( new domElement( 'name' ) );
		    $oAttName->appendChild( new domText( $oChild->getAttribute( 'ident' ) ) );
		    $oAttName->setAttribute( 'usage', $oChild->getAttribute( 'usage' ) );
		    
		    $oDesc = $oChild->getElementsByTagName( 'desc' )->item(0);
		    $oAttDesc = $oAtt->appendChild( new domElement( 'desc' ) );
		    $oAttDesc->appendChild( new domText( $oDesc->nodeValue ) );
		    $oDefault = $oChild->getElementsByTagName( 'defaultVal' )->item(0);
		    $oAttDef = $oAtt->appendChild( new domElement( 'defaultVal' ) );
		    $oAttDef->appendChild( new domText( $oDefault->nodeValue ) );
		  }
		else
		  {
		    $oName = $oAtt->getElementsByTagName( 'name' )->item(0);
		    if( is_object( $oName ) && $oAtt->getAttribute( 'ident' ) != $oChild->getAttribute( 'ident' ) )
		      {
			$oName->setAttribute( 'ident', $oChild->getAttribute( 'ident' )  );
		      }
		    if( is_object( $oName ) && $oAtt->getAttribute( 'usage' ) != $oChild->getAttribute( 'usage' ) )
		      {
			$oName->setAttribute( 'usage', $oChild->getAttribute( 'usage' )  );
		      }
		    
		    $oDesc = $oAtt->getElementsByTagName( 'desc' )->item(0);
		    $oChildDesc = $oChild->getElementsByTagName( 'desc' )->item(0);
		    if ( is_object( $oDesc ) && is_object( $oChildDesc ) &&  $oDesc->nodeValue != $oChildDesc->nodeValue )
		      {
			$oAtt->removeChild( $oDesc );
		      }
		    $oChildAlt = $oChild->getElementsByTagName( 'altIdent' )->item(0);
		    if ( is_object( $oChildAlt ) )
		      {
			$oAttDef = $oAtt->appendChild( new domElement( 'altName' ) );
			$oAttDef->appendChild( new domText( $oChildAlt->nodeValue ) );
		      }

		    if ( is_object( $oChildDesc ) )
		      {
			$oAttDesc = $oAtt->appendChild( new domElement( 'desc' ) );
			$oAttDesc->appendChild( new domText( $oChildDesc->nodeValue ) );
		      }
	    
		    $oChildDefault = $oChild->getElementsByTagName( 'defaultVal' )->item(0);
		    $oDefault = $oAtt->getElementsByTagName( 'defaultVal' )->item(0);
		    if ( is_object( $oDefault ) && is_object( $oChildDefault ) && $oDefault->nodeValue != $oChildDefault->nodeValue )
		      { 
			$oAtt->removeChild( $oDefault );
		      }
		    if ( is_object( $oChildDefault ) )
		      {
			$oAttDef = $oAtt->appendChild( new domElement( 'defaultVal' ) );
			$oAttDef->appendChild( new domText( $oChildDefault->nodeValue ) );
		      }

		    $oChildDat = $oChild->getElementsByTagName( 'datatype' )->item(0);
		    $oDat = $oAtt->getElementsByTagName( 'datatype' )->item(0);
		    if ( is_object( $oDat ) && is_object( $oChildDat ) )
		      {
			$oAtt->removeChild( $oDat );
		      }
		  }

		$oInclude = $oAtt->getElementsByTagName( 'include' )->item(0);
		if( is_object( $oInclude ) )
		  {
		    $oAtt->removeChild( $oInclude );
		  }
		$oAtt->appendChild( new domElement( 'include',$oChild->getAttribute( 'mode' ) ) );

// look at datatype

		$oAttDat = $oChild->getElementsByTagName( 'datatype' )->item(0);
		if ( is_object( $oAttDat ) )
		  {
		    $oTest = $oAtt->appendChild( new domElement( 'whatever' ) );
		    $oDataType = $oAtt->appendChild( new domElement( 'datatype' ) );
		    $oDataType->setAttribute( 'minOccurs', $oAttDat->getAttribute( 'minOccurs' )  );

  		    $oDataType->setAttribute( 'maxOccurs', $oAttDat->getAttribute( 'maxOccurs' )  );

		    if ( $oAttDat->firstChild->nodeName == 'rng:text' )
		      {
			$oDataType->appendChild( new domText( 'text' ) );
		      }
	       	    elseif( $oAttDat->firstChild->nodeName == 'rng:data' )
		      {
			$theNode = $oAttDom->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:data' );
			$oNode = $oDataType->appendChild( $theNode );
			$oNode->setAttribute( 'type', $oAttDat->firstChild->getAttribute( 'type' ) );
		      }
		    else
		      { 
			$theNode = $oAttDom->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:ref' );
			$oNode = $oDataType->appendChild( $theNode );
			$oNode->setAttribute( 'name', $oAttDat->firstChild->getAttribute( 'name' ) );
		      }
		  }
	      }
	  }

	return $errResult;
      }

// getting the currentAttribute definition 
    public function getAttributeDefinition( $szAttribute, $szElement, $szModule, $szClass,&$oDef )
      {
	$this->getXPath( $oXPath );
	
	$oDef = new domDocument;
	$oRoot = $oDef->appendChild( new domElement( 'attDef' ) );
	
	$this->getAttributeDomByElementInModule( $szElement,
	$szModule, $szClass, $oAtts );

	$oXPath = new domxpath( $oAtts );
	$oAttDef = $oXPath->query( "/Element/att[child::name[node()='$szAttribute']]" )->item(0);

	$oAdd = $oRoot->appendChild( new domElement( 'added' ) );
	$oAdd->appendChild( new domText( $oAttDef->getAttribute( 'added' ) ) );

	$this->getAttributeValList( $szAttribute, $szElement,
             $szModule, $szClass, $aszList, $aszListType );
        $szValList = join( ',', $aszList );


	foreach( $oAttDef->childNodes as $oChild )
	  {
	    switch( $oChild->nodeName )
	      {
		// allow for whitespace, should be no text nodes
	      case '#text':
		break;
	      case 'name':
		$oName = $oRoot->appendChild( new domElement( 'attName' ) );
		$oName->appendChild( new domText( $oChild->nodeValue ) );
		$oOpt = $oRoot->appendChild( new domElement( 'optional' ) );
		$oOpt->appendChild( new domText( $oChild->getAttribute( 'usage' ) ) );
		break;
	      case 'altname':
		$oName = $oRoot->appendChild( new domElement( 'altName' ) );
		$oName->appendChild( new domText( $oChild->nodeValue ) );
		break;
	      case 'datatype':
		$oNode = $oRoot->appendChild( new domElement( 'datatype' ) );
	        $oNode->setAttribute('minOccurs',$oChild->getAttribute( 'minOccurs'));
	        $oNode->setAttribute('maxOccurs',$oChild->getAttribute( 'maxOccurs'));
		if ( $oChild->firstChild->nodeName == 'rng:text' )
		  {
		    $oNode->appendChild( new domText( 'text' ) );
		  }
		elseif( $oChild->firstChild->nodeName == 'rng:data' )
		  {
		    $oNode->appendChild( new domText( $oChild->firstChild->getAttribute( 'type' ) ) );
		  }
		elseif( $oChild->firstChild->nodeName == 'rng:ref' )
		  {
		    $oNode->appendChild( new domText( $oChild->firstChild->getAttribute( 'name' ) ) );
		  }
		break;
	      case 'valList':
	        if ($szValList == '') {
		 foreach( $oChild->childNodes as $valItem )
		   {
		   if ($valItem->nodeName =='valItem')	
		      {
			$aszList[] = $valItem->getAttribute( 'ident' );
		      }
		   }
		   $szValList = join( ',', $aszList );	
		  }
		  if ($aszListType =='') {
		     $aszListType = $oChild->getAttribute( 'type' );
		  }
	       break;
	      default:
		$oNode = $oRoot->appendChild( new domElement( $oChild->nodeName ) );
		$oNode->appendChild( new domText( $oChild->nodeValue ) );
		break;		      
	      }
	  }
	

	$oValList = $oRoot->appendChild( new domElement( 'valList', $szValList ));
	if ($aszListType != '') {
	 $oValList->setAttribute('type',$aszListType);
	}
      }

    public function getAttributeValList( $szAttribute, $szElement,
      $szModule, $szClass, &$aszList, &$aszListType )
      {
	$aszList = array();
	$this->getXPath( $oXPath );

	if ( $szModule != '' && $szClass == '' )
	  {
	    $oValList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}' and @module='$szModule']/tei:attList/tei:attDef[@ident='{$szAttribute}']/tei:valList" )->item(0);

	    if ( is_object( $oValList ) )
	      {
		foreach( $oValList->childNodes as $oChild )
		  {
		    $aszList[] = $oChild->getAttribute( 'ident' );
		  }
		  $aszListType = $oValList->getAttribute( 'type' );
	      }
	  }
	elseif( $szClass == '' )
	  {
	    $oValList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']/tei:valList" )->item(0);

	    if ( is_object( $oValList ) )
	      {
		foreach( $oValList->childNodes as $oChild )
		  {
		    $aszList[] = $oChild->getAttribute( 'ident' );
		  }
		  $aszListType = $oValList->getAttribute( 'type' );
	      }
	    
	  }
	else
	  {

	    $oValList = $oXPath->query("/tei:TEI/tei:text//tei:classSpec[@module='$szModule' and @ident='{$szClass}']/tei:attList/tei:attDef[@ident='{$szAttribute}']/tei:valList" )->item(0);

	    if ( is_object( $oValList ) )
	      {
		foreach( $oValList->childNodes as $oChild )
		  {
		    $aszList[] = $oChild->getAttribute( 'ident' );
		  }
		  $aszListType = $oValList->getAttribute( 'type' );
	      }
	  }
      }



    public function getChangedAttributeClasses( &$aszClasses )
      {
	$this->getXPath( $oXPath );
        $aoClasses = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec/@key" );

	$aszClasses = array();
	foreach( $aoClasses as $oClass )
	  {
	    $aszClasses[] = $oClass->nodeValue;
          }
      }

     public function getAttributeClassChanges( $szClass, &$oDom )
      {
	$oDom = new domDocument();
	$oClass = $oDom->appendChild( new domElement( 'class' ) );
	$oClass->setAttribute( 'ident', $szClass );

	$this->getXPath( $oXPath );
        $szModule = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']]/@key" )->item(0)->nodeValue;

	$oClass->appendChild( new domElement( 'module', $szModule ) );
	$oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@key='{$szClass}']/tei:attList" )->item(0);

	$oAttList = $oDom->importNode( $oAttList, true );
	$oClass->appendChild( $oAttList );
      }


    public function getCustomizationTitle( &$szTitle )
      {
	$this->getXPath( $oXPath );
	$szTitle = $oXPath->query( "/tei:TEI/tei:teiHeader/tei:fileDesc/tei:titleStmt/tei:title" )->item(0)->nodeValue;
      }

    public function getCustomizationAuthor( &$szAuthor )
      {
	$this->getXPath( $oXPath );
	$szAuthor = $oXPath->query( "/tei:TEI/tei:teiHeader/tei:fileDesc/tei:titleStmt/tei:author" )->item(0)->nodeValue;
      }

    public function getCustomizationFilename( &$szFilename )
      {
	$this->getXPath( $oXPath );
	$szFilename = $oXPath->query( "//tei:schemaSpec/@ident" )->item(0)->nodeValue;
      }

    public function getCustomizationPrefix( &$szPrefix )
      {
	$this->getXPath( $oXPath );
	$szPrefix = $oXPath->query( "//tei:schemaSpec/@prefix" )->item(0)->nodeValue;
      }

    public function getCustomizationNamespace( &$szNamespace )
      {
	$this->getXPath( $oXPath );
	$szNamespace = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc/tei:notesStmt/tei:note[@type='ns']")->item(0)->nodeValue;
         if ($szNamespace == '' ){
	    $szNamespace = 'http://www.example.org/ns/nonTEI';
	 }
      }

    public function getCustomizationLanguage( &$szLanguage )
      {
	$this->getXPath( $oXPath );
	$xmllang = $oXPath->query( "/tei:TEI/@xml:lang")->item(0)->nodeValue;
	switch( $xmllang ) 
		  {
  	case 'en'    : $szLanguage='en'; break;
	case 'en-US' : $szLanguage='en'; break;
	case 'en-GB' : $szLanguage='en'; break;
	case 'fr'    : $szLanguage='fr'; break;
	case 'de'    : $szLanguage='de'; break;
	case 'it'    : $szLanguage='it'; break;
	case 'zh-TW' : $szLanguage='zh-TW'; break;
	case 'es' :    $szLanguage='es'; break;
	case 'pt' :    $szLanguage='pt'; break;
	case 'zh'    : $szLanguage='zh-TW'; break;
	case 'ja'    : $szLanguage='ja'; break;
	case 'ru'    : $szLanguage='ru'; break;
	case 'sw'    : $szLanguage='sw'; break;
	default: $szLanguage='en'; break;
      }
      }

    public function getOddLanguage( &$szOddLanguage )
      {
	$this->getXPath( $oXPath );
	$szOddLanguage = $oXPath->query( "/tei:TEI//tei:schemaSpec/@targetLang" )->item(0)->nodeValue;
        if ($szOddLanguage=='') { $szOddLanguage='en'; }
      }

    public function getDocLanguage( &$szDocLanguage )
      {
	$this->getXPath( $oXPath );
	$szDocLanguage = $oXPath->query( "/tei:TEI//tei:schemaSpec/@docLang" )->item(0)->nodeValue;
        if ($szDocLanguage=='') { $szDocLanguage='en'; }
      }

    public function getCustomizationDescription( &$szDesc )
      {
	$this->getXPath( $oXPath );
	$szDesc = $oXPath->query( "/tei:TEI/tei:text/tei:body//tei:p[1]" )->item(0)->nodeValue;
      }
    

    // #####################################################################
    // --- Change the Customization
    // #####################################################################

    public function addModule( $szModule )
      {
	$errResult = false;

	$this->getXPath( $oXPath );

        $oModuleRef = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);        
        if (! is_object( $oModuleRef ) )
          {
            $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
	    if ( is_object( $oSchema ) )
              {
                $theModRef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'moduleRef' );
                $oModuleRef = $oSchema->appendChild( $theModRef );
		$oModuleRef->setAttribute( 'key', $szModule );
		$oModuleRef->setAttribute( 'except', '' );
              }
          }

	return $errResult;
      }

    public function removeModule( $szModule )
      {
	$errResult = false;

	$this->getXPath( $oXPath );

        $oModuleRef = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
        $oSchema->removeChild( $oModuleRef );

	return $errResult;
      }
	

    public function addElement( $aszConfig )
      {
	if (! mb_ereg_match( '^[\w\d]+$', $aszConfig[ 'name' ] ) )
	  {
	    throw new falseTagnameException( '', $aszConfig[ 'name' ] );
	  }

	//check if name already exists
	$oTmpDom = new domDocument();
	$this->getDocLanguage( $szDocLanguage );
	if ($aszConfig['namespace' ] == 'http://www.tei-c.org/ns/1.0' &&
	    @$oTmpDom->loadXML( join( '', file( roma_xquery_server . 'element.xql?lang=' . $szDocLanguage . '&name=' . $aszConfig[ 'name' ] ) ) ) )
	  {
	    throw new elementExistsException( $aszConfig[ 'name' ] );
	  }
	     
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);

        if ( is_object( $oSchema ) )
          {
            //check whether element already exists
            $oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='" . $aszConfig[ 'name' ] . "']" )->item(0);

// see if it is already there. if not, create it.
	    if ( ! is_object( $oElementSpec ) )
	      {
		$theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
		$oElementSpec = $oSchema->appendChild( $theElementSpec );
		$oElementSpec->setAttribute( 'ident', $aszConfig['name' ] );
	      
	      if ($aszConfig[ 'namespace' ] != '') {
		$oElementSpec->setAttribute( 'ns', $aszConfig['namespace' ] );
		}
	      //$oElementSpec->setAttribute( 'mode', ( ( $aszConfig[ 'added' ] == 'true' ) ? 'add' : 'change' )
	      $oElementSpec->setAttribute( 'mode', 'add');
	      }

// whether or not it existed before, it does  now

// description
	    $oDesc = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'name' ]}']/tei:desc" )->item(0);

	    if ( is_object( $oDesc ) )
	      {
		$oDesc->nodeValue = stripslashes( $aszConfig[ 'description' ] );
	      }
	    else
	      {
		$theDesc = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'desc' );
		$oDesc = $oElementSpec->appendChild( $theDesc );
		$oDesc->appendChild( new domText( stripslashes( $aszConfig[ 'description' ] ) ) );
	      }
// namespace

   	   $oElementSpec->setAttribute( 'ns', $aszConfig[ 'namespace'] );

// classes
	    $oClasses = $oElementSpec->getElementsByTagname( 'classes' )->item(0);
	    if ( is_object( $oClasses ) )
	      {
		$oElementSpec->removeChild( $oClasses );
	      }
            $theClasses = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classes' );
            $oClasses = $oElementSpec->appendChild( $theClasses );
	    
	    foreach( $aszConfig[ 'classes' ] as $szClass )
              {
		$theMemberOf = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'memberOf' );
		$oMember = $oClasses->appendChild( $theMemberOf );
		$oMember->setAttribute( 'key', $szClass );
              }

// content model
	    $oContent = $oElementSpec->getElementsByTagname( 'content' )->item(0);
            $szDesc=$aszConfig[ 'description' ];
	    if ( is_object( $oContent ) )
	      {
		$oElementSpec->removeChild( $oContent );
	      }
	    if( $aszConfig[ 'content' ] == 'userContent' )
	      {
                $szContents=stripslashes($aszConfig[ 'contentmodel' ]);
		$oConDom = new domDocument();
		if( $oConDom->loadXML( $szContents ) )
		  {
		    $oRoot = $oConDom->documentElement;
		    
		    $oRoot = $this->importNode( $oRoot, true );
		    $oElementSpec->appendChild( $oRoot );
		  }
		else
		  {
		    throw new falseContentsException( $aszConfig[ 'contentmodel' ] );
		    $errResult = true;
		  }
	      }
	    else
	      {
		$theContent = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'content' );
		$oContent = $oElementSpec->appendChild( $theContent );
		
		switch( $aszConfig[ 'content' ] )
		  {
		  case 'empty':
		  case 'text':
		    $oRNG = $this->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:' . $aszConfig[ 'content' ] );
		    $oContent->appendChild( $oRNG );
		    break; 
		  default:
		    $oRNG = $this->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:ref' );
		    $oRef = $oContent->appendChild( $oRNG );
		    $oRef->setAttribute( 'name', $aszConfig[ 'content' ] );
		    break;
		  }
	      }

          }
      }

    public function setElementsInModule($szModule, $includedNames, $excludedNames )
      {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
        $oModuleRef = $oXPath->query( "//tei:schemaSpec//tei:moduleRef[@key='$szModule']" )->item(0);
	
        if (! is_object( $oModuleRef ) )
          {
	    $theModRef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'moduleRef' );
	    $oModuleRef = $oSchema->appendChild( $theModRef );
	    $oModuleRef->setAttribute( 'key', $szModule );
	    $oModuleRef->setAttribute( 'except', $excludedNames );
          }
	elseif 	 ( $oModuleRef->hasAttribute('include'))
	  {
	    $oModuleRef->setAttribute( 'include', $includedNames );
	  }
        else
	   {
	    $oModuleRef->setAttribute( 'except', $excludedNames );
	   }
        $oldElementSpecDel = $oXPath->query( "//tei:schemaSpec//tei:elementSpec[@module='$szModule' and @mode='delete']" );
	foreach($oldElementSpecDel as $oElementSpec) {
	  $oElementSpec->parentNode->removeChild( $oElementSpec );
	}
	
      }

    public function includeElementInModule( $szElement, $szModule )
      {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
        $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);
	$oElementSpec = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@module='$szModule' and @ident='$szElement']" )->item(0);

        if ( ! is_object( $oModule ) ) 
	  {
            $this->addModule( $szModule);
          }
	
	if ( is_object( $oElementSpec ) )
	  {
	  $oElementSpec ->parentNode->removeChild($oElementSpec);
//      error_log ( "ADD " . $szElement . "\n",3,'/tmp/romalog' );
	  }
      }

    public function changeElementNameInModule( $szOldName, $szNewName, $szModule )
      {
	$errResult = false;
	
	if ( mb_ereg_match( '^[\w\d]+$', $szNewName ) )
	  {
		  
	    $this->getXPath( $oXPath );
            $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
            $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);
	    $oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szOldName']" )->item(0);
	
            if ( ! is_object( $oModule ) ) 
	      {
                $this->addModule( $szModule);
              }

  	    if (! is_object( $oElementSpec ) )
 	      {
			  
                $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
 	        $oElementSpec = $oSchema->appendChild( $theElementSpec );
	        $oElementSpec->setAttribute( 'module', $szModule );
	        $oElementSpec->setAttribute( 'ident', $szOldName );
	        $oElementSpec->setAttribute( 'mode', 'change' );
		
                $theAltIdent = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'altIdent' );
   	        $oAltIdent = $oElementSpec->appendChild( $theAltIdent );
	        $oAltIdent->appendChild( new domText($szNewName ) );
			
	      }
  	    else
  	      {
	        $oElementSpec->setAttribute( 'mode', 'change' );

		$oAltIdent = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$szOldName']/tei:altIdent" )->item(0);
		
		if ( is_object( $oAltIdent ) )
		  {
		    $oElementSpec->removeChild( $oAltIdent );
		  }
	      
                $theAltIdent = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'altIdent' );
	        $oAltIdent = $oElementSpec->appendChild( $theAltIdent );
  	        $oAltIdent->appendChild( new domText( $szNewName ) );
 	     }
          }
	else
	  {
	    throw new falseTagnameException( $szOldName, $szNewName );
	    $errResult = $szOldName;
	  }
	
	return $errResult;
      }

    public function changeElementDescInModule( $szName, $szModule, $szDescription )
      {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
	$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);
	$oElementSpec = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@ident='$szName']" )->item(0);
	
	if ( ! is_object( $oModule ) ) 
	  {
	    $this->addModule( $szModule);
	  }
	
	if (! is_object( $oElementSpec ) )
	  {
	    $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
	    $oElementSpec = $oSchema->appendChild( $theElementSpec );
	    $oElementSpec->setAttribute( 'ident', $szName );
	    $oElementSpec->setAttribute( 'module', $szModule );
	    $oElementSpec->setAttribute( 'mode', 'change' );
	    
	    $theDesc = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'desc' );
	    $oDesc = $oElementSpec->appendChild( $theDesc );
	    $oDesc->appendChild( new domText( $szDescription ) );
	  }
	else
	  {
	    $oElementSpec->setAttribute( 'mode', 'change' );

	    $oDesc = $oXPath->query(
	    "/tei:TEI/tei:text//tei:elementSpec[@ident='$szName']/tei:desc")->item(0);
	    
	    if ( is_object( $oDesc ) )
	      {
	      if ($oDesc != $theDesc) 
	       {
		$oElementSpec->removeChild( $oDesc );
                $theDesc = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'desc' );
	        $oDesc = $oElementSpec->appendChild( $theDesc );
	        $oDesc->appendChild( new domText( stripslashes($szDescription) ) );
	      }
	  }
      }
    }

    public function changeElementNamespaceInModule( $szName, $szNamespace )
      {
	$this->getXPath( $oXPath );
	$oElementSpec = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@ident='$szName']" )->item(0);

	if ( is_object( $oElementSpec ) ) {

   	   $oElementSpec->setAttribute( 'ns', $szNamespace );
        }
}

    public function changeElementContentsInModule( $szElement, $szModule, $szContents )
      {
	$errResult = false;

	$szContents = preg_replace( '%\\\\"%', '"', $szContents );

	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
	$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='$szModule']" )->item(0);
	$oElementSpec = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@ident='$szElement']" )->item(0);
	$oContent = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@ident='$szElement']/tei:content" )->item(0);
	if ( ! is_object( $oModule ) ) 
	  {
	    $this->addModule( $szModule);
	    }	    
	if (! is_object( $oElementSpec ) )
	  {
       	    $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
	    $oElementSpec = $oSchema->appendChild( $theElementSpec );
	    $oElementSpec->setAttribute( 'ident', $szElement );
	    $oElementSpec->setAttribute( 'module', $szModule );
	    $oElementSpec->setAttribute( 'mode', 'change' );
	  }


	if ( is_object( $oContent ) )
          {
	    $oElementSpec->removeChild( $oContent );
          }

	$oElementSpec->setAttribute( 'mode', 'change' );
	
	//Load Content
	$oConDom = new domDocument();
	if( $oConDom->loadXML( $szContents ) )
	  {
	    $oRoot = $oConDom->documentElement;
	    
	    $oRoot = $this->importNode( $oRoot, true );
	    $oElementSpec->appendChild( $oRoot );
	  }
	else
	  {
	    throw new falseContentsException( $szContents );
	    $errResult = true;
	  }

	return $errResult;
      }

 
    public function replaceElementsClassesInModule( $szElement, $szModule, $aszClasses) {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
	$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
	$oElementSpec = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']" )->item(0);
	if ( ! is_object( $oModule ) ) 
	  {
	    $this->addModule( $szModule);
	  }

	if (! is_object( $oElementSpec ) )
	  {
       	    $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
	    $oElementSpec = $oSchema->appendChild( $theElementSpec );
	    $oElementSpec->setAttribute( 'ident', $szElement );
	    $oElementSpec->setAttribute( 'module', $szModule );
	    $oElementSpec->setAttribute( 'mode', 'change' );
	  }

	//check whether there are any classes yet
	$oClasses = $oXPath->query(	"/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']/tei:classes" )->item(0);

	if ( is_object( $oClasses ) ) {
	    $oElementSpec->removeChild( $oClasses );
	  }

	$theClasses = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classes' );
	$oClasses = $oElementSpec->appendChild( $theClasses );
	$oClasses->setAttribute( 'mode', 'replace' );

	foreach ( $aszClasses as $szClass => $classValue )
	  {
	    $theMemberOf = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'memberOf' );
	    $oMember = $oClasses->appendChild( $theMemberOf );
	    $oMember->setAttribute( 'key', $szClass );
	    if ($classValue != 'replace') 
	      {
		$oMember->setAttribute( 'mode',$classValue );
	      }		
	  }
    }  

    public function addAttribute( $aszConfig )
      {
	$errResult = false;
	if (! mb_ereg_match( '^[\w\d:-]+$', $aszConfig[ 'name' ] ) )
	  {
	    $errResult = true;
	    throw new falseTagnameException( '', $aszConfig[ 'name' ] );
	  }
	  // are we an element or a class
	if ( $aszConfig[ 'class' ] == '' )
	 {	$current=$aszConfig[ 'element' ] ;}
	else
	 {	$current=$aszConfig[ 'class' ] ; }

	//check if name already exists
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);
	if ( ! $errResult )
	  {
	    $this->getXPath( $oXPath );

	    if ( $aszConfig[ 'module' ] != '' && $aszConfig[ 'class' ] == '' )
	      {
		$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$aszConfig[ 'module' ]}']" )->item(0);

		$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'element' ]}']" )->item(0);

		if ( ! is_object( $oModule ) ) 
		  {
		    $this->addModule( $aszConfig[ 'module' ]);
		  }
		
		if (! is_object( $oElementSpec ) )
		  {
		    $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
		    $oElementSpec = $oSchema->appendChild(  $theElementSpec );
		    $oElementSpec->setAttribute( 'ident', $aszConfig['element' ] );
		    $oElementSpec->setAttribute( 'module',  $aszConfig['module'] );
		  }
		$oElementSpec->setAttribute( 'mode', 'change' );
	    
		$oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'element' ]}']/tei:attList" )->item(0);
	    
		if (! is_object( $oAttList ) )
		  {
		    $theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		    $oAttList = $oElementSpec->appendChild( $theAttList );
		  }

		$oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'element' ]}']/tei:attList/tei:attDef[@ident='{$aszConfig[ 'name' ]}']" )->item(0);
	      }
	    elseif( $aszConfig[ 'class' ] == '' )
	      {
		$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='" . $aszConfig[ 'element' ] . "']" )->item(0);

		$oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'element' ]}']/tei:attList" )->item(0);
	    
		if (! is_object( $oAttList ) )
		  {
		    $theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		    $oAttList = $oElementSpec->appendChild( $theAttList );
		  }

		$oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$aszConfig[ 'element' ]}']/tei:attList/tei:attDef[@ident='{$aszConfig[ 'name' ]}']" )->item(0);

	      }
	    else
	      {
		$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$aszConfig[ 'module' ]}']" )->item(0);
		$oClassSpec = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$aszConfig[ 'class' ]}']" )->item(0);
		
		if ( ! is_object( $oModule ) ) 
		  {
		    $this->addModule( $aszConfig[ 'module' ]);
		  }
		
		if (! is_object( $oClassSpec ) )
		  {
		    $theClassSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classSpec' );
		    $oClassSpec = $oSchema->appendChild( $theClassSpec );
		    $oClassSpec->setAttribute( 'ident', $aszConfig[ 'class' ] );
		    $oClassSpec->setAttribute( 'type', 'atts' );
		    $oClassSpec->setAttribute( 'mode', 'change' );
		    $oClassSpec->setAttribute( 'module', $aszConfig[ 'module' ]  );
		  }
		
		
		$oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$aszConfig[ 'class' ]}']/tei:attList" )->item(0);
		
		if (! is_object( $oAttList ) )
		  {
		    $theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		    $oAttList = $oClassSpec->appendChild( $theAttList );
		  }

		$oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$aszConfig[ 'class' ]}']/tei:attList/tei:attDef[@ident='{$aszConfig[ 'name' ]}']" )->item(0);
	      }

	    //attdef
	    if (! is_object( $oAttDef ) )
	      {
		$theAttDef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attDef' );
		$oAttDef = $oAttList->appendChild( $theAttDef );
		$oAttDef->setAttribute( 'ident', $aszConfig[ 'name' ] );

		if ( $aszConfig[ 'added' ] == 'true' )
		  {
		    $oAttDef->setAttribute( 'mode', 'add' );
		  }
		else
		  {
		    $oAttDef->setAttribute( 'mode', 'change' );
		  }
	      }

	    //optional
	    if ($aszConfig[ 'changedUsage'] == 'true' ) {
	      if ($aszConfig[ 'optional' ] == 'true' )
	    	{
		  $oAttDef->setAttribute( 'usage', 'opt' );
		}
	      else
	    	{
		  $oAttDef->setAttribute( 'usage', 'req' );
		}
	    }
	    //desc, has it changed? we should NOT be checking all the way down, however.
	    if ($aszConfig[ 'changedDesc'] == 'true' ) {
	      $gotDesc=false;
	      foreach( $oAttDef->childNodes as $oChild )
		{
		  switch( $oChild->nodeName )
		    {
		    case 'desc':
		      $oDesc->nodeValue= stripslashes($aszConfig[ 'description' ]);
		      $gotDesc=true;
		      break;
		    }
		}
	      if (!$gotDesc)
		$oDesc->nodeValue= stripslashes($aszConfig[ 'description' ]);
	       {
		 $theDesc = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'desc' );
		 $oDesc = $oAttDef->appendChild( $theDesc );
		 $oDesc->appendChild( new domText( stripslashes($aszConfig[ 'description' ]) ) );
	       }
	    }

	    //	    echo "<p>name = " .  $aszConfig[ 'name' ];
	    //	    echo "<p>altname = " .  $aszConfig[ 'altname' ];
	    //	    echo "<p>class = " .  $aszConfig[ 'class' ];
	    //	    echo "<p>module = " .  $aszConfig[ 'module' ];
	    //	    echo "<p>changedDesc = " .  $aszConfig[ 'changedDesc'];
	    //	    echo "<p>changedName = " .  $aszConfig[ 'changedName'];
	    //	    echo "<p>changedUsage = " .  $aszConfig[ 'changedUsage'];
	    //	    echo "<p>changedContent = " .  $aszConfig[ 'changedContent'];
	    //	    echo "<p>element = " .  $aszConfig[ 'element' ];
	    //	    echo "<p>valList = " .  $aszConfig[ 'valList' ];
	    //	    echo "<p>added = " .  $aszConfig[ 'added' ];
	    //	    echo "<p>optional = " .  $aszConfig[ 'optional' ];
	    //	    echo "<p>maxOccurs = " .  $aszConfig[ 'maxOccurs' ];
	    //	    echo "<p>minOccurs = " .  $aszConfig[ 'minOccurs' ];
	    //	    echo "<p>closed = " .  $aszConfig[ 'closed' ];
	    //	    echo "<p>content = " .  $aszConfig[ 'content' ];
	    //	    echo "<p>defaultValue = " .  $aszConfig[ 'defaultValue' ];
	    //	    echo "<p>description = " .  $aszConfig[ 'description' ] ;

	    // what about the altIdent?
	    if ($aszConfig[ 'changedName'] == 'true' ) {
 	     $oAlt = $oAttDef->getElementsByTagname( 'altIdent' )->item(0);
	     if ( is_object( $oAlt) )
	      {
		$oAttDef->removeChild( $oAlt);
	      }
	     $theAlt = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'altIdent' );
	     $oAlt = $oAttDef->appendChild( $theAlt );
	     $oAlt->appendChild( new domText( stripslashes($aszConfig[ 'altname' ]) ) );
	    }

	    //content
	    if ($aszConfig[ 'changedContent'] == 'true' ) {
	      $oContent = $oAttDef->getElementsByTagname( 'datatype' )->item(0);
	      if ( is_object( $oContent ) )
		{
		  $oAttDef->removeChild( $oContent );
		}
	      $theContent = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'datatype' );
	      $oContent = $oAttDef->appendChild( $theContent );
	      
	      $oContent->setAttribute('minOccurs', $aszConfig['minOccurs']);
	      $oContent->setAttribute('maxOccurs', $aszConfig['maxOccurs']);
	      switch ( $aszConfig[ 'content' ] )
		{
		case 'text':
		  $oRNG = $this->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:' . $aszConfig[ 'content' ] );
		  $oContent->appendChild( $oRNG );
		  break; 
		default:
		  $oRNG = $this->createElementNS( 'http://relaxng.org/ns/structure/1.0', 'rng:ref' );
		  $oRef = $oContent->appendChild( $oRNG );
		  $oRef->setAttribute( 'name', $aszConfig[ 'content' ] );
		  break;
		}
	    }
	      	    
	    //default
	    if ($aszConfig[ 'defaultValue' ] != '') {
	     $oDefault = $oAttDef->getElementsByTagname( 'defaultVal' )->item(0);
  	     if ( is_object( $oDefault ) )
	      {
		$oAttDef->removeChild( $oDefault );
	      }
	     $theDefault = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'defaultVal' );
	     $oDefault = $oAttDef->appendChild( $theDefault );
	     $oDefault->appendChild( new domText( $aszConfig[ 'defaultValue' ] ) );
	    }
	    //valList
	    if ($aszConfig[ 'valList' ] != '') {
	     $oValList = $oAttDef->getElementsByTagname( 'valList' )->item(0);
	     if ( is_object( $oValList ) )
	      {
		$oAttDef->removeChild( $oValList );
	      }
	     $aszValList = explode( ',', $aszConfig[ 'valList' ] );
	     $theValList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'valList' );
	     $oValList = $oAttDef->appendChild( $theValList );
	     if ( $aszConfig[ 'closed' ] == 'true' )
	      {
		$oValList->setAttribute( 'type', 'closed' );
	      }
	     else
	      {
		$oValList->setAttribute( 'type', 'open' );
	      }
    	     if ( $aszConfig[ 'added' ] != 'true' )
	     {
		 $oValList->setAttribute( 'mode', 'replace' );	
		 }
	     if ( is_array( $aszValList ) )
	      {
		foreach( $aszValList as $szValue )
		  {
		    chop( $szValue );
		    if ( $szValue != '' )
		      {
			$theValItem = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'valItem' );
			$oValItem = $oValList->appendChild( $theValItem );
			$oValItem->setAttribute( 'ident', $szValue );
		      }
		  }
	        }
	     }
	  }


        if ( (!$oAttDef ->hasChildNodes() ) && $aszConfig[ 'changedUsage'] == 'false')
	  {
	  $oAttList->removeChild( $oAttDef );
	  }
	return $errResult;

      }

    public function includeAttributeInElement( $szAttribute, $szClass, $szModule, $szElement )
      {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);

	if ( $szModule != '' && $szClass == '')
	  {
	    $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
	    $oElementSpec = $oXPath->query(
	  "/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']" )->item(0);
	    
	    if ( ! is_object( $oModule ) ) 
	      {
		$this->addModule( $szModule);
	      }
	    
	    if (! is_object( $oElementSpec ) )
	      {
		$theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
		$oElementSpec = $oSchema->appendChild( $theElementSpec );
		$oElementSpec->setAttribute( 'ident',  $szElement );
		$oElementSpec->setAttribute( 'module', $szModule );
		$oElementSpec->setAttribute( 'mode',   'change' );
	      }
	    
	    $oAttList = $oXPath->query(
	    "/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oElementSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	elseif ( $szModule == '' && $szClass == '' )
	  {
	    $oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']" )->item(0);
	    
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oElementSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	else
	  {
	    $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
	    $oClassSpec = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']" )->item(0);
	    
	    if ( ! is_object( $oModule ) ) 
	      {
		$this->addModule( $szModule);
	      }
	    
	    if (! is_object( $oClassSpec ) )
	      {
		$theClassSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classSpec' );
		$oClassSpec = $oSchema->appendChild( $theClassSpec );
		$oClassSpec->setAttribute( 'ident', $szClass );
		$oClassSpec->setAttribute( 'mode', 'change' );
		$oClassSpec->setAttribute( 'type', 'atts' );
		$oClassSpec->setAttribute( 'module', $szModule );
	      }

	
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oClassSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }


	if ( ! is_object( $oAttDef ) )
	  {
	    //attdef
	    $theAttDef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attDef' );
	    $oAttDef = $oAttList->appendChild( $theAttDef );
	    $oAttDef->setAttribute( 'ident', $szAttribute );
	  }

	$oAttDef->setAttribute( 'mode', 'change' );
        if (!$oAttDef ->hasChildNodes()) {
	  $oAttList->removeChild( $oAttDef );
	}
      }
    


    public function excludeAttributeInElement( $szAttribute, $szClass, $szModule, $szElement )
      {
	$this->getXPath( $oXPath );
        $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);

	if ( $szModule != '' && $szClass == '' )
	  {
	    $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
	    $oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']" )->item(0);
	    
	    if ( ! is_object( $oModule ) ) 
	      {
		$this->addModule( $szModule);
	      }
	    
	    if (! is_object( $oElementSpec ) )
	      {
		$theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
		$oElementSpec = $oSchema->appendChild( $theElementSpec );
		$oElementSpec->setAttribute( 'ident', $szElement );
		$oElementSpec->setAttribute( 'module', $szModule );
		$oElementSpec->setAttribute( 'mode', 'change' );
	      }
	
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oElementSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	elseif ( $szModule == '' && $szClass == '' )
	  {
	    $oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='" . $szElement . "']" )->item(0);
	    
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oElementSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	else
	  {
	    $oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
	    $oClassSpec = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']" )->item(0);
	    
	    if ( ! is_object( $oModule ) ) 
	      {
		$this->addModule( $szModule);
	      }
	    
	    if (! is_object( $oClassSpec ) )
	      {
		$theClassSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classSpec' );
		$oClassSpec = $oSchema->appendChild( $theClassSpec );
		$oClassSpec->setAttribute( 'ident', $szClass );
		$oClassSpec->setAttribute( 'module', $szModule );
		$oClassSpec->setAttribute( 'mode', 'change' );
		$oClassSpec->setAttribute( 'type', 'atts' );
	      }

	
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']/tei:attList" )->item(0);
	    
	    if (! is_object( $oAttList ) )
	      {
		$theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		$oAttList = $oClassSpec->appendChild( $theAttList );
	      }
	    
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }

	if ( ! is_object( $oAttDef ) )
	  {
	    //attdef
	    $theAttDef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attDef' );
	    $oAttDef = $oAttList->appendChild( $theAttDef );
	    $oAttDef->setAttribute( 'ident', $szAttribute );
	  }

	$oAttDef->setAttribute( 'mode', 'delete' );
      }

    public function changeAttributesName( $szOldName, $szNewName, $szClass, $szModule, $szElement )
      {
	$errResult = false;

	if ( mb_ereg_match( '^[:\w\d]+$', $szNewName ) )
	  {
	    $this->getXPath( $oXPath );
	    $oSchema = $oXPath->query( "//tei:schemaSpec" )->item(0);	    
	    if ( $szModule != '' && $szClass == '' )
	      {
		$oSchema = $oXPath->query("//tei:schemaSpec")->item(0);
		$oModuleRef = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
		$oElementSpec = $oXPath->query(
	      "/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']" )->item(0);
	    
		if ( ! is_object( $oModuleRef ) ) 
		  {
		    $this->addModule( $szModule);
		  }
		
		if (! is_object( $oElementSpec ) )
		  {
		    $theElementSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'elementSpec' );
		    $oElementSpec = $oSchema->appendChild( $theElementSpec );
		    $oElementSpec->setAttribute( 'ident', $szElement  );
		    $oElementSpec->setAttribute( 'module', $szModule );
		    $oElementSpec->setAttribute( 'mode', 'change' );
		  }
		
		$oAttList = $oXPath->query("/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']/tei:attList" )->item(0);
	    
		if (! is_object( $oAttList ) )
		  {
		    $theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		    $oAttList = $oElementSpec->appendChild( $theAttList );
		  }
		
		$oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='$szOldName']" )->item(0);
	      }
	    elseif ( $szClass != '' )
	      {
		$oModule = $oXPath->query( "//tei:schemaSpec/tei:moduleRef[@key='{$szModule}']" )->item(0);
		$oClassSpec = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='{$szClass}']" )->item(0);
		
		if ( ! is_object( $oModule ) ) 
		  {
		    $this->addModule( $szModule);
		  }
		
		if (! is_object( $oClassSpec ) )
		  {
		    $theClassSpec = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'classSpec' );
		    $oClassSpec = $oSchema->appendChild( $theClassSpec );
		    $oClassSpec->setAttribute( 'ident', $szClass );
		    $oClassSpec->setAttribute( 'type', 'atts' );
		    $oClassSpec->setAttribute( 'module', $szModule );
		    $oClassSpec->setAttribute( 'mode', 'change' );
		  }
		
		
		$oAttList = $oXPath->query(
		"/tei:TEI/tei:text//tei:classSpec[@module='{$szModule}' and @ident='{$szClass}']/tei:attList" )->item(0);
		
		if (! is_object( $oAttList ) )
		  {
		    $theAttList = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attList' );
		    $oAttList = $oClassSpec->appendChild( $theAttList );
		  }
		
		$oAttDef = $oXPath->query(
	      "/tei:TEI/tei:text//tei:classSpec[@module='{$szModule}' and @ident='{$szClass}']/tei:attList/tei:attDef[@ident='$szOldName']" )->item(0);
	      }
	    
	    if ( ! is_object( $oAttDef ) )
	      {
		//attdef
		$theAttDef = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'attDef' );
		$oAttDef = $oAttList->appendChild( $theAttDef );
		$oAttDef->setAttribute( 'ident', $szOldName );
	      }
	    
	    $oAltIdent = $oAttDef->getElementsByTagName( 'altIdent' )->item(0);
	    if( is_object( $oAltIdent ) )
	      {
		$oAttDef->removeChild( $oAltIdent );
	      }
	    
	    $theAltIdent = $this->createElementNS( 'http://www.tei-c.org/ns/1.0', 'altIdent' );
	    $oAltIdent = $oAttDef->appendChild( $theAltIdent );
	    $oAltIdent->appendChild( new domText( $szNewName ) );
	  }
	else
	  {
	    throw new falseTagnameException( $szOldName, $szNewName );
	    $errResult = true;
	  }
        if ( (!$oAttList ->hasChildNodes() ))
	  {
	  $oElementSpec->removeChild( $oAttList );
	  }

	return $errResult;
      }

    public function deleteAttribute( $szAttribute, $szClass, $szModule, $szElement )
      {
	$this->getXPath( $oXPath );

	if ( $szModule != '' && $szClass == '' )
	  {
	    $oAttDef = $oXPath->query(
	  "/tei:TEI/tei:text//tei:elementSpec[@module='{$szModule}' and @ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	elseif( $szClass == '' )
	  {
	    $oAttDef = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	else
	  {
	    $oAttDef = $oXPath->query(
	  "/tei:TEI/tei:text//tei:classSpec[@module='{$szModule}' and @ident='{$szClass}']/tei:attList/tei:attDef[@ident='{$szAttribute}']" )->item(0);
	  }
	if (is_Object($attDef)) {
	  $oAttDef->parentNode->removeChild( $oAttDef );
	}
	else {
	  $this->excludeAttributeInElement( $szAttribute, $szClass, $szModule, $szElement );
	}
      }  


    public function includeAddedElement( $szElement )
      {
	$this->getXPath( $oXPath );
	
	$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']" )->item(0);

	$oElementSpec->setAttribute( 'mode', 'change' );
      }

    public function excludeAddedElement( $szElement )
      {
	$this->getXPath( $oXPath );
	
	$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']" )->item(0);

	$oElementSpec->setAttribute( 'mode', 'delete' );
      }

    public function deleteAddedElement( $szElement )
      {
	$errResult = false;

	$this->getXPath( $oXPath );
	$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='{$szElement}']" )->item(0);
	if ( is_object( $oElementSpec ) )
	  {
	    $oElementSpec->parentNode->removeChild( $oElementSpec );
	  }
	else
	  {
	    $errResult = true;
	  }

	return $errResult;
      }


    public function setCustomizationTitle( $szTitle )
      {
	$this->getXPath( $oXPath );
	$oTitle = $oXPath->query( "/tei:TEI/tei:teiHeader/tei:fileDesc/tei:titleStmt/tei:title" )->item(0);
	if ( $oTitle->hasChildNodes() )
	  $oTitle->removeChild( $oTitle->firstChild );
	$oTitle->appendChild( new domText ( $szTitle ) );
      }

    public function setCustomizationNamespace( $szNamespace )
      {
	$this->getXPath( $oXPath );
	$oNamespace = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc/tei:notesStmt/tei:note[@type='ns']")->item(0);
	if ( is_object( $oNamespace ) ) {
   	 if ( $oNamespace->hasChildNodes() )
	   $oNamespace->removeChild( $oNamespace->firstChild );
	   $oNamespace->appendChild( new domText ( $szNamespace ) );
	 }
	else
	{
	  $oFileDesc = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc")->item(0);
	  $oSourceDesc = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc/tei:sourceDesc")->item(0);
	  $oNotes = $oFileDesc->insertBefore( new domElement( 'notesStmt' ) ,$oSourceDesc);
	  $oNote = $oNotes->appendChild( new domElement( 'note' ) );
	  $oNote->setAttribute( 'type', 'ns' );
	  $oNote->appendChild( new domText( $szNamespace) );
	}
      }

    public function setCustomizationDescription( $szDescription )
      {
	$this->getXPath( $oXPath );
	$oP = $oXPath->query( "/tei:TEI/tei:text/tei:body//tei:p[1]" )->item(0);
	if ( is_object( $oP ) ) {
  	 if ( $oP->hasChildNodes() ) {
	  $oP->removeChild( $oP->firstChild );
	  }
	  }
	else
	   {
	   $oBody = $oXPath->query( "/tei:TEI/tei:text/tei:body" )->item(0);
	   $oP = $oBody->appendChild( new domElement( 'p' ) );
	   }
	 $oP->appendChild( new domText ( stripslashes($szDescription) ) );
      }

    public function setCustomizationAuthor( $szAuthor )
      {
	$this->getXPath( $oXPath );
	$oAuthor = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc/tei:titleStmt/tei:author")->item(0);
	if ( is_object( $oAuthor ) ) {
   	 if ( $oAuthor->hasChildNodes() )
	   $oAuthor->removeChild( $oAuthor->firstChild );
	 }
	else
	{
 	 $oTitleS = $oXPath->query("/tei:TEI/tei:teiHeader/tei:fileDesc/tei:titleStmt")->item(0);
  	 $oAuthor = $oTitleS->appendChild( new domElement( 'author' ) );
	}
        $oAuthor->appendChild( new domText ( $szAuthor ) );
      }

    public function setCustomizationFilename( $szFilename )
      {
	$this->getXPath( $oXPath );
	$oTEI = $oXPath->query( "//tei:schemaSpec[1]" )->item(0);
	$oTEI->setAttribute( 'ident', $szFilename );
      }

    public function setCustomizationPrefix( $szPrefix )
      {
	$this->getXPath( $oXPath );
	$oTEI = $oXPath->query( "//tei:schemaSpec[1]" )->item(0);
	$oTEI->setAttribute( 'prefix', $szPrefix );
      }

    public function setCustomizationLanguage( $szLanguage )
      {
	$this->getXPath( $oXPath );
	$oTEI = $oXPath->query( "/tei:TEI" )->item(0);
	$oTEI->setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:lang', $szLanguage );
      }

    public function setOddLanguage( $szOddLanguage )
      {
	$this->getXPath( $oXPath );
	$oTEI = $oXPath->query( "//tei:schemaSpec" )->item(0);
	$oTEI->setAttribute('targetLang', $szOddLanguage );
      }

    public function setDocLanguage( $szDocLanguage )
      {
	$this->getXPath( $oXPath );
	$oTEI = $oXPath->query( "//tei:schemaSpec" )->item(0);
	$oTEI->setAttribute('docLang', $szDocLanguage );
	$_SESSION['docLang'] = $szDocLanguage;
      }


    // #####################################################################
    // --- Little Helpers
    // #####################################################################

    protected function callGarage ( &$garageResult, $target) {
	$OXG = oxgarage_server . '/Conversions/ODD%3Atext%3Axml/ODDC%3Atext%3Axml/';
	$this->getDocLanguage( $szDocLanguage );
	$properties ="?properties=<conversions><conversion%20index='0'><property%20id='pl.psnc.dl.ege.tei.profileNames'>tei</property></conversion><conversion%20index='1'><property%20id='pl.psnc.dl.ege.tei.profileNames'>tei</property><property%20id='oxgarage.textOnly'>true</property><property%20id='oxgarage.lang'>" . $szDocLanguage .  "</property></conversion></conversions>";
	$this->loadProgressBar();
	$this->updateProgressBar( '10' );

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_VERBOSE, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_URL, $OXG . $target . $properties);
	curl_setopt($ch, CURLOPT_POST, true);
	$tmpfname = tempnam(roma_temporaryFilesDir, "oxg");
	$handle = fopen($tmpfname, "w");
	fwrite($handle, $this->SaveXML());
	fclose($handle);
	$this->updateProgressBar( '20' );
	$file = array("upload"=>"@" . $tmpfname);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $file); 
	$garageResult = curl_exec($ch);
	unlink($tmpfname);
	$this->updateProgressBar( '100' );
    }

    public function loadProgressBar()
      {
	echo '<script>';
	echo "showPgb();";
	echo '</script>';
	flush();
      }

    public function updateProgressBar( $nPercentage, $bIncrease = false, $nMax = 0 )
      {
	static $nLast = 0;
	if ( $bIncrease )
	  {
	    if ( $nMax > ( $nPercentage + $nLast ) )
	      {
		$nPercentage += $nLast;
	      }
	    else
	      {
		$nPercentage = $nLast;
	      }
	  }
	
	echo '<script>';
	echo "setPgb('pgbMain', '{$nPercentage}');";
	echo '</script>';
	flush();

	$nLast = $nPercentage;
      }

    // #####################################################################
    // --- Creating some documentation versions
    // #####################################################################

    public function outputPlain( &$szDoc)
      {
	$this->callGarage($szDoc, "");
      }


    public function outputTeiLite( &$szTeiLite )
      {
	$target="TEI%3Atext%3Axml";
	$this->callGarage($szTeiLite, $target);
      }

    public function outputLatex( &$szLatex )
      {
	$target="TEI%3Atext%3Axml/latex%3Aapplication%3Ax-latex";
	$this->callGarage($szLatex, $target);
      }

    public function outputPdfLatex( &$szPdf )
      {
	$target="TEI%3Atext%3Axml/latex%3Aapplication%3Ax-latex";
	$this->updateProgressBar( '10' );
	$this->callGarage($szTmp, $target);
	$this->updateProgressBar( '50' );
	$szID = md5( uniqid(rand(), true ) );
	
	$szFileName =  roma_temporaryFilesDir . '/' . $szID; 
	
	file_put_contents( $szFileName . ".tex" ,$szTmp );

	$szCurrentDir = getcwd();
	chdir( roma_temporaryFilesDir );
	exec( roma_pdflatex . ' -interaction=nonstopmode ' . $szFileName . ".tex" );
	$this->updateProgressBar( '70' );
	exec( roma_pdflatex . ' -interaction=nonstopmode ' . $szFileName . ".tex" );
	$this->updateProgressBar( '90' );

	chdir( $szCurrentDir );

	$this->updateProgressBar( '95' );
	if (file_exists($szFileName . ".pdf")) {
	  $szPdf = join( '', file( $szFileName . ".pdf" ) );	
	   unlink( $szFileName . ".tex" );
	   unlink( $szFileName . ".aux" );
	   if (file_exists($szFileName . ".toc")) {unlink( $szFileName . ".toc" ); }
	   unlink( $szFileName . ".out" );
	   unlink( $szFileName . ".log" );
	   unlink( $szFileName . ".pdf" );
	}
	else
	  {
	    unlink( $szFileName . ".tex" );
    	    print "<p>ERROR: run of XeLaTeX failed.</p>";
	    print "<pre>";
	    print file_get_contents($szFileName . ".log");
	    print "</pre>";
	    unlink( $szFileName . ".log" );
	  }

	$this->updateProgressBar( '100' );
      }

    public function outputPDF( &$szPdf )
      {
	$this->getTeiLiteDom( $oTeiLiteDom );

	$this->updateProgressBar( '60' );

	$oXSL = new domDocument();
	$oXSL->load(  roma_tei . '/xml/tei/stylesheet/fo/tei.xsl' );
	
	$oProc = new XsltProcessor();
	$oProc->importStylesheet( $oXSL );
	$oTmpDom = $oProc->transformToDoc( $oTeiLiteDom );

	$this->updateProgressBar( '70' );
	
	//Save File
	$szID = md5( uniqid(rand(), true ) );
	
	$szInputFile = roma_temporaryFilesDir . '/' . $szID . '.fo';    
	$szOutputFile = roma_temporaryFilesDir . '/' . $szID . '.pdf';    
	
	file_put_contents( $szInputFile , $oTmpDom->SaveXML() );

	$this->updateProgressBar( '80' );

	exec( roma_fop . ' ' . $szInputFile . ' ' . $szOutputFile );

	$this->updateProgressBar( '90' );

	$szPdf = join( '', file( $szOutputFile ) );
	
	unlink( $szInputFile );
	unlink( $szOutputFile );

	$this->updateProgressBar( '100' );
      }

    public function outputHTML ( &$szHTML )
      {
	$target="TEI%3Atext%3Axml/xhtml%3Aapplication%3Axhtml%2Bxml/";
	$this->callGarage($szHTML, $target);
      }

    // #####################################################################
    // --- Creating some Schema formats
    // #####################################################################

    public function createSchemaRNG( &$szRNG )
      {
	$target="relaxng%3Aapplication%3Axml-relaxng/";
	$this->callGarage($szRNG, $target);
      }

    public function createSchemaSCH( &$szSCH )
      {
	$target="sch%3Atext%3Axml/";
	$this->callGarage($szSCH, $target);
      }

    public function createSchemaISOSCH( &$szISOSCH )
      {
	$target="isosch%3Atext%3Axml/";
	$this->callGarage($szISOSCH, $target);
      }

    public function createSchemaRNC( &$szRNC )
      {
	$target="relaxng%3Aapplication%3Axml-relaxng/";
	$this->callGarage($szRNG, $target);
	$szID = md5( uniqid(rand(), true ) );
	$this->updateProgressBar( '50' );
	
	$szInputFile = roma_temporaryFilesDir . '/' . $szID . '.tmp';    
	$szOutputFile = roma_temporaryFilesDir . '/' . $szID . '.rnc';    
	file_put_contents( $szInputFile , $szRNG);

	$this->updateProgressBar( '70' );

	ob_start();
	System( roma_trang . ' -I rng -O rnc ' . $szInputFile . ' ' . $szOutputFile  . ' 2>&1');
	$szError = ob_get_clean();
	ob_end_clean();

	$this->updateProgressBar( '90' );


	if ( file_exists( $szOutputFile ) )
	  {
	    $szRNC = join( '', file( $szOutputFile ) );
	    unlink( $szOutputFile );
	  }
	unlink( $szInputFile );

	$this->updateProgressBar( '100' );

	return $szError;
      }

    public function createSchemaXSD( &$szXSD, $fileName )
      {
	$target="relaxng%3Aapplication%3Axml-relaxng/";
	$this->callGarage($szRNG, $target);
	$this->updateProgressBar( '50' );

	//Save File
	$szID = md5( uniqid(rand(), true ) );
	
	$szInputFile = roma_temporaryFilesDir . '/' . $szID . '.tmp';    
	$szOutputFile = $szID . '.xsd';    
	$szOutputFileZip = roma_temporaryFilesDir . '/' . $szID . '.zip';    

	file_put_contents( $szInputFile ,$szRNG);
	chdir (roma_temporaryFilesDir );

	$this->updateProgressBar( '70' );
	
	ob_start();
	System( 
	' mkdir ' .  $szID . ';' .
	' (cd ' .  $szID . ';' .
	roma_trang . ' -I rng -O xsd -o disable-abstract-elements ' . 
	$szInputFile . ' ' . $fileName  . '.xsd 2>&1;' .
	'zip -q  ' . $szOutputFileZip . ' *  ' . ' 2>&1); rm -rf ' . $szID );
	$szError = ob_get_clean();
	ob_end_clean();

	$this->updateProgressBar( '90' );

	if ( file_exists( $szOutputFileZip ) )
	  { 
	    $szXSD = join( '', file( $szOutputFileZip ) );
	    unlink( $szOutputFileZip );
	  }

	unlink( $szInputFile );

	$this->updateProgressBar( '100' );

	return $szError;
      }

    public function createSchemaDTD( &$szDTD )
      {
	$target="dtd%3Aapplication%3Axml-dtd";
	$this->callGarage($szDTD, $target);
	return $szError;
      }

    public function getOddDom( &$oDOC )
      {
	$this->callGarage($szDoc, "");
	$oDOC = new DOMDocument();
	$oDOC->loadXML($szDoc);
      }

    public function processSanityCheck() {
    	  $this->getOddDom($foo);
 	  $checker = new SanityChecker($this);
	  $checker->pass1();
	  $checker->pass2();
	  $checker->pass3();
	  $checker->showErrors();
	}
  
    public function checkForEmpty ($name,$class) {
	$this->getXPath( $oXPath );
	//check whether element already exists
	$oElementSpec = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$name']" )->item(0);
    
	if (  is_object( $oElementSpec ) )
	  {
	    $oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:elementSpec[@ident='$name']/tei:attList" )->item(0);
	    if (is_object( $oAttList ) and !$oAttList->hasChildNodes())
	      {	  
		$oElementSpec->removeChild( $oAttList);
	      }
	    if ( !$oElementSpec->hasChildNodes() )
	      {
		$oElementSpec ->parentNode->removeChild($oElementSpec);
	      }	    
	  }
	else 
	  {
	    $oClassSpec = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='$class' ]")->item(0);

	    if (  is_object( $oClassSpec ) )
	      {
		$oAttList = $oXPath->query( "/tei:TEI/tei:text//tei:classSpec[@ident='$class']/tei:attList" )->item(0);
		if (is_object( $oAttList ) and !$oAttList->hasChildNodes())
		  {	  
		    $oClassSpec->removeChild( $oAttList);
		  }
		if ( !$oClassSpec->hasChildNodes() )
		  {
		    $oClassSpec ->parentNode->removeChild($oClassSpec);
		  }	    
	      }
	  }
    }
  }


//$myDirectory = opendir(".");
//while($entryName = readdir($myDirectory)) {
//	$dirArray[] = $entryName;
//}
//closedir($myDirectory);
//$indexCount	= count($dirArray);
//Print ("$indexCount files<br>\n");
//sort($dirArray);
//print("<TABLE border=1 cellpadding=5 cellspacing=0 class=whitelinks>\n");
//print("<TR><TH>Filename</TH><th>Filetype</th><th>Filesize</th></TR>\n");
//for($index=0; $index < $indexCount; $index++) {
//        if (substr("$dirArray[$index]", 0, 1) != "."){ // don't list hidden files
//		print("<TR><TD><a href=\"$dirArray[$index]\">$dirArray[$index]</a></td>");
//		print("<td>");
//		print(filetype($dirArray[$index]));
//		print("</td>");
//		print("<td>");
//		print(filesize($dirArray[$index]));
//		print("</td>");
//		print("</TR>\n");
//	}
//}
//print("</TABLE>\n");
//
?>