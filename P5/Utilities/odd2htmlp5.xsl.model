<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:html="http://www.w3.org/1999/xhtml" 
    xmlns:xd="http://www.pnp-software.com/XSLTdoc"
    xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
    xmlns:teix="http://www.tei-c.org/ns/Examples"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns:rng="http://relaxng.org/ns/structure/1.0"
    xmlns:estr="http://exslt.org/strings"
    xmlns:pantor="http://www.pantor.com/ns/local"
    xmlns:exsl="http://exslt.org/common"
    xmlns:tei="http://www.tei-c.org/ns/1.0"
    xmlns:edate="http://exslt.org/dates-and-times"
    extension-element-prefixes="exsl estr edate"
    exclude-result-prefixes="exsl rng edate estr tei html a pantor teix xs xd" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:import href="/usr/share/xml/tei/stylesheet/xhtml/odd2html.xsl"/>

  <xsl:output method="xml"
	      doctype-public="//W3C//DTD XHTML 1.1//EN"
	      doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
	      encoding="utf-8"
	      />  
  <xsl:param name="alignNavigationPanel">left</xsl:param>
  <xsl:param name="authorWord"></xsl:param>
  <xsl:param name="autoToc">false</xsl:param>
  <xsl:param name="bottomNavigationPanel">true</xsl:param>
  <xsl:param name="cssFile">http://www.tei-c.org/stylesheet/tei.css</xsl:param>
  <xsl:param name="dateWord"></xsl:param>
  <xsl:param name="footnoteBackLink">true</xsl:param>
  <xsl:param name="displayMode">rnc</xsl:param>
  <xsl:param name="feedbackURL">http://www.tei-c.org/Consortium/contact.xml</xsl:param>
  <xsl:param name="feedbackWords">Contact</xsl:param>
  <xsl:param name="parentWords">TEI Consortium</xsl:param>
  <xsl:param name="footnoteFile">false</xsl:param>
  <xsl:param name="homeLabel">TEI P5 Guidelines</xsl:param>
  <xsl:param name="homeURL">index.html</xsl:param>
  <xsl:param name="parentURL">http://www.tei-c.org/Consortium/</xsl:param>
  <xsl:param name="homeWords">TEI P5</xsl:param>
  <xsl:param name="indent-width" select="3"/>
  <xsl:param name="institution">Text Encoding Initiative</xsl:param>
  <xsl:param name="line-width" select="80"/>
  <xsl:param name="numberBackHeadings">A.1</xsl:param>
  <xsl:param name="numberFrontHeadings"></xsl:param>
  <xsl:param name="oddmode">html</xsl:param>
  <xsl:param name="outputDir">Guidelines</xsl:param>
  <xsl:param name="pageLayout">CSS</xsl:param>
  <xsl:param name="prenumberedHeadings">false</xsl:param>
  <xsl:param name="searchURL"/>
  <xsl:param name="searchWords"/>
  <xsl:param name="showTitleAuthor">1</xsl:param>
  <xsl:param name="splitBackmatter">yes</xsl:param>
  <xsl:param name="splitFrontmatter">yes</xsl:param>
  <xsl:param name="splitLevel">0</xsl:param>
  <xsl:param name="STDOUT">false</xsl:param>
  <xsl:param name="subTocDepth">-1</xsl:param>
  <xsl:param name="tocDepth">3</xsl:param>
  <xsl:param name="tocElement">div</xsl:param>
  <xsl:param name="topNavigationPanel"></xsl:param>
  <xsl:param name="useHeaderFrontMatter">true</xsl:param>
  <xsl:param name="showNamespaceDecls">false</xsl:param>
  <xsl:param name="verbose">false</xsl:param>
  <xsl:template name="copyrightStatement">Copyright TEI Consortium 2007</xsl:template>

  <xsl:key name="CHILDMOD" match="Element" use="@module"/>

  <xsl:key name="MNAMES"
   match="tei:monogr/tei:author[tei:surname]|tei:monogr/tei:editor[tei:surname]" 
   use="ancestor::tei:biblStruct/@xml:id"/>
  <xsl:key name="ANAMES"
   match="tei:analytic/tei:author[tei:surname]|tei:analytic/tei:editor[tei:surname]" 
   use ="ancestor::tei:biblStruct/@xml:id"/>
  
  <xsl:template name="metaHook">
    <xsl:param name="title"/>
    <meta name="DC.Title" content="{$title}"/>
    <meta name="DC.Language" content="(SCHEME=iso639) en"/> 
    <meta name="DC.Creator" content="TEI,Oxford University Computing Services, 13 Banbury Road, Oxford OX2 6NN, United Kingdom"/>
    <meta name="DC.Creator.Address" content="tei@oucs.ox.ac.uk"/>
  </xsl:template>
  
  <xsl:template match="processing-instruction()"/>
 
  <xsl:template match="tei:docAuthor">
    <div class="center">
      <em>
	<xsl:value-of select="@n"/>
	<xsl:text> </xsl:text>
	<xsl:apply-templates/>
      </em>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:docImprint|tei:docDate">
    <div class="center">
      <xsl:apply-templates/>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:docTitle">
      <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template match="tei:revisionDesc//tei:date">
    <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template match="tei:term">
      <!--
           <span>
             <xsl:attribute name="id">
               <xsl:text>TDX-</xsl:text>
               <xsl:number level="any"/>
             </xsl:attribute>
           </span>
      -->
      <em>
        <xsl:apply-templates/>
      </em>
  </xsl:template>
  
  <xsl:template match="tei:titlePart">
    <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template name="logoPicture">
    <img src="jaco001d.gif" alt="" width="180" />
  </xsl:template>
  


<xsl:template name="hdr2">
<xsl:comment>no nav </xsl:comment>
</xsl:template>

<xsl:template name="javascriptHook">
  <script type="text/javascript">
   <xsl:comment>
    <xsl:text disable-output-escaping="yes">
      function togglerelax (el) {
      if (el.innerHTML == 'RNC') {
         el.innerHTML = 'RNG';
      }
      else
      {
         el.innerHTML = 'RNC';
      }
      var div = el.parentNode; 
      for (j=0;j&lt;div.childNodes.length;j++)
      {
      if (div.childNodes[j].nodeType != 1) continue;
      if (div.childNodes[j].nodeName != 'PRE') continue;
      var thisone=div.childNodes[j];
      var state=thisone.style.display;
      if (state == 'block')
         {  
          thisone.style.display='none'; 
         }
       else
         {  
          thisone.style.display='block';
         }
       }
      }
  </xsl:text>
   </xsl:comment>
</script>
  </xsl:template>

  <xsl:template name="stdfooter">
    <xsl:param name="style" select="'plain'"/>
    <xsl:variable name="date">
      <xsl:call-template name="generateDate"/>
    </xsl:variable>
    <xsl:variable name="author">
      <xsl:call-template name="generateAuthor"/>
    </xsl:variable>
    <div class="stdfooter">
      <hr/>
      <xsl:if test="$linkPanel='true'">
        <div class="footer">
          <xsl:if test="not($parentURL='')"><a class="{$style}"
              href="{$parentURL}">
              <xsl:value-of select="$parentWords"/>
            </a>  </xsl:if>
          <xsl:if test="$searchURL"> | <a class="{$style}" href="{$searchURL}"
              target="_top">
              <xsl:call-template name="searchWords"/>
            </a>
          </xsl:if>
          <xsl:if test="$feedbackURL"> | <a class="{$style}" href="{$feedbackURL}">
              <xsl:call-template name="feedbackWords"/>
            </a>
          </xsl:if>
        </div>
        <hr/>
      </xsl:if>
      <address>
        <xsl:call-template name="copyrightStatement"/>
        <xsl:text> </xsl:text>
        <a href="COPYING.txt">Licensed under the GPL.</a>
        <xsl:text> Copying and redistribution is permitted and encouraged. </xsl:text>
	<br/>
        <xsl:text>Version </xsl:text>
        <xsl:value-of 
select="ancestor-or-self::tei:TEI/tei:teiHeader/tei:fileDesc/tei:editionStmt/tei:edition"/>
        <xsl:text>This page generated on </xsl:text> 
	<xsl:call-template name="whatsTheDate"/>

    </address>
    </div>
  </xsl:template>


  <xsl:template match="tei:gi">
    <xsl:choose>
      <xsl:when test="parent::tei:ref">
	<span class="gi">
	  <xsl:apply-templates/>
	</span>
      </xsl:when>
      <xsl:when test="key('ELEMENTS',.)">
	<xsl:for-each select="key('ELEMENTS',.)">
	  <a href="ref-{@ident}.html">
	    <span class="gi">
	      <xsl:value-of select="@ident"/>
	      <xsl:if test="tei:content/rng:empty">
		<span class="emptySlash">/</span>
	      </xsl:if>	 
	    </span>
	  </a>
	</xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
	<span class="gi">
	  <xsl:apply-templates/>
	</span>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


<xsl:template name="generateChildren">
  <xsl:variable name="name" select="@ident"/>
  <xsl:variable name="Children">
    <Children xmlns="">
      <xsl:for-each select="tei:content">
	<xsl:call-template name="followRef"/>
      </xsl:for-each>
    </Children>
  </xsl:variable>
  <xsl:for-each select="exsl:node-set($Children)/Children">
  <xsl:choose>
    <xsl:when test="count(Element)=0">
      <xsl:text>Empty element</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <div class="specChildren">
	<xsl:for-each select="Element">
	  <xsl:sort select="@module"/>
	  <xsl:sort select="@name"/>
	  <xsl:if
	      test="generate-id(.)=generate-id(key('CHILDMOD',@module)[1])">
	    <div class="specChild">
	      <span class="specChildModule">
		<xsl:value-of select="@module"/>:
	      </span>
	      <span class="specChildElements">
		<xsl:for-each select="key('CHILDMOD',@module)">
		  <xsl:sort select="@name"/>
		  <xsl:variable name="me">
		    <xsl:value-of select="@name"/>
		  </xsl:variable>
		  <xsl:if test="not(preceding-sibling::Element/@name=$me)">
		      <a href="ref-{@name}.html">
			<xsl:value-of select="@name"/>
		      </a>
		      <xsl:text> </xsl:text>
		  </xsl:if>
		</xsl:for-each>
	      </span>
	    </div>
	  </xsl:if>
	</xsl:for-each>
      </div>
    </xsl:otherwise>
  </xsl:choose>
  </xsl:for-each>
</xsl:template>

<xsl:template name="followRef">
  <xsl:for-each select=".//rng:ref">
    <xsl:for-each select="key('IDENTS',@name)">
      <xsl:choose>
	<xsl:when test="self::tei:elementSpec">
	  <Element  xmlns="" name="{@ident}" module="{@module}"/>
	</xsl:when>
	<xsl:when test="self::tei:macroSpec">
	  <xsl:for-each select="tei:content">
	    <xsl:call-template name="followRef"/>
	  </xsl:for-each>
	</xsl:when>
	<xsl:when test="self::tei:classSpec">
	  <xsl:call-template name="followMembers"/>
	</xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:for-each>
</xsl:template>

<xsl:template name="followMembers">
  <xsl:for-each select="key('CLASSMEMBERS',@ident)">
    <xsl:choose>
      <xsl:when test="self::tei:elementSpec">
	<Element xmlns="" name="{@ident}" module="{@module}"/>
      </xsl:when>
      <xsl:when test="self::tei:classSpec">
	<xsl:call-template name="followMembers"/>
      </xsl:when>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>

  <xsl:template match="tei:specGrp"/>

  <xsl:template match="tei:specGrpRef"> </xsl:template>

  <xsl:template match="a:documentation" mode="verbatim"/>


  <!-- JC: Putting element and desc into table -->
  <xsl:template match="tei:elementSpec" mode="weavebody">
    <xsl:variable name="name">
      <xsl:choose>
        <xsl:when test="tei:altIdent">
          <xsl:value-of select="tei:altIdent"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="@ident"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <h2>
      <xsl:text>&lt;</xsl:text>
      <xsl:value-of select="$name"/>
      <xsl:if test="tei:content/rng:empty">
	<span class="emptySlash">/</span>
      </xsl:if>
      <xsl:text>&gt;</xsl:text> 
    </h2>
    <table class="wovenodd" border="1">
      <tr>
        <td class="wovenodd-col2" colspan="2">
          <span class="label">
	    <xsl:text>&lt;</xsl:text>
	    <xsl:value-of select="$name"/>
	    <xsl:if test="tei:content/rng:empty">
	      <span class="emptySlash">/</span>
            </xsl:if>
	    <xsl:text>&gt; </xsl:text>
	  </span>
          <xsl:call-template name="makeDescription"/>
          <xsl:if test="tei:listRef">
            <xsl:for-each select="tei:listRef/tei:ptr">
              <xsl:text> </xsl:text>
              <xsl:apply-templates mode="weave" select="."/>
            </xsl:for-each>
          </xsl:if>
        </td>
      </tr>
      <xsl:if test="@module">
        <xsl:call-template name="moduleInfo"/>
      </xsl:if>
      <tr>
        <td class="wovenodd-col1">
          <span class="label">
            <xsl:call-template name="i18n">
              <xsl:with-param name="word">Attributes</xsl:with-param>
            </xsl:call-template>
          </span>
        </td>
        <td class="wovenodd-col2">
          <xsl:choose>
            <xsl:when test="not(tei:attList)">
              <xsl:call-template name="showAttClasses"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:for-each select="tei:attList">
                <xsl:call-template name="displayAttList">
                  <xsl:with-param name="mode">all</xsl:with-param>
                </xsl:call-template>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </td>
      </tr>
      <xsl:apply-templates mode="weave"/>
      <tr>
        <td class="wovenodd-col1">
          <span class="label">Contained by</span>
        </td>
        <td class="wovenodd-col2">
          <xsl:call-template name="generateParents"/>
        </td>
      </tr>

      <tr>
        <td class="wovenodd-col1">
          <span class="label">May contain</span>
        </td>
        <td class="wovenodd-col2">
          <xsl:call-template name="generateChildren"/>
        </td>
      </tr>


    </table>

  </xsl:template>


  <xsl:template match="tei:hi[@rend='math']">
    <span class="math">
      <xsl:apply-templates/>
    </span>
  </xsl:template>


<xsl:template match="tei:ptr[@type='cit']">
 <a class="citlink">
  <xsl:for-each select="key('IDS',substring-after(@target,'#'))">
    <xsl:attribute name="href">
      <xsl:apply-templates select="."  mode="generateLink"/>
    </xsl:attribute>
    <xsl:apply-templates select="." mode="xref"/>
  </xsl:for-each>
 </a>
</xsl:template>


<xsl:template match="tei:biblStruct" mode="xref">
    <xsl:choose>
      <xsl:when test="not(tei:monogr or tei:analytic)">
	<xsl:message terminate="yes">no monogr or analytic for <xsl:value-of select="@xml:id"/>
	</xsl:message>
      </xsl:when>
      <xsl:when test="count(key('ANAMES',@xml:id))=1">
	<xsl:value-of select="key('ANAMES',@xml:id)/tei:surname"/>
      </xsl:when>
      <xsl:when test="count(key('ANAMES',@xml:id))=2">
	<xsl:value-of
	    select="key('ANAMES',@xml:id)[1]/tei:surname"/>
	<xsl:text> and </xsl:text>
	<xsl:value-of select="key('ANAMES',@xml:id)[2]/tei:surname"/>
      </xsl:when>
      <xsl:when test="count(key('ANAMES',@xml:id))&gt;2">
	<xsl:value-of
	    select="key('ANAMES',@xml:id)[1]/tei:surname"/>
	<xsl:text> et al.</xsl:text>
      </xsl:when>
      <xsl:when test="count(key('MNAMES',@xml:id))=1">
	<xsl:value-of select="key('MNAMES',@xml:id)/tei:surname"/>
      </xsl:when>
      <xsl:when test="count(key('MNAMES',@xml:id))=2">
	<xsl:value-of
	 select="key('MNAMES',@xml:id)[1]/tei:surname"/>
	<xsl:text> and </xsl:text>
	<xsl:value-of select="key('MNAMES',@xml:id)[2]/tei:surname"/>
      </xsl:when>
      <xsl:when test="count(key('MNAMES',@xml:id))&gt;2">
	<xsl:value-of
	    select="key('MNAMES',@xml:id)[1]/tei:surname"/>
	<xsl:text> et al.</xsl:text>
      </xsl:when>
      <xsl:when test=".//tei:author">
	<xsl:value-of select=".//tei:author[1]"/>
      </xsl:when>
      <xsl:otherwise>
	<emph>
	  <xsl:value-of select=".//tei:title[1]"/>
	</emph>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:choose>
      <xsl:when test="count(tei:*[1]/tei:editor)=1">
	<xsl:text> (ed.)</xsl:text>
      </xsl:when>
      <xsl:when test="count(tei:*[1]/tei:editor)&gt;1">
	<xsl:text> (eds.)</xsl:text>
      </xsl:when>
    </xsl:choose>
    <xsl:if test="tei:monogr/tei:imprint/tei:date">
      <xsl:text> (</xsl:text>
      <xsl:value-of select="tei:monogr/tei:imprint/tei:date"/>
      <xsl:text>)</xsl:text>
    </xsl:if>
</xsl:template>


<!-- derived from from Roberto del Turco -->
<!-- ############# single entry structure ############# -->

  <xsl:template match="tei:listBibl">
    <xsl:choose>
      <xsl:when test="tei:biblStruct">
	<dl>
	  <xsl:apply-templates select="tei:biblStruct">
	    <xsl:sort select="tei:*[1]/tei:author/tei:surname"/>
	    <xsl:sort select="tei:*[1]/tei:editor/tei:surname"/>
	    <xsl:sort select="tei:*[1]/tei:title"/>
	    <xsl:sort select="tei:monogr/tei:imprint/tei:date"/>
	  </xsl:apply-templates>
	</dl>
      </xsl:when>
      <xsl:otherwise>
	<ol>
	  <xsl:for-each select="tei:bibl|tei:biblItem|tei:biblStruct">
	    <li>
	      <xsl:apply-templates select="."/>
	    </li>
	  </xsl:for-each>
	</ol>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

<xsl:template match="tei:biblStruct">
  <dt>
    <xsl:call-template name="makeAnchor"/>
    <xsl:apply-templates select="." mode="xref"/>
  </dt>
  <dd>
    <xsl:call-template name="main"/>
 </dd>
</xsl:template>


<!-- ############# named templates ############# -->

<xsl:template name="main">
 <xsl:choose>

  <xsl:when test="tei:analytic">

   <xsl:if test="tei:monogr/tei:title[@level='j']">
    <xsl:apply-templates select=".//tei:author"/>
    <xsl:apply-templates select=".//tei:imprint/tei:date"/>
    <xsl:apply-templates select=".//tei:title[@level='a']"/>
    <xsl:apply-templates select=".//tei:editor"/>
    <xsl:apply-templates select=".//tei:title[@level='j']"/>
    <xsl:apply-templates select=".//tei:imprint"/>
   </xsl:if>

   <xsl:if test="tei:monogr/tei:title[@level='m']">
    <xsl:apply-templates select=".//tei:author"/>
    <xsl:apply-templates select=".//tei:imprint/tei:date"/>
    <xsl:apply-templates select=".//tei:title[@level='a']"/>
    In <xsl:apply-templates select=".//tei:editor"/>
    <xsl:apply-templates select=".//tei:title[@level='m']"/>
    <xsl:apply-templates select=".//tei:imprint"/>
    <xsl:apply-templates select=".//tei:series"/>
   </xsl:if>

  </xsl:when>

  <xsl:otherwise>
    <xsl:apply-templates select=".//tei:author"/>
    <xsl:apply-templates select=".//tei:editor"/>
    <xsl:apply-templates select=".//tei:imprint/tei:date"/>
    <xsl:apply-templates select=".//tei:title"/>
    <xsl:apply-templates select=".//tei:note[@place='inline']" mode="inline"/>
    <xsl:apply-templates select=".//tei:imprint"/>
    <xsl:apply-templates select=".//tei:series"/>
  </xsl:otherwise>

 </xsl:choose>
 <xsl:apply-templates select="tei:idno"/>
 <xsl:apply-templates select="tei:note"/>
</xsl:template>

<xsl:template name="pers-first">
   <xsl:value-of select=".//tei:surname"/>
   <xsl:text>, </xsl:text>
   <xsl:value-of select=".//tei:forename"/>
   <xsl:if test="position()=last()"><xsl:text> </xsl:text></xsl:if>
   <xsl:if test="position()!=last()">,<xsl:text> </xsl:text></xsl:if>
</xsl:template>

<xsl:template name="pers-middle">
   <xsl:value-of select=".//tei:surname"/>
   <xsl:text>, </xsl:text>
   <xsl:value-of select=".//tei:forename"/>
   <xsl:if test="position()!=last()">,<xsl:text> </xsl:text></xsl:if>
</xsl:template>

<xsl:template name="pers-last">
   <xsl:text> and </xsl:text>
   <xsl:value-of select=".//tei:forename"/>
   <xsl:text> </xsl:text><xsl:value-of select=".//tei:surname"/>
   <xsl:choose>
    <xsl:when test="local-name()='editor'">
     <xsl:call-template name="editor"/>
    </xsl:when>
    <xsl:otherwise>.<xsl:text> </xsl:text></xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="editor">
 <xsl:variable name="edstring">
 <xsl:text>ed</xsl:text>
 <xsl:if test="preceding-sibling::tei:editor">s</xsl:if>
 <xsl:text>.</xsl:text>
 </xsl:variable>	
 <xsl:text> (</xsl:text>
 <xsl:value-of select="$edstring"/>
 <xsl:text>) </xsl:text>
</xsl:template>


<!-- ############# entry items templates ############# -->

<xsl:template match="tei:author|tei:editor">
 <xsl:choose>
   <!-- last name in a list -->
   <xsl:when test="position()=last()">
     <xsl:choose>
       <xsl:when test="local-name()='editor'">
	 <xsl:apply-templates/>
	 <xsl:text> </xsl:text>
	 <xsl:call-template name="editor"/>
       </xsl:when>
       <xsl:otherwise>
	 <xsl:apply-templates/>
	 <xsl:text>. </xsl:text>
       </xsl:otherwise>
     </xsl:choose>
   </xsl:when>
   <!-- first or middle name in a list -->
   <xsl:otherwise>
     <xsl:apply-templates/>
     <xsl:text>, </xsl:text>
   </xsl:otherwise>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:title">
 <xsl:choose>
  <xsl:when test="@level='m'">
   <em class="titlem"><xsl:apply-templates/></em>.
  </xsl:when>
  <xsl:when test="@level='s'">
   <em class="titles"><xsl:apply-templates/></em>,
  </xsl:when>
  <xsl:when test="@level='j'">
   <em class="titlej"><xsl:apply-templates/></em><xsl:text> </xsl:text>
  </xsl:when>
  <xsl:when test="@level='a'">
   <xsl:choose>
    <xsl:when test="parent::bibl">
     <span class="titlea"><xsl:apply-templates/></span>.
    </xsl:when>
    <xsl:otherwise>
     <q class="titlea"><xsl:apply-templates/></q>.
    </xsl:otherwise>
   </xsl:choose>
  </xsl:when>
    <xsl:when test="@level='u'">
      <xsl:choose>
        <xsl:when test="parent::bibl">
          <span class="titleu"><xsl:apply-templates/></span>.
        </xsl:when>
        <xsl:otherwise>
          <q class="titleu"><xsl:apply-templates/></q>.
        </xsl:otherwise>
      </xsl:choose>
    </xsl:when>
  <xsl:otherwise>
      <span class="titleu"><xsl:apply-templates/></span>
  </xsl:otherwise>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:imprint">
 <xsl:choose>
  <xsl:when test="../tei:title[@level='m']">
   <xsl:apply-templates select="tei:pubPlace"/>
   <xsl:apply-templates select="tei:publisher"/>
   <xsl:apply-templates select="tei:biblScope[@type='pages']"/>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates select="tei:biblScope[@type='vol']"/>
   <xsl:apply-templates select="tei:biblScope[@type='pages']"/>
  </xsl:otherwise>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:date">
 <xsl:apply-templates/>.
</xsl:template>

<xsl:template match="tei:pubPlace">
 <xsl:apply-templates/>
 <xsl:choose>
   <xsl:when test="../tei:publisher">
     <xsl:text>: </xsl:text>
   </xsl:when>
   <xsl:otherwise>
     <xsl:text>. </xsl:text>
   </xsl:otherwise>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:publisher">
 <xsl:choose>
  <xsl:when test="../tei:biblScope[@type='pages']">
   <xsl:apply-templates/>
   <xsl:text>, </xsl:text>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates/>
   <xsl:text>. </xsl:text>
  </xsl:otherwise>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:biblScope">
 <xsl:choose>
  <xsl:when test="@type='vol'">
   <xsl:apply-templates/>:
  </xsl:when>
  <xsl:when test="@type='pages'">
   <xsl:apply-templates/>. 
  </xsl:when>
 </xsl:choose>
</xsl:template>

<xsl:template match="tei:idno[@type='url']">
  <xsl:text>&lt;</xsl:text>
  <a href="{normalize-space(.)}">
    <xsl:apply-templates/>
  </a>
  <xsl:text>&gt;.</xsl:text>
</xsl:template>

<xsl:template  match="tei:forename"/>

<xsl:template  match="tei:forename" mode="use">
  <xsl:if test="preceding-sibling::tei:forename">
    <xsl:text> </xsl:text>
  </xsl:if>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template  match="tei:surname">
  <xsl:if test="../tei:forename">
    <xsl:apply-templates select="../tei:forename" mode="use"/>
    <xsl:text> </xsl:text>
  </xsl:if>
  <xsl:apply-templates/>
</xsl:template>
</xsl:stylesheet>

