<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:html="http://www.w3.org/1999/xhtml" 
    xmlns:xd="http://www.pnp-software.com/XSLTdoc"
    xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
    xmlns:teix="http://www.tei-c.org/ns/Examples"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns:rng="http://relaxng.org/ns/structure/1.0"
    xmlns:estr="http://exslt.org/strings"
    xmlns:pantor="http://www.pantor.com/ns/local"
    xmlns:exsl="http://exslt.org/common"
    xmlns:tei="http://www.tei-c.org/ns/1.0"
    xmlns:edate="http://exslt.org/dates-and-times"
    extension-element-prefixes="exsl estr edate"
    exclude-result-prefixes="exsl rng edate estr tei html a pantor teix xs xd" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:import href="/usr/share/xml/tei/stylesheet/xhtml/odd2html.xsl"/>

  <xsl:output method="xml"
	      doctype-public="//W3C//DTD XHTML 1.1//EN"
	      doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
	      encoding="utf-8"
	      />  
  <xsl:param name="alignNavigationPanel">left</xsl:param>
  <xsl:param name="authorWord"></xsl:param>
  <xsl:param name="autoToc">false</xsl:param>
  <xsl:param name="bottomNavigationPanel">true</xsl:param>
  <xsl:param name="cssFile">http://www.tei-c.org/stylesheet/tei.css</xsl:param>
  <xsl:param name="dateWord"></xsl:param>
  <xsl:param name="footnoteBackLink">true</xsl:param>
  <xsl:param name="displayMode">rnc</xsl:param>
  <xsl:param name="feedbackURL">http://www.tei-c.org/Consortium/contact.xml</xsl:param>
  <xsl:param name="feedbackWords">Contact</xsl:param>
  <xsl:param name="parentWords">TEI Consortium</xsl:param>
  <xsl:param name="footnoteFile">false</xsl:param>
  <xsl:param name="homeLabel">TEI P5 Guidelines</xsl:param>
  <xsl:param name="homeURL">index.html</xsl:param>
  <xsl:param name="parentURL">http://www.tei-c.org/Consortium/</xsl:param>
  <xsl:param name="homeWords">TEI P5</xsl:param>
  <xsl:param name="indent-width" select="3"/>
  <xsl:param name="institution">Text Encoding Initiative</xsl:param>
  <xsl:param name="line-width" select="80"/>
  <xsl:param name="numberBackHeadings">A.1</xsl:param>
  <xsl:param name="numberFrontHeadings"></xsl:param>
  <xsl:param name="oddmode">html</xsl:param>
  <xsl:param name="outputDir">Guidelines</xsl:param>
  <xsl:param name="pageLayout">CSS</xsl:param>
  <xsl:param name="prenumberedHeadings">false</xsl:param>
  <xsl:param name="searchURL"/>
  <xsl:param name="searchWords"/>
  <xsl:param name="showTitleAuthor">1</xsl:param>
  <xsl:param name="splitBackmatter">yes</xsl:param>
  <xsl:param name="splitFrontmatter">yes</xsl:param>
  <xsl:param name="splitLevel">0</xsl:param>
  <xsl:param name="STDOUT">false</xsl:param>
  <xsl:param name="subTocDepth">-1</xsl:param>
  <xsl:param name="tocDepth">3</xsl:param>
  <xsl:param name="tocElement">div</xsl:param>
  <xsl:param name="topNavigationPanel"></xsl:param>
  <xsl:param name="useHeaderFrontMatter">true</xsl:param>
  <xsl:param name="showNamespaceDecls">false</xsl:param>
  <xsl:param name="verbose">false</xsl:param>
  <xsl:template name="copyrightStatement">Copyright TEI Consortium 2007</xsl:template>
  
  <xsl:template name="metaHook">
    <xsl:param name="title"/>
    <meta name="DC.Title" content="{$title}"/>
    <meta name="DC.Language" content="(SCHEME=iso639) en"/> 
    <meta name="DC.Creator" content="TEI,Oxford University Computing Services, 13 Banbury Road, Oxford OX2 6NN, United Kingdom"/>
    <meta name="DC.Creator.Address" content="tei@oucs.ox.ac.uk"/>
  </xsl:template>
  
  
  <xsl:template match="processing-instruction()">
    <!--
	<xsl:if test="name(.) = 'tei'">
	<xsl:choose>
	<xsl:when test="starts-with(.,'winita')">
	<p>
	<span style="color: red">NOTE: the following example 
	may not have been converted to XML yet!</span>
	</p>
	</xsl:when>
	</xsl:choose>
	</xsl:if>
    -->
  </xsl:template>
  

 
  <xsl:template match="tei:docAuthor">
    <div class="center">
      <em>
	<xsl:value-of select="@n"/>
	<xsl:text> </xsl:text>
	<xsl:apply-templates/>
      </em>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:docImprint|tei:docDate">
    <div class="center">
      <xsl:apply-templates/>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:docTitle">
    <div class="centerbold">
      <xsl:apply-templates/>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:revisionDesc//tei:date">
    <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template match="tei:term">
      <!--
           <span>
             <xsl:attribute name="id">
               <xsl:text>TDX-</xsl:text>
               <xsl:number level="any"/>
             </xsl:attribute>
           </span>
      -->
      <em>
        <xsl:apply-templates/>
      </em>
  </xsl:template>
  
  <xsl:template match="tei:titlePart">
    <div class="centerbold"><xsl:apply-templates/></div>
  </xsl:template>
  
  <xsl:template name="logoPicture">
    <img src="jaco001d.gif" alt="" width="180" />
  </xsl:template>
  

<!--
  <xsl:template name="calculateNumber">
    <xsl:param name="numbersuffix"/>
    <xsl:choose>
      <xsl:when test="self::tei:TEI">
	<xsl:value-of select="tei:teiHeader//tei:title"/>
      </xsl:when>
      <xsl:when test="self::tei:div">
	<xsl:choose>
	  <xsl:when test="ancestor::tei:front">
	    <xsl:if test="not($numberFrontHeadings='')">
	      <xsl:number format="{$numberFrontHeadings}" 
			  level="multiple" 
			  from="tei:front" 
			  count="tei:div"/>
	      <xsl:value-of select="$numbersuffix"/>
	    </xsl:if>
	  </xsl:when>
	  <xsl:when test="ancestor::tei:back">
	    <xsl:if test="not($numberBackHeadings='')">
	      <xsl:call-template name="i18n">
		<xsl:with-param name="word">appendixWords</xsl:with-param>
	      </xsl:call-template>
	      <xsl:text> </xsl:text>
	      <xsl:number format="{$numberBackHeadings}" 
			  level="multiple" 
			  from="tei:back" 
			  count="tei:div"/>
	      <xsl:value-of select="$numbersuffix"/>
	    </xsl:if>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:number format="{$numberBodyHeadings}" 
			level="multiple" 
			from="tei:body" 
			count="tei:div"/>
	    <xsl:value-of select="$numbersuffix"/>
	  </xsl:otherwise>
	</xsl:choose>
	
      </xsl:when>

    </xsl:choose>
  </xsl:template>
  
  
  <xsl:template name="linkListContents">
    <xsl:param name="style"/>
    <xsl:variable name="thisname">
      <xsl:value-of select="local-name()"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$thisname='TEI'">
        <xsl:for-each select="tei:text/tei:front/tei:div/tei:div">
	    <xsl:variable name="pointer">
	      <xsl:apply-templates mode="generateLink" select="."/>
	    </xsl:variable>
	    <p class="{$style}">
	      <a class="{$style}" href="{$pointer}">
	      <xsl:call-template name="header"/></a>
	    </p>
	  </xsl:for-each>
	  <hr/>
        <xsl:for-each select="tei:text/tei:body/tei:div/tei:div">
          <xsl:variable name="pointer">
            <xsl:apply-templates mode="generateLink" select="."/>
          </xsl:variable>
          <p class="{$style}">
            <a class="{$style}" href="{$pointer}">
              <xsl:call-template name="header"/></a>
            </p>
          </xsl:for-each>
	<xsl:for-each select="tei:text/tei:back">
	  <hr/>
	  <xsl:for-each select="tei:div/tei:div">
	    <xsl:variable name="pointer">
	      <xsl:apply-templates mode="generateLink" select="."/>
	    </xsl:variable>
	    <p class="{$style}">
	      <a class="{$style}" href="{$pointer}">
	      <xsl:call-template name="header"/></a>
	    </p>
	  </xsl:for-each>
	</xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
	<xsl:variable name="BaseFile">
	  <xsl:value-of select="$masterFile"/>
	</xsl:variable>
	<p class="{$style}">
	  <a class="{$style}" href="{$BaseFile}.html">
	  <xsl:value-of select="$homeLabel"/></a>
	</p>
	<hr/>
	<xsl:for-each select="ancestor::tei:div">
	  <p class="{$style}">
	    <a class="{$style}">
	      <xsl:attribute name="href">
		<xsl:apply-templates mode="generateLink" select="."/>
	      </xsl:attribute>
	      <xsl:call-template name="header"/>
	    </a>
	  </p>
	  <hr/>
	</xsl:for-each>
	
	
	<p class="{$style}">
	  <a class="{$style}">
	    <xsl:attribute name="href">
	      <xsl:apply-templates mode="generateLink" select="."/>
	    </xsl:attribute>
	    <xsl:call-template name="header"/>
	</a></p>
	
	<xsl:for-each select="tei:div">
	  <p class="{$style}-sub"><a class="{$style}-sub">
	    <xsl:attribute name="href">
	      <xsl:apply-templates mode="generateLink" select="."/>
	    </xsl:attribute>
	    <xsl:call-template name="header"/>
	  </a></p>
	</xsl:for-each>
	
	
	<hr/>
	<xsl:for-each select="preceding-sibling::tei:div">
	  <p class="{$style}">
	    <a class="{$style}">
	      <xsl:attribute name="href">
		<xsl:apply-templates mode="generateLink" select="."/>
	      </xsl:attribute>
	      <xsl:call-template name="header"/>
	  </a></p>
	</xsl:for-each>
	
	<p class="{$style}-this">
	  <a class="{$style}-this">
	    <xsl:attribute name="href">
	      <xsl:apply-templates mode="generateLink" select="."/>
	    </xsl:attribute>
	    <xsl:call-template name="header"/>
	  </a>
	</p>
	
	<xsl:for-each select="following-sibling::tei:div">
	  <p class="{$style}">
	    <a class="{$style}">
	      <xsl:attribute name="href">
		<xsl:apply-templates mode="generateLink" select="."/>
	      </xsl:attribute>
	      <xsl:call-template name="header"/>
	    </a>
	  </p>
	</xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$splitLevel=-1">
      <xsl:call-template name="listSpecs"/>
    </xsl:if>
  </xsl:template>
  
  <xsl:template name="maintoc"> 
    <xsl:param name="force"/>
    <xsl:for-each select="ancestor-or-self::tei:TEI/tei:text/tei:front">
      <ul class="toc{$force}">
        <xsl:apply-templates
          select="tei:div/tei:div" mode="maketoc">
          <xsl:with-param name="forcedepth" select="$force"/>
	</xsl:apply-templates>
      </ul>
    </xsl:for-each>
    
    <xsl:for-each select="ancestor-or-self::tei:TEI/tei:text/tei:body">
      <ul class="toc{$force}">
        <xsl:apply-templates 
          select="tei:div/tei:div" mode="maketoc">
          <xsl:with-param name="forcedepth" select="$force"/>
        </xsl:apply-templates>
      </ul>
    </xsl:for-each>
    
    <xsl:for-each select="ancestor-or-self::tei:TEI/tei:text/tei:back">
      <ul class="toc{$force}">
        <xsl:apply-templates 
          select="tei:div/tei:div" mode="maketoc">
          <xsl:with-param name="forcedepth" select="$force"/>
        </xsl:apply-templates>
      </ul>
    </xsl:for-each>
  </xsl:template>
  
  <xsl:template name="xrefpanel">
    <xsl:param name="homepage"/>
    <xsl:param name="mode"/>
    
    <p class="{$alignNavigationPanel}">
      
      <xsl:variable name="Parent">
	<xsl:call-template name="locateParent"/>
	<xsl:text>.html</xsl:text>
      </xsl:variable>
      <xsl:choose>
	<xsl:when test="$Parent = '.html'">
	  <xsl:call-template name="upLink">
	    <xsl:with-param name="up" select="$homepage"/>
	    <xsl:with-param name="title">
	      <xsl:call-template name="contentsWord"/>
	    </xsl:with-param>
	  </xsl:call-template>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:call-template name="generateUpLink"/>
	</xsl:otherwise>
      </xsl:choose>

      <xsl:call-template name="previousLink">
        <xsl:with-param name="previous" select="preceding-sibling::tei:div[1]"/>
      </xsl:call-template>

      <xsl:call-template name="nextLink">
        <xsl:with-param name="next" select="following-sibling::tei:div[1]"/>
      </xsl:call-template>

    </p>
  </xsl:template>
-->

<xsl:template name="hdr2">
<xsl:comment>no nav </xsl:comment>
</xsl:template>

<xsl:template name="javascriptHook">
  <script type="text/javascript">
    <xsl:text disable-output-escaping="yes">
      function togglerelax (el) {
      var pre = el.parentNode; 
      var div = pre.parentNode; 
      for (j=0;j&lt;div.childNodes.length;j++)
      {
      if (div.childNodes[j].nodeType != 1) continue;
      if (div.childNodes[j].nodeName != 'PRE') continue;
      var thisone=div.childNodes[j];
      var state=thisone.style.display;
      if (state == 'block')
        {  thisone.style.display='none'; }
       else
        {  thisone.style.display='block';}
       }
      }
	
  </xsl:text>
</script>
  </xsl:template>

</xsl:stylesheet>
