<?xml version="1.0"?>
<TEI   xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader> 
    <fileDesc> 
      <titleStmt>
	<title>Maintaining the TEI</title>
	<author>Sebastian Rahtz</author>
      </titleStmt>
      <editionStmt>
	<edition>
	  <date>March 2005</date>
	</edition>
      </editionStmt>
      <publicationStmt> 
	<p> For the TEI Website</p> 
      </publicationStmt> 
      <sourceDesc> 
	<p>Derived from lots of other talks</p> 
      </sourceDesc> 
    </fileDesc>
  </teiHeader>
  <text>
    <body>
<p>The purpose of this guide is to explain the steps that need to be
taken when changes are made to the TEI P5 sources.</p>
<div xml:id="cvs">
<head>Building the release</head>
<p>You will always start from the CVS packages. These are

<list type="gloss">
<label>Extensions</label><item>Example ODD files. Not published</item>
<label>I18N</label><item>Input to I18N utilities. Not published</item>
<label>P5</label><item>The main TEI P5 source</item>
<label>Roma</label><item>The web application</item>
<label>Stylesheets</label><item>Base stylesheets</item>
<label>TEIOO</label><item>Support for TEI and Open Office. Not to be published</item>
<label>tei-emacs</label><item></item>
<label>teiword</label><item>Support for TEI and Microsoft Word. Not to
published</item>
</list>
The rest of this documents assumes that we are dealing with the main
<ident>P5</ident> package.
</p>
<p>First edit the file <ident>VERSION</ident>, and make it says what
you are about to release. Now check that the source is clean and tested, and make
the local targets of <ident>dtds</ident>, <ident>schemas</ident> and
<ident>html</ident>. When you are happy that these are what you want,
do <code>make dist</code>. This will build a set of runtime
directories in <code>./release</code>, for 
<ident>tei-p5-source</ident>,
<ident>tei-p5-doc</ident>,
<ident>tei-p5-schema</ident>, and
<ident>tei-p5-test</ident>. There is a zip file and a directory tree
for each. </p>
</div>

<div xml:id="sf">
<head>Uploading file releases to Sourceforge</head>
<p>The zip files we build in <code>P5/release</code> 
are what we put up on Sourceforge. This is slightly cumbersome, and
involves two stages
<list type="ordered">
<item>Using ftp, upload the zip files to
<code>upload.sourceforge.net</code>, with username
<code>anonymous</code>
and your email address as password. Put the files in
<code>/incoming</code>.
The job might be done with this script:
<eg><![CDATA[ftp -v -n upload.sourceforge.net<<EOF
user anonymous sebastian.rahtz@oucs.ox.ac.uk
cd /incoming
binary
prompt
mput *.zip
quit
EOF]]></eg>
</item>
<item>Now log into the Sourceforge TEI project in the normal way, go to
<hi>Admin</hi>, and choose <hi>File Releases</hi>. Do <hi>Add
Release</hi> for <ident>P5</ident>, and then fill in the forms. You'll
have to locate the right uploaded files (4 of them), say the format
(zip), give change details, say its for <q>all architectures</q>
etc. You can get confused here, so tread cautiously. </item>
</list>
All being well, the new file releases show up.
</p>
<p>You're not done yet! Now you have to put a release of the
<ident>tei</ident> bundle. This a .tar.gz collection of all
the TEI runtime stuff in one go. Create this by installing the 
<ref target="=debian">Debian packages</ref> and then creating the
tar.gz starting at <code>/usr/share/xml</code>.</p>
</div>

<div xml:id="debian">
<head>Making Debian packages</head>
<p>This is the hardest part. You make a Debian package
by combining a set of source files with Debian-specific metadata and
support files. I maintain all this in a set of directories on
spqr.oucs.ox.ac.uk in <code>/home/Knoppix/Packgaes</code>. For each
package, there is a directory named
<emph>packagename</emph>.<code>version</code>,
inside which is a directory called <code>debian</code> containing the
added material. The procedure for making a new release of a package is
as follows (highly-specific to spqr.oucs.ox.ac.uk!):
<list type="ordered">
<item>rename the directory to change the version name (ie from
<code>foo.1.1</code> to <code>foo.1.2</code>); yes, this is
needed. </item>
<item>using Emacs, edit
<emph>packagename</emph><code>/debian/changelog</code> (yes, really
this name, its not identical to a ChangeLog), and do <code>Changelog /
New version</code>. Fill in some words and do Ctrl-C Ctrl-C to
finalize and save. Monkey at your peril.</item>
<item>Copy the new files to the package directory. For the main TEI
packages, I have created a shell script called <code>Build</code> in
the Debian package directory which copies files from the locations
created by <code>make dist</code>. Otherwise, look at what is where
and work out where the new upstream source goes. Ditto about
monkeying.</item>
<item>All being well, you can now type <code>fakeroot
dpkg-buildpackage</code> which reads the metadata and control files
and builds a <code>.deb</code> file in the directory above. The
scripts called <code>Build</code> do this themselves.</item>
<item>Now you can move the .deb files to the repository and rebuild
the package database. On spqr.oucs.ox.ac.uk that means putting the
.deb files in <code>/home/teideb/binary</code>, going to
<code>/home/teideb</code>
and typing <code>dpkg-scanpackages binary /dev/null | gzip -9c >
binary/Packages.gz</code>. The directory is made available using
Apache so that 
<code>deb http://tei.oucs.ox.ac.uk/teideb binary/</code> in an
<code>/etc/apt/sources.list</code> finds the stuff OK.</item>
</list>
 </p>
<p>There are plenty of potential slips 'twixt cup and lip here.
Building Debian packages is extensively documented on the web, but
there is a lot more to it than I describe here (such as the content of
the control files for post-installation, pre-removal, init scripts,
menus etc).
</p>

<p>The important TEI-related Debian packages are
<list type="gloss">
<label>nxml-mode-tei  </label><item>Emacs mode for editing XML documents</item>
<label>tei-doc        </label><item>P4 Guidelines</item>
<label>tei-emacs      </label><item>Emacs setup</item>
<label>tei-lite       </label><item>TEI Lite</item>
<label>tei-oxygen     </label><item>oXygen XML editor setup</item>
<label>tei-p5-doc     </label><item>P5 Guidelines</item>
<label>tei-p5-schema  </label><item>P5 Schemas/DTDs</item>
<label>tei-p5-source  </label><item>P5 Sources</item>
<label>tei-roma       </label><item>Roma TEI Schema Builder</item>
<label>tei-schema     </label><item>P4 Schemas/DTDs</item>
<label>tei-teaching   </label><item>Teaching support, exercises, data etc</item>
<label>tei-xsl        </label><item>XSLT stylesheets</item>
<label>tei-xsl-teic   </label><item>XSLT stylesheets for TEIC</item>
</list>
Some of these will require other packages, which will get pulled in as
needed (eg Tomcat, eXist, Cocoon, trang, jing etc).</p>
</div>

<div xml:id="web">
<head>Installing data on the TEI web site</head>
<p>People wanting to download bundles should always be sent to SF,
so the point of having dtds, schemas and stylesheets on the web site(s) is 
<list>
<item>to service the rendering web pages themselves</item>
<item>to let Roma find resources</item>
<item>to provide a service of fixed URLs for DTDs and schemas</item>
</list>
Currently, this means the population of the <code>schema</code> and
<code>stylesheet</code> directories:
<eg>schema
`-- relaxng
    `-- p5
stylesheet/
|-- base
|   |-- p4
|   |   |-- common
|   |   |-- fo
|   |   |-- html
|   |   |-- latex
|   |   |-- odds
|   |   `-- slides
|   `-- p5
|       |-- common
|       |-- fo
|       |-- html
|       |-- latex
|       |-- odds
|       `-- slides
`-- teic
</eg>
The <ident>schema</ident> directory holds copies of the generated
Relax NG schemas (XML and compact format) from P5; the stylesheet
directory holds
<list>
<item>the XSL stylesheet wrappers for the Consortium web pages (in
<code>teic</code>);
this is the master copy of these files</item>
<item>the <emph>generated</emph> XSLT stylesheets for general TEI
documents (<code>stylesheet</code>). This directory has 2 copies, for
P4 and for P5, but both are generated from the master copy in
CVS. Within the two copies, there are separate subdirectories for
HTML, FO, LaTeX and ODD-processing. These stylesheets are used
extensively by the web site and by Roma, and are changed at your peril</item>
</list>
</p>
<p>The files in <ident>schema</ident> and <ident>stylesheet/p?</ident>
should simply be copied from a current working system.</p>
</div>

<div xml:id="roma">
<head>Setting up Roma and eXist</head>
<p>You thought it was easy so far?  Now we have to set up Roma and
eXist in tandem with the new data. </p>
<p>Roma needs access to XSLT stylesheets, P5 Relax NG schemas, and an
eXist database of TEI P5. Where it finds these is determined by the
file <code>roma/config.php</code> (on the web site, this is in the
<code>Roma</code> directory). However, this varies between sites, so
what is distributed is <code>config-dist.php</code>. For the
www.tei-c.org.uk site there is a shell script called
<code>setupox.sh</code> which patches the config file
appropriately. That makes Roma look at 
<code>http://www.tei-c.org.uk/Query</code> for XQuery scripts which
poke a local database.</p>

<p>How does TEI P5 get into eXist? Messily. In the website directory
is <code>P5/Split</code> which contains two small datafiles
(<code>datatypes.xml</code> and <code>teinames.xml</code>) and one XML
file for each  chapter of P5. These are created with the
<code>split</code> target of the Makefile in P5 CVS. So when P5
changes, we do a split, then copy the resulting files into the web
Split directory, go there <emph>when logged into the webserver
machine</emph>, and do a <code>make</code>.  That runs
<code>client.sh</code>
which loads the XML into the database. In <code>client.sh</code>
is the setup for what the local URL for the database access is.</p>
<p>This is all pretty flaky and painful. Someone else would do
well to clear it all up and make neat single stage of updating the
database from sources.</p>
<p>Why is P5 split up, by the way? Because eXist barfs on the whole of
P5 as a single document, claims it is too complex.</p>

</div>


<div xml:id="cocoon">
<head>Controlling Cocoon</head>
<p>You want to tweak the TEI web site? OK, look at (in Perforce terms)
<code>//TEI/web/sitemap.xmap</code>. This is where XML files are
mapped to XSLT stylesheets. However, read it carefully, because there
are three other <code>sitemap.xmap</code> files; one in
<code>Activities/ETE/Preview</code>, for special rendering of the ETE files; one
in <code>Roma</code>, and one in <code>Query</code>. The last of these
is important, because it determines how the free-standing search
(<code>http://www.tei-c.org.uk/Query/tag.xq</code>) works.</p>

<p>Of course, the monkey rule applies to Cocoon too.</p>
</div>

<div xml:id="teiemacs">
<head>Making a Windows TEI Emacs</head>
<p>The files in Perforce at <code>//TEI/tei-emacs</code> provide
the basics for making an Emacs distribution. Assuming the system
you are using is entirely up to date with the the Debian packages,
you can go to the TEI Emacs directory and run
<code>build.sh</code>. This copies files from the running
system (eg from <code>/usr/share/xml/tei</code>) into the current
directory. When that is complete, you can transfer the entire
<code>tei-emacs</code> directory to a Windows box and run Inno Setup
on <code>build.iis</code>.
</p>
</div>

<div xml:id="knoppix">
<head>Making a Knoppix CD</head>
<p>This is relatively easy, if you have the infrastructure in place
for remastering Knoppix (see <ptr
target="http://www.oss-watch.ac.uk/knoppixremaster.xml"/>). Simply
add the TEI-related Debian packages to your setup.</p>
</div>


    </body>
  </text>
</TEI>
