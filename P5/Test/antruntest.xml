<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="dist" name="testtei">
  <!--
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
        Id: $Id: build-to.xml 9887 2011-12-04 22:52:05Z rahtz $
        Copyright: 2011, TEI Consortium<
-->
  <!--
      run ODD document through to different schemas, and validate
      test file using those schemas
 -->
  <property name="inputFile" value=""/>
  <property name="profile" value="default"/>
  <property name="saxon" value="/usr/share/saxon/saxon9he.jar"/>
  <property name="trang" value="/usr/share/trang/trang.jar"/>
  <property name="jing" value="/usr/share/java/jing.jar"/>
  <property name="XSL" value="../../Stylesheets"/>
  <property name="odd2dtd" value="${XSL}/profiles/${profile}/dtd/to.xsl"/>
  <property name="odd2html"  value="${XSL}/odds2/odd2html.xsl"/>
  <property name="odd2lite" value="${XSL}/odds2/odd2lite.xsl"/>
  <property name="odd2relax" value="${XSL}/profiles/${profile}/relaxng/to.xsl"/>
  <property name="odd2odd" value="${XSL}/odds2/odd2odd.xsl"/>
  <property name="odd2isosch" value="${XSL}/odds2/extract-isosch.xsl"/>
  <dirname property="file" file="${inputFile}"/>
  <dirname property="fileDir" file="${fileName}"/>
  <basename property="fileName" file="${inputFile}" suffix=".odd"/>
  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>

  <taskdef name="runjing" classpath="${jing}" classname="com.thaiopensource.relaxng.util.JingTask"/>

  <target name="dist" depends="setup,validateodd,compileodd,dtd,rng,rnc,xsd,validaterng,isoschematron,validateschematron,dochtml,cleanup"/>

  <target name="setup">
  </target>

  <target name="compileodd">
    <echo>Do ODD processing using ${saxon}</echo>
    <xslt force="yes" style="${odd2odd}" in="${inputFile}" out="${fileName}.odd.compiled" classpath="classpath">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
      <param name="lang" expression="${lang}" if="lang"/>
      <param name="defaultSource" expression="${defaultSource}" if="defaultSource"/>
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
  </target>
  <target name="dtd">
    <echo level="info">XSLT generate DTD file</echo>
    <xslt force="yes" style="${odd2dtd}" in="${fileName}.odd.compiled" out="${fileName}.dtd" classpath="classpath">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
      <!-- supply name of language-->
      <param name="lang" expression="${lang}" if="lang"/>
      <!-- emit some diagnostics"-->
      <param name="debug" expression="${debug}" if="debug"/>
      <!-- be verbose-->
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
  </target>
  <target name="rng">
    <echo level="info">XSLT generate RELAXNG files</echo>
    <xslt force="yes" style="${odd2relax}" in="${fileName}.odd.compiled" out="${fileName}.rng" classpath="classpath">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
      <!-- supply name of language-->
      <param name="lang" expression="${lang}" if="lang"/>
      <!-- emit some diagnostics"-->
      <param name="debug" expression="${debug}" if="debug"/>
      <!-- be verbose-->
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
  </target>

  <target name="rnc">
    <echo level="info">TRANG generate RNC from RELAXNG files</echo>
    <java classname="com.thaiopensource.relaxng.translate.Driver" fork="no">
      <classpath location="${trang}"/>
      <arg value="-O"/>
      <arg value="rnc"/>
      <arg value="${fileName}.rng"/>
      <arg value="${fileName}.rnc"/>
    </java>
  </target>

  <target name="cleanup" unless="debug">
    <delete file="${fileName}.odd.compiled"/>
  </target>

  <target name="validateodd">
    <echo level="info">Validate ODD</echo>
    <runjing rngfile="../p5odds.rng" file="${fileName}.odd"/>
  </target>

  <target name="validaterng">
    <echo level="info">Validate against RELAXNG</echo>
    <runjing rngfile="${fileName}.rng" file="${fileName}.xml"/>
  </target>

  <target name="validatexsd">
    <echo level="info">Validate against XSD</echo>
    <runjing rngfile="${fileName}.xsd" file="${fileName}.xml"/>
  </target>

  <target name="validatedtd">
    <echo level="info">Validate against DTD</echo>
    <xmlvalidate failonerror="yes" file="${fileName}.xml">
      <dtd location="${fileName}.dtd"/>
    </xmlvalidate>
  </target>

  <target name="xsd">
    <echo level="info">TRANG generate XSD from RELAXNG files</echo>
    <java classname="com.thaiopensource.relaxng.translate.Driver" fork="no">
      <classpath location="${trang}"/>
      <!-- Even though the output type is inferred from the output file extension,
	   make sure it's the right one. -->
      <arg value="-O"/>
      <arg value="xsd"/>
      <arg value="${fileName}.rng"/>
      <arg value="${fileName}.xsd"/>
    </java>
  </target>

  <target name="isoschematron">
    <echo level="info">XSLT generate ISO schematron from compiled ODD</echo>
    <xslt force="yes" style="${odd2isosch}" in="${fileName}.odd.compiled" out="${fileName}.isosch" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
    </xslt>
    <xslt force="yes" style="../Utilities/iso_schematron_message_xslt2.xsl" in="${fileName}.isosch" out="${fileName}.xsl" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
    </xslt>
  </target>

  <target name="validateschematron">
    <echo level="info">Validate using Schematron</echo>
    <xslt force="yes" style="${fileName}.xsl" in="${fileName}.xml"
	  classpath="classpath" out="stdout">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
    </xslt>
  </target>

  <target name="dochtml">
    <echo level="info">XSLT generate HTML from compiled ODD</echo>
   <xslt force="yes" style="${odd2html}" in="${fileName}.odd.compiled" out="${fileName}.doc.html" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
      <param name="lang" expression="${lang}" if="lang"/>
      <param name="defaultSource" expression="${defaultSource}" if="defaultSource"/>
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
  </target>

  <target name="doclite">
    <echo level="info">XSLT generate TEI Lite from compiled ODD</echo>
    <xslt force="yes" style="${odd2lite}" in="${fileName}.odd.compiled" out="${fileName}.doc.xml" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${saxon}"/>
      <param name="lang" expression="${lang}" if="lang"/>
      <param name="defaultSource" expression="${defaultSource}" if="defaultSource"/>
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
  </target>
    
</project>
