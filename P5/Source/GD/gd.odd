<!--
Copyright TEI Consortium. 
Licensed under the GNU General Public License. 
See the file COPYING for details.
$Date$
$Author$
-->
<div1 xmlns="http://www.tei-c.org/ns/1.0" type="Faisal" xml:id="GD" n="21"><head>Graphs, Networks, and Trees</head>
		<p>Graphical representations are widely used for displaying relations
among informational units because they help readers to visualize those
relations and hence to understand them better.  Two general types of
graphical representations may be distinguished.
<list type="bullets">
				<item>Graphs, in the strictly mathematical sense, consist
of points, often called <term>nodes</term> or
<term>vertices</term>, and connections among them, called
<term>arcs</term>, or under certain conditions,
<term>edges</term>.  Among the various types of graphs are
<term>networks</term> and <term>trees</term>.  Graphs
generally and networks in particular are dealt with
directly below.  Trees are dealt with separately in
sections <ptr target="#GDTR"/> and
<ptr target="#GDAT"/>.<note place="foot">The treatment here is largely based on the
characterizations of graph types in <bibl><author>Gary Chartrand and
Linda Lesniak</author> <title>Graphs and Digraphs</title>
(Menlo Park, CA: Wadsworth, 1986).</bibl></note></item>
<item><term>Charts</term>, which typically plot data in two or more
dimensions, including plots with orthogonal or radial axes, bar charts,
pie charts, and the like.  These can be described using the elements
defined in the module for figures and graphics; see
chapter <ptr target="#FT"/>.</item></list>
</p>
<p>This module makes available the following components:
<moduleSpec xml:id="DGD" ident="nets">
<altIdent type="FPI">Graphs, networks and trees</altIdent>
<desc>Graphs, networks and trees</desc></moduleSpec>

The selection and combination of modules to form a TEI schema is described in
<ptr target="#STIN"/>.
</p>
<p>The module is organized as follows:

<specGrpRef target="#DGDGR"/>
<specGrpRef target="#DGDTR"/>
<specGrpRef target="#DGDAL"/></p>

<p>Among the types of qualitative relations often represented by graphs
are organizational hierarchies, flow charts, genealogies, semantic
networks, transition networks, grammatical relations, tournament
schedules, seating plans, and directions to people's houses.  In
developing recommendations for the encoding of graphs of various types,
we have relied on their formal mathematical definitions and on the most
common conventions for representing them visually.  However, it must be
emphasized that these recommendations do not provide for the full range
of possible graphical representations, and deal only partially with
questions of design, layout and placement.</p>
<div2 xml:id="GDGR"><head>Graphs and Digraphs</head>
<p>Broadly speaking, graphs can be divided into two types:
<term>undirected</term> and <term>directed</term>.  An undirected graph
is a set of <term>nodes</term> (or <term>vertices</term>) together with
a set of pairs of those vertices, called <term>arcs</term> or
<term>edges</term>.  Each node in an arc of an undirected graph is said
to be <term>incident</term> with that arc, and the two vertices which
make up an arc are said to be <term>adjacent</term>.  An directed graph
is like an undirected graph except that the arcs are <term>ordered
pairs</term> of nodes.  In the case of directed graphs, the term
<term>edge</term> is not used; moreover, each arc in an directed graph
is said to be <term>adjacent from</term> the node from which the arc
emanates, and <term>adjacent to </term> the node to which the arc is
directed.  We use the element <gi>graph</gi> to encode graphs as a
whole, <gi>node</gi> to encode nodes or vertices, and <gi>arc</gi> to
encode arcs or edges; arcs can also be encoded by attributes on the
<gi>node</gi> element.  These elements have the following descriptions
and attributes:
<specList>
<specDesc key="graph"/>
<specDesc key="node"/>
<specDesc key="arc"/></specList></p>
<p>Before proceeding, some additional terminology may be helpful.  We
define a <term>path</term> in a graph as a sequence of nodes n1, ..., nk
such that there is an arc from each ni to ni+1 in the sequence.  A
<term>cyclic path</term>, or <term>cycle</term> is a path leading from a
particular node back to itself.  A graph that contains at least one
cycle is said to be <term>cyclic</term>; otherwise it is
<term>acyclic</term>.  We say, finally, that a graph is
<term>connected</term> if there is a path from some node to every other
node in the graph; any graph that is not connected is said to be
<term>disconnected</term>.</p>
<p>Here is an example of an undirected, cyclic disconnected graph, in
which the nodes are annotated with three-letter codes for airports, and
the arcs connecting the nodes are represented by horizontal and vertical
lines, with 90 degree bends used simply to avoid having to draw diagonal
lines.
<!--      LAX: Los Angeles                                    -->
	<!--      LVG: Las Vegas                                      -->
	<!--      PHX: Phoenix                                        -->
	<!--      TUS: Tucson                                         -->
	<!--      CIB: Seven Cities of Cibola                         -->
<egXML xmlns="http://www.tei-c.org/ns/Examples">          .---LAX---.
          |         |
         LVG-------PHX---TUS    CIB
  Airline Connections in Southwestern USA</egXML></p>
<p>Next is a markup of the graph, using <gi>arc</gi> elements to encode
the arcs.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="undirected" xml:id="CUG1" label="Airline Connections in Southwestern USA" order="5" size="4">
  <node label="LAX" xml:id="LAX" degree="2"/>
  <node label="LVG" xml:id="LVG" degree="2"/>
  <node label="PHX" xml:id="PHX" degree="3"/>
  <node label="TUS" xml:id="TUS" degree="1"/>
  <node label="CIB" xml:id="CIB" degree="0"/>
  <arc from="#LAX" to="#LVG"/>
  <arc from="#LAX" to="#PHX"/>
  <arc from="#LVG" to="#PHX"/>
  <arc from="#PHX" to="#TUS"/>
  </graph></egXML></p>
<p>
The <att>label</att> attribute on the <gi>graph</gi> element records a
label for the graph; similarly, the <att>label</att> attribute on the
<gi>node</gi> elements records the labels of those nodes. The
<att>order</att> and <att>size</att> attributes on the <gi>graph</gi>
element record the number of nodes and number of arcs in the graph
respectively; these values are optional (since they can be computed
from the rest of the graph), but if they are supplied, they must be
consistent with the rest of the encoding. They can thus be used to
help check that the graph has been encoded and transmitted correctly.
The <att>degree</att> attribute on the <gi>node</gi> elements record
the number of arcs that are incident with that node. It is optional
(because redundant), but can be used to help in validity checking: if
a value is given, it must be consistent with the rest of the
information in the graph. Finally, the <att>from</att> and
<att>to</att> attributes on the <gi>arc</gi> elements provide pointers
to the nodes connected by those arcs. Since the graph is undirected,
no directionality is implied by the use of the <att>from</att> and
<att>to</att> attributes; the values of these attributes could be
interchanged in each arc without changing the graph.</p>
<p>The <att>adj</att>, <att>adjFrom</att>, and <att>adjTo</att>
attributes of the <gi>node</gi> element provide an alternative method of
representing unlabeled arcs, their values being pointers to the nodes
which are adjacent to or from that node.  The <att>adj</att> attribute
is to be used for undirected graphs, and the <att>adjFrom</att> and
<att>adjTo</att> attributes for directed graphs.  It is a semantic error
for the directed adjacency attributes to be used in an undirected graph,
and vice versa.  Here is a markup of the preceding graph, using the
<att>adj</att> attribute to represent the arcs.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="undirected" xml:id="CUG2" label="Airline Connections in Southwestern USA" order="5" size="4">
  <node label="LAX2" xml:id="LAX2" degree="2" adj="#LVG2 #PHX2"/>
  <node label="LVG2" xml:id="LVG2" degree="2" adj="#LAX2 #PHX2"/>
  <node label="PHX2" xml:id="PHX2" degree="3" adj="#LAX2 #LVG2 #TUS2"/>
  <node label="TUS2" xml:id="TUS2" degree="1" adj="#PHX2"/>
  <node label="CIB2" xml:id="CIB2" degree="0"/>
  </graph></egXML></p>
<p>Note that each arc is represented twice in this encoding of the
graph.  For example, the existence of the arc from LAX to LVG can be
inferred from each of the first two <gi>node</gi> elements in the graph.
This redundancy, however, is not required:  it suffices to describe an
arc in any one of the three places it can be described (either adjacent
node, or in a separate <gi>arc</gi> element).  Here is a less redundant
representation of the same graph.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="undirected" xml:id="CUG3" label="Airline Connections in Southwestern USA" order="5" size="4">
  <node label="LAX3" xml:id="LAX3" degree="2" adj="#LVG3 #PHX3"/>
  <node label="LVG3" xml:id="LVG3" degree="2" adj="#PHX3"/>
  <node label="PHX3" xml:id="PHX3" degree="3" adj="#TUS3"/>
  <node label="TUS3" xml:id="TUS3" degree="1"/>
  <node label="CIB3" xml:id="CIB3" degree="0"/>
  </graph></egXML></p>
<p>Although in many cases the <gi>arc</gi> element is redundant (since
arcs can be described using the adjacency attributes of their adjacent
nodes), it has nevertheless been included in this module, in order to
allow the convenient specification of identifiers, display or
rendition information, and labels for each arc (using the attributes
<att>xml:id</att>, <att>rend</att>, and <att>label</att>).</p>
<p>Next, let us modify the preceding graph by adding directionality to
the arcs.  Specifically, we now think of the arcs as specifying selected
routes from one airport to another, as indicated by the direction of the
arrowheads in the following diagram.
<eg><![CDATA[+-<-LAX-<-+
          |         |
         LVG--->---PHX--->---TUS   CIB
                    |         |
                    +----<----+
  Selected Airline Routes in Southwestern USA]]></eg></p>
<p>Here is an encoding of this graph, using the <gi>arc</gi> element to
designate the arcs.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="directed" xml:id="RDG1" label="Selected Airline Routes in Southwestern USA" order="5" size="5">
   <node label="LAX4" xml:id="LAX4" inDegree="1" outDegree="1"/>
   <node label="LVG4" xml:id="LVG4" inDegree="1" outDegree="1"/>
   <node label="PHX4" xml:id="PHX4" inDegree="2" outDegree="2"/>
   <node label="TUS4" xml:id="TUS4" inDegree="1" outDegree="1"/>
   <node label="CIB4" xml:id="CIB4" inDegree="0" outDegree="0"/>
   <arc from="#LAX4" to="#LVG4"/>
   <arc from="#LVG4" to="#PHX4"/>
   <arc from="#PHX4" to="#LAX4"/>
   <arc from="#PHX4" to="#TUS4"/>
   <arc from="#TUS4" to="#PHX4"/>
   </graph></egXML></p>
<p>Here is another encoding of the graph, using the <att>adjTo</att> and
<att>adjFrom</att> attributes on nodes to designate the arcs.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="directed" xml:id="RDG2" label="Selected Airline Routes in Southwestern USA" order="5" size="5">
   <node label="LAX5" xml:id="LAX5" inDegree="1" outDegree="1" adjTo="#LVG5" adjFrom="#PHX5"/>
   <node label="LVG5" xml:id="LVG5" inDegree="1" outDegree="1" adjFrom="#LAX5" adjTo="#PHX5"/>
   <node label="PHX5" xml:id="PHX5" inDegree="2" outDegree="2" adjTo="#LAX5 #TUS" adjFrom="#LVG5 #TUS5"/>
   <node label="TUS5" xml:id="TUS5" inDegree="1" outDegree="1" adjTo="#PHX5" adjFrom="#PHX5"/>
   <node label="CIB5" xml:id="CIB5" inDegree="0" outDegree="0"/>
   </graph></egXML></p>
<p>If we wish to label the arcs, say with flight numbers, then
<gi>arc</gi> elements must be used to carry the <att>label</att>
attribute, as in the following example.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="directed" xml:id="RDG3" label="Selected Airline Routes in Southwestern USA" order="5" size="5">
   <node label="LAX6" xml:id="LAX6"/>
   <node label="LVG6" xml:id="LVG6"/>
   <node label="PHX6" xml:id="PHX6"/>
   <node label="TUS6" xml:id="TUS6"/>
   <node label="CIB6" xml:id="CIB6"/>
   <arc from="#LAX6" to="#LVG6" label="SW117"/>
   <arc from="#LVG6" to="#PHX6" label="SW711"/>
   <arc from="#PHX6" to="#LAX6" label="AA218"/>
   <arc from="#PHX6" to="#TUS6" label="AW229"/>
   <arc from="#TUS6" to="#PHX6" label="AW225"/>
   </graph></egXML>
<!-- indegree/outdegree removed at DD's suggestion --></p>
<p>The formal declarations of the <gi>graph</gi>, <gi>node</gi> and
<gi>arc</gi> elements are as follows.
<specGrp xml:id="DGDGR" n="Graphs">
&graph.odd;
&node.odd;
&arc.odd;
</specGrp></p>
<div3 type="subsection" xml:id="GDTN"><head>Transition Networks</head>
<p>For encoding transition networks and other kinds of directed graphs
in which distinctions among types of nodes must be made, the
<att>type</att> attribute is provided for <gi>node</gi> elements.  In
the following example, the <term>initial</term> and <term>final</term>
nodes (or <term>states</term>) of the network are distinguished.  It can
be understood as accepting the set of strings obtained by traversing it
from its initial node to its final node, and concatenating the labels.
<!-- Noam Chomsky, Syntactic Structures, 1957, p19, ex8 -->
<eg>             OLD      MAN      COMES
            +->-+   +-->----o---->---+
            |   |   |                |
            \   /   |                |
        THE  \ /    |                |
(8)   o-->----o-----+                o
                    |                |
                    |                |
                    |                |
                    +-->----o---->---+
                      MEN       COME
</eg>
<egXML xmlns="http://www.tei-c.org/ns/Examples">
<graph type='transition network'
       xml:id='SS8'
       label='(8)'
       order='5'
       size='6'>
   <node xml:id='Q0' inDegree='0' outDegree='1' type='initial'/>
   <node xml:id='Q1' inDegree='2' outDegree='3'/>
   <node xml:id='Q2' inDegree='1' outDegree='1'/>
   <node xml:id='Q3' inDegree='1' outDegree='1'/>
   <node xml:id='Q4' inDegree='2' outDegree='0' type='final'/>
   <arc  from='q0' to='q1' label='THE'/>
   <arc  from='q1' to='q1' label='OLD'/>
   <arc  from='q1' to='q2' label='MAN'/>
   <arc  from='q1' to='q3' label='MEN'/>
   <arc  from='q2' to='q4' label='COMES'/>
   <arc  from='q3' to='q4' label='COME'/>
   </graph></egXML></p>
<p>A finite state transducer has two labels on each arc, and can be
thought of as representing a mapping from one sequence of labels to
the other.  The following example represents a transducer for
translating the English strings accepted by the network in the
preceding example into French.  The nodes have been annotated with
numbers, for convenience.
<eg>         THE         MAN      COMES
      +--->---1------->-----4--->---+
      |   L'  |     HOMME     VIENT |
      |       |                     |
      |    OLD|VIEIL                |
      |       |                     |
      | THE   |                     |
(8)   0-->----2                     6
      |  LE  / \                    |
      |     /   \                   |
      |    /     \                  |
      |    | OLD |                  |
      |    +-->--+                  |
      |     VIEIL                   |
      |  THE        MEN       COME  |
      +--->---3------>----5---->----+
         LES / \   HOMMES   VIENNENT
            /   \
           /     \
           | OLD |
           +-->--+
            VIEUX
</eg>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="transducer" order="7" size="10">
   <node xml:id="T0" label="0" inDegree="0" outDegree="3" type="initial"/>
   <node xml:id="T1" label="1" inDegree="2" outDegree="1"/>
   <node xml:id="T2" label="2" inDegree="2" outDegree="2"/>
   <node xml:id="T3" label="3" inDegree="2" outDegree="2"/>
   <node xml:id="T4" label="4" inDegree="1" outDegree="1"/>
   <node xml:id="T5" label="5" inDegree="1" outDegree="1"/>
   <node xml:id="T6" label="6" inDegree="2" outDegree="0" type="final"/>
   <arc from="#t0" to="#t1" label="THE" label2="L'"/>
   <arc from="#t0" to="#t2" label="THE" label2="LE"/>
   <arc from="#t0" to="#t3" label="THE" label2="LES"/>
   <arc from="#t1" to="#t4" label="MAN" label2="HOMME"/>
   <arc from="#t2" to="#t1" label="OLD" label2="VIEIL"/>
   <arc from="#t2" to="#t2" label="OLD" label2="VIEIL"/>
   <arc from="#t3" to="#t3" label="OLD" label2="VIEUX"/>
   <arc from="#t3" to="#t5" label="MEN" label2="HOMMES"/>
   <arc from="#t4" to="#t6" label="COMES" label2="VIENT"/>
   <arc from="#t5" to="#t6" label="COME" label2="VIENNENT"/>
   </graph></egXML></p></div3>
<div3 type="subsection" xml:id="GDFT"><head>Family Trees</head>
<p>The next example provides an encoding a portion of a
<soCalled>family tree</soCalled>, in which nodes are used to represent
individuals, and parents of individuals, and arcs are used to
represent common parentage and descent links.  Let us suppose,
further, that information about individuals is contained in feature
structures, which are contained in feature-structure libraries
elsewhere in the document (see <ptr target="#FSFL"/>).  We can use the
<att>value</att> attribute on <gi>node</gi> elements to point to those
feature structures.  Assume that, in some particular representation of
the graph, nodes representing females are framed by circles, nodes
representing males are framed by boxes, and nodes representing parents
are framed by diamonds.
<eg><![CDATA[                            Mo     Fa
                  Katherine->--K+A--<-Amberley
                                |
                        So      |    Da
                   +----<-------+----->----+
                   |            | So       |
                Bertrand        +->-+    Rachel
                   |                |
                   |              Frank
         Mo     Fa | Fa     Mo
   Peter->--P+B--<-+->--D+B--<-Dora
             |           |
          So |        Da | So
         +-<-+     +--<--+-->--+
         |         |           |
       Conrad     Kate        John]]></eg>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="family tree" order="13" size="12">
  <node xml:id="KATHR" label="Katherine" value="#kr1" inDegree="0" outDegree="1"/>
  <node xml:id="AMBER" label="Amberley" value="#ar1" inDegree="0" outDegree="1"/>
  <node xml:id="KAR" label="K+A" inDegree="2" outDegree="3"/>
  <node xml:id="BERTR" label="Bertrand" value="#br1" inDegree="1" outDegree="2"/>
  <node xml:id="PETER" label="Peter" value="#pr1" inDegree="0" outDegree="1"/>
  <node xml:id="DORAR" label="Dora" value="#dr1" inDegree="0" outDegree="1"/>
  <node xml:id="PBR" label="P+B" inDegree="2" outDegree="1"/>
  <node xml:id="DBR" label="D+B" inDegree="2" outDegree="2"/>
  <node xml:id="FRANR" label="Frank" value="#fr1" inDegree="1" outDegree="0"/>
  <node xml:id="RACHR" label="Rachel" value="#rr1" inDegree="1" outDegree="0"/>
  <node xml:id="CONRR" label="Conrad" value="#cr1" inDegree="1" outDegree="0"/>
  <node xml:id="KATER" label="Kate" value="#kr2" inDegree="1" outDegree="0"/>
  <node xml:id="JOHNR" label="John" value="#jr1" inDegree="1" outDegree="0"/>
  <arc label="Mo" from="#KathR" to="#KAR"/>
  <arc label="Fa" from="#AmbeR" to="#KAR"/>
  <arc label="So" from="#KAR" to="#BertR"/>
  <arc label="So" from="#KAR" to="#FranR"/>
  <arc label="Da" from="#KAR" to="#RachR"/>
  <arc label="Mo" from="#PeteR" to="#PBR"/>
  <arc label="Fa" from="#BertR" to="#PBR"/>
  <arc label="So" from="#PBR" to="#ConrR"/>
  <arc label="Mo" from="#DoraR" to="#DBR"/>
  <arc label="Fa" from="#BertR" to="#DBR"/>
  <arc label="Da" from="#DBR" to="#KateR"/>
  <arc label="So" from="#DBR" to="#JohnR"/>
  </graph></egXML>
<!-- Partial family tree for Bertrand Russell, based on       -->
	<!-- Pereira and Shieber, Prolog and Natural Language         -->
	<!-- Analysis, 1987, p22                                      --></p></div3>
<div3 type="subsection" xml:id="GDHI"><head>Historical Interpretation</head>
<p>For our final example, we represent graphically the relationships
among various geographic areas mentioned in a
seventeenth-century Scottish document.  The document itself is
a <soCalled>sasine</soCalled>, which records a grant of land
from the earl of Argyll to one Donald McNeill, and reads in part
as follows (abbreviations have been expanded silently,
and <q>[...]</q> marks illegible passages):
<q rend="display">
<p>Item instrument of Sasine given the said Hector
Mcneil confirmed and dated 28 May 1632
[...] at Edinburgh upon the 15 June 1632</p>
<p>Item ane charter granted by Archibald late earl
of Argyle and Donald McNeill of Gallachalzie wh
makes mention that ...
the said late Earl yields and grants
to the said Donald MacNeill ...</p>
<p>All and hail the two merk land of old extent
of Gallachalzie with the pertinents by and in
the lordship of Knapdale within the sherrifdome
of Argyll</p>
<p>[description of other lands granted follows ...]</p>
<p>This Charter is dated at Inverary the 15th May 1669</p></q></p>
<p>In this example, we are concerned with the land and pertinents (i.e.
accompanying sources of revenue) described as <q>the two merk land of
old extent of Gallachalzie with the pertinents by and in the lordship of
Knapdale within the sherrifdom of Argyll</q>.</p>
<p>The passage concerns the following pieces of land:
<list type="bullets">
<item>the Earl of Argyll's land (i.e. the lands granted by this clause
of the sasine)</item>
<item>two mark of land in Gallachalzie</item>
<item>the pertinents for this land</item>
<item>the Lordship of Knapdale</item>
<item>the sherrifdom of Argyll</item></list>
We will represent these geographic entities as nodes in a graph.
Arcs in the graph will represent the following relationships among
them:
<list type="bullets">
<item>containment (INCLUDE)</item>
<item>location within (IN)</item>
<item>contiguity (BY)</item>
<item>constituency (PART OF)</item></list>
Note that these relationships are logically related: <q>include</q>
and <q>in</q>, for example, are inverses of each other: the Earl of
Argyll's land includes the parcel in Gallachalzie, and the parcel is
therefore in the Earl of Argyll's land.  Given an explicit set of
inference rules, an appropriate application could use the graph we are
constructing to infer the logical consequences of the relationships we
identify.</p>
<p>Let us assume that feature-structure analyses are available which
describe Gallachalzie, Knapdale, and Argyll.  We will link to those
feature structures using the <att>value</att> attribute on the nodes
representing those places.  However, there may be some uncertainty as to
which noun phrase is modified by the phrase <q>within the sheriffdome of
Argyll</q>:  perhaps the entire lands (land and pertinents) are in
Argyll, perhaps just the pertinents are, or perhaps only Knapdale is
(together with the portion of the pertinents which is in Knapdale).  We
will represent all three of these interpretations in the graph; they
are, however, mutually exclusive, which we represent using the
<att>exclude</att> attribute defined in
chapter <ptr target="#SA"/>.<note place="foot">That is, the three syntactic
interpretations of the clause are mutually exclusive.  The notion that
the pertinents are in Argyll is clearly not inconsistent with the notion
that both the land in Gallachalzie and the pertinents are in Argyll.
The graph given here describes the possible interpretations of the
clause itself, not the sets of inferences derivable from each syntactic
interpretation, for which it would be convenient to use the facilities
described in chapter <ptr target="#FS"/>.</note></p>
<p>We represent the graph and its encoding as follows, where
the dotted lines in the graph indicate the mutually exclusive arcs; in
the encoding, we use the <att>exclude</att> attribute to indicate those
arcs.
<eg><![CDATA[              Earl of Argyll's land
            (land described in sasine)
                      | | |
      ,-<-INCLUDE--<--' + '->-INCLUDE---> Pertinents
      |                 :                  :  |   |
 Gallachalzie          IN  ...<..IN..<.....:  |   |
                        :  :                  |   |
                        :  :             INCLUDE INCLUDE
                        :  :              |           |
                        :  :   (part of pertinents)  (part)
                        :  :              |           |
                        :  :              BY         PART OF
                        :  :              |           |
                        :  :          Lordship of Knapdale
                        :  :                   :
                        :  :  ...<.IN..<.......:
                        :  :  :
                Sherrifdom of Argyll]]></eg>
<!-- why are some lines dotted? and no rend even supplied here for -->
	<!-- me to delete! -->
The graph formalizes the following relationships:
<list type="bullets">
<item>the Earl of Argyll's land <mentioned>includes</mentioned> (the parcel of
land in) Gallachalzie</item>
<item>the Earl of Argyll's land <mentioned>includes</mentioned> the pertinents of that parcel</item>
<item>the pertinents are (in part) <mentioned>by</mentioned> the Lordship of Knapdale</item>
<item>the pertinents are (in part) <mentioned>part of</mentioned> the Lordship of Knapdale</item>
<item>the Earl of Argyll's land, or the pertinents, or
the Lordship of Knapdale, is <mentioned>in</mentioned> the Sherrifdom of Argyll</item></list>
We encode the graph thus:
<egXML xmlns="http://www.tei-c.org/ns/Examples"><graph type="directed" order="7" size="9">
  <node xml:id="EARL" label="Earl of Argyll's land"/>
  <node xml:id="GALL" label="Gallachalzie" value="#gallfs"/>
  <node xml:id="PERT" label="Pertinents"/>
  <node xml:id="PER1" label="Pertinents part"/>
  <node xml:id="PER2" label="Pertinents part"/>
  <node xml:id="KNAP" label="Lordship of Knapdale" value="#knapfs"/>
  <node xml:id="ARGY" label="Sherrifdome of Argyll" value="#argyfs"/>
  <arc xml:id="EARLGALL" label="INCLUDE" from="#earl" to="#gall"/>
  <arc xml:id="EARLARGY" label="IN" from="#earl" to="#argy" exclude="#pertargy #knapargy"/>
  <arc xml:id="EARLPERT" label="INCLUDE" from="#earl" to="#pert"/>
  <arc xml:id="PERTPER1" label="INCLUDE" from="#pert" to="#per1"/>
  <arc xml:id="PERTPER2" label="INCLUDE" from="#pert" to="#per2"/>
  <arc xml:id="PERTARGY" label="IN" from="#pert" to="#argy" exclude="#earlargy #knapargy"/>
  <arc xml:id="PER1KNAP" label="BY" from="#per1" to="#knap"/>
  <arc xml:id="PER2KNAP" label="PART OF" from="#per2" to="#knap"/>
  <arc xml:id="KNAPARGY" label="IN" from="#knap" to="#argy" exclude="#earlargy #pertargy"/>
  </graph></egXML></p></div3></div2>
<div2 type="Terry" xml:id="GDTR"><head>Trees</head>
<p>A <term>tree</term> is a connected acyclic graph.  That is, it is
possible in a tree graph to follow a path from any vertex to any other
vertex, but there are no paths that lead from any vertex to itself.  A
rooted tree is a directed graph based on a tree; that is, the arcs in
the graph correspond to the arcs of a tree such that there is exactly
one node, called the <term>root</term>, for which there is a path from
that node to all other nodes in the graph.  For our purposes, we may
ignore all trees except for rooted trees, and hence we shall use the
<gi>tree</gi> element for rooted trees, and the <gi>root</gi> element
for its root.  The nodes adjacent to a given node are called its
<term>children</term>, and the node adjacent from a given node is called
its <term>parent</term>.  Nodes with both a parent and children are
called <term>internal nodes</term>, for which we use the <gi>iNode</gi>
element.  A node with no children is tagged as a <gi>leaf</gi>.  If the
children of a node are ordered from left to right, then we say that that
node is <term>ordered</term>.  If all the nodes of a tree are ordered,
then we say that the tree is an <term>ordered tree</term>.  If some of
the nodes of a tree are ordered and others are not, then the tree is a
<term>partially ordered tree</term>.  The ordering of nodes and trees
may be specified by an attribute; we take the default ordering for trees
to be ordered, that roots inherit their ordering from the trees in which
they occur, and internal nodes inherit their ordering from their
parents.  Finally, we permit a node to be specified as following other
nodes, which (when its parent is ordered) it would be assumed to
precede, giving rise to crossing arcs.  
The elements used for the
encoding of trees have the following descriptions and attributes.
<specList><specDesc key="tree" atts="arity ord order"/><specDesc key="root" atts="label value children ord outDegree"/><specDesc key="iNode" atts="label value children parent ord follow outDegree"/><specDesc key="leaf" atts="label value parent follow"/></specList></p>
<p>Here is an example of a tree.  It represents the order in which the
operators of addition (symbolized by <code>+</code>), exponentiation
(symbolized by <code>**</code>) and division (symbolized by <code>/</code>) are
applied in evaluating the arithmetic formula <code>((a**2)+(b**2))/((a+b)**2) </code>.
In drawing the graph, the root is placed on the far right, and
directionality is presumed to be to the left.
<egXML xmlns="http://www.tei-c.org/ns/Examples">a--,
   |-**-,
2--'    |
        |-+--,
b--,    |    |
   |-**-'    |
2--'         |
             |-/
a--,         |
   |-+--,    |
b--'    |    |
        |-**-'
        |
2-------'</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples">
<tree n="ex1" arity="2" ord="true" order="12">
   <root label="/" xml:id="G-DIV1" children="#PLU1 #EXP1"/>
   <iNode label="+" xml:id="PLU1" parent="#G-DIV1" children="#EXP2 #EXP3"/>
   <iNode label="**" xml:id="EXP1" parent="#G-DIV1" children="#PLU2 #NUM2.3"/>
   <iNode label="**" xml:id="EXP2" parent="#PLU1" children="#VARA1 #NUM2.1"/>
   <iNode label="**" xml:id="EXP3" parent="#PLU1" children="#VARB1 #NUM2.2"/>
   <iNode label="+" xml:id="PLU2" parent="#EXP1" children="#VARA2 #VARB2"/>
   <leaf label="a" xml:id="VARA1" parent="#EXP2"/>
   <leaf label="2" xml:id="NUM2.1" parent="#EXP2"/>
   <leaf label="b" xml:id="VARB1" parent="#EXP3"/>
   <leaf label="2" xml:id="NUM2.2" parent="#EXP3"/>
   <leaf label="a" xml:id="VARA2" parent="#PLU2"/>
   <leaf label="b" xml:id="VARB2" parent="#PLU2"/>
   <leaf label="2" xml:id="NUM2.3" parent="#EXP1"/>
   </tree></egXML></p>
<p>In this encoding, the <att>arity</att> attribute represents the
<term>arity</term> of the tree, which is the greatest value of the
<att>outDegree</att> attribute for any of the nodes in the tree.  If, as
in this case, <att>arity</att> is <val>2</val>, we say that the tree is a
<term>binary</term> tree.</p>
<p>Since the left-to-right (or top-to-bottom!) order of the children of
the two <code>+</code> nodes does not affect the arithmetic result in this
case, we could represent in this tree all of the arithmetically
equivalent formulas involving its leaves, by specifying the attribute
<att>ord</att> as <val>false</val> on those two <gi>iNode</gi> elements, the attribute
<att>ord</att> as <val>true</val> on the <gi>root</gi> and other <gi>iNode</gi>
elements, and the attribute <att>ord</att> as <val>partial</val> on the <gi>tree</gi>
element, as follows.
<egXML xmlns="http://www.tei-c.org/ns/Examples"><tree n="ex2" ord="partial" arity="2" order="13">
 <root label="/" xml:id="div1" ord="true" children="#plu1 #exp1"/>
 <iNode label="+" xml:id="plu1" ord="false" parent="#div1" children="#exp2 #exp3"/>
 <iNode label="**" xml:id="exp1" ord="true" parent="#div1" children="#plu2 #num2.3"/>
 <iNode label="**" xml:id="exp2" ord="true" parent="#plu1" children="#vara1 #num2.1"/>
 <iNode label="**" xml:id="exp3" ord="true" parent="#plu1" children="#varb1 #num2.2"/>
 <iNode label="+" xml:id="plu2" ord="false" parent="#exp1" children="#vara2 #varb2"/>
 <leaf label="a" xml:id="vara1" parent="#exp2"/>
 <leaf label="2" xml:id="num2.1" parent="#exp2"/>
 <leaf label="b" xml:id="varb1" parent="#exp3"/>
 <leaf label="2" xml:id="num2.2" parent="#exp3"/>
 <leaf label="a" xml:id="vara2" parent="#plu2"/>
 <leaf label="b" xml:id="varb2" parent="#plu2"/>
 <leaf label="2" xml:id="num2.3" parent="#exp1"/>
 </tree></egXML></p>
<p>This encoding represents all of the following:
<list type="simple">
<item><code>((a**2)+(b**2))/((a+b)**2)</code></item>
<item><code>((b**2)+(a**2))/((a+b)**2)</code></item>
<item><code>((a**2)+(b**2))/((b+a)**2)</code></item>
<item><code>((b**2)+(a**2))/((a+b)**2)</code></item></list></p>
<p>Linguistic phrase structure is very commonly represented by trees.
Here is an example of phrase structure represented by an ordered tree
with its root at the top, and a possible encoding.
<egXML xmlns="http://www.tei-c.org/ns/Examples">      ,---PP---,
      |        |
      P    ,--NP--,
      |    |      |
     with Art     N
           |      |
          the periscope</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><tree n="ex3" ord="true" arity="2" order="8">
   <root xml:id="GD-PP1" children="#GD-P1 #GD-NP1" label="PP"/>
   <iNode xml:id="GD-P1" parent="#GD-PP1" children="#GD-WITH1" label="P"/>
   <leaf xml:id="GD-WITH1" parent="#GD-P1" label="with"/>
   <iNode xml:id="GD-NP1" parent="#GD-PP1" children="#GD-THE1 #GD-PERI1" label="NP"/>
   <iNode xml:id="GD-ART1" parent="#GD-NP1" children="#GD-THE1" label="Art"/>
   <leaf xml:id="GD-THE1" parent="#GD-ART1" label="the"/>
   <iNode xml:id="GD-N1" parent="#GD-NP1" children="#GD-PERI1" label="N"/>
   <leaf xml:id="GD-PERI1" parent="#GD-N1" label="periscope"/>
   </tree></egXML></p>
<p>Finally, here is an example of an ordered tree, in which a particular
node which ordinarily would precede another is specified as following
it.  In the drawing, the <code>xxx</code> symbol indicates that the arc from
VB to PT crosses the arc from VP to PN.
<egXML xmlns="http://www.tei-c.org/ns/Examples">       ,--VP--,
       |      |
   ,--VB-----xxx--,
   |          |   |
   VB         PN  PT
   |          |   |
  look       them up</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><tree n="ex4"
						      arity="2"
						      order="8" ord="true">
   <leaf label="look" xml:id="GD-LOOK1" parent="#GD-VB2"/>
   <leaf label="them" xml:id="GD-THEM1" parent="#GD-PN1"/>
   <leaf label="up" xml:id="GD-UP1" parent="#GD-PT1"/>
   <iNode label="VB" xml:id="GD-VB2" parent="#GD-VB1" children="#GD-LOOK1"/>
   <iNode label="PN" xml:id="GD-PN1" parent="#GD-VP1" children="#GD-THEM1"/>
   <iNode label="PT" xml:id="GD-PT1" parent="#GD-VB1" children="#GD-UP1" follow="#GD-PN1"/>
   <iNode label="VB" xml:id="GD-VB1" parent="#GD-VP1" children="#GD-VB2 #GD-PT1"/>
   <root label="VP" xml:id="GD-VP1" children="#GD-VB1 #GD-PN1"/>
   </tree></egXML></p>
<p>The formal declarations of the <gi>tree</gi>, <gi>root</gi>,
<gi>iNode</gi> and <gi>leaf</gi> elements are as follows.
<specGrp xml:id="DGDTR" n="Trees (basic method)">
&tree.odd;
&root.odd;
&inode.odd;
&leaf.odd;
</specGrp>
										</p></div2>
<div2 type="Anthony" xml:id="GDAT"><head>Another Tree Notation</head>
<p>In this section, we present an alternative to the method of
representing the structure of ordered rooted trees that is given in
section <ptr target="#GDTR" type="div3"/>, which is based on the observation
that any node of such a tree can be thought of as the root of the
subtree that it dominates.  Thus subtrees can be thought of as the same
type as the trees they are embedded in, hence the designation
<gi>eTree</gi>, for <term>embedding tree</term>.  Whereas in a
<gi>tree</gi>, the relationship among the parts is indicated by the
<att>children</att> attribute, and by the names of the elements
<gi>root</gi>, <gi>iNode</gi> and <gi>leaf</gi>, the relationship among
the parts of an <gi>eTree</gi> is indicated simply by the arrangement of
their content.  However, we have chosen to enable encoders to
distinguish the terminal elements of an <gi>eTree</gi> by means of the
empty <gi>eLeaf</gi> element, though its use is not required; the
<gi>eTree</gi> element can also be used to identify the terminal nodes
of <gi>eTree</gi> elements.  We also provide a <gi>triangle</gi>
element, which can be thought of as an <term>underspecified</term>
<gi>eTree</gi>, that is an <gi>eTree</gi> in which certain information
has been left out.  In addition, we provide a <gi>forest</gi> element,
which consists of one or more <gi>tree</gi>, <gi>eTree</gi> or
<gi>triangle</gi> elements, and a <gi>forestGrp</gi> element, which
consists of one or more <gi>forest</gi> elements.  The elements used for
the encoding of embedding trees and the units containing them have the
following descriptions and attributes.
<specList><specDesc key="eTree" atts="label value"/><specDesc key="triangle" atts="label value"/><specDesc key="eLeaf" atts="label value"/><specDesc key="forest" atts="type"/><specDesc key="forestGrp" atts="type"/></specList></p>
<p>Like the <gi>root</gi>, <gi>iNode</gi> and <gi>leaf</gi> of a
<gi>tree</gi>, the <gi>eTree</gi>, <gi>triangle</gi> and
<gi>eLeaf</gi> elements may also have <att>label</att> and
<att>value</att> attributes.</p>
<p>To illustrate the use of the <gi>eTree</gi> and <gi>eLeaf</gi>
elements, here is an encoding of the second example in section <ptr target="#GDTR" type="div3"/>, repeated here for convenience.
<egXML xmlns="http://www.tei-c.org/ns/Examples">      ,---PP---,
      |        |
      P    ,--NP--,
      |    |      |
     with Art     N
           |      |
          the periscope</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><eTree n="ex1" label="PP">
   <eTree label="P"><eLeaf label="with"/></eTree>
   <eTree label="NP">
      <eTree label="Art"><eLeaf label="the"/></eTree>
      <eTree label="N"><eLeaf label="periscope"/></eTree>
      </eTree>
   </eTree></egXML></p>
<p>Next, we provide an encoding, using the <gi>triangle</gi> element, in
which the internal structure of the <gi>eTree</gi> labeled <code>NP</code> is
omitted.
<egXML xmlns="http://www.tei-c.org/ns/Examples">      ,---PP----,
      |         |
      P        NP
      |       /  \
     with    /    \
            /______\
          the periscope</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><eTree n="ex2" label="PP">
   <eTree label="P"><eLeaf label="with"/></eTree>
   <triangle label="NP"><eLeaf label="the periscope"/></triangle>
   </eTree></egXML></p>
<p>Ambiguity involving alternative tree structures associated with the
same terminal sequence can be encoded relatively conveniently using a
combination of the <att>exclude</att> and <att>copyOf</att> attributes
described in sections <ptr target="#SAAT"/> and <ptr target="#SAIE"/>.  In
the simplest case, an <gi>eTree</gi> may be part of the content of
exactly one of two different <gi>eTree</gi> elements.  To mark it up,
the embedded <gi>eTree</gi> may be fully specified within one of the
embedding <gi>eTree</gi> elements to which it may belong, and a
virtual copy, specified by the <att>copyOf</att> attribute, may appear
on the other.  In addition, each of the embedded elements in question
is specified as excluding the other, using the <att>exclude</att>
attribute.  To illustrate, consider the English phrase <mentioned>see the
vessel with the periscope</mentioned>, which may be considered to be
structurally ambiguous, depending on whether the phrase <mentioned>with
the periscope</mentioned> is a modifier of the phrase <mentioned>the
vessel</mentioned> or a modifier of the phrase <mentioned>see the
vessel</mentioned>.  This ambiguity is indicated in the sketch of the
ambiguous tree by means of the dotted-line arcs.  The markup using the
<att>copyOf</att> and <att>exclude</att> attributes follows the
sketch.
<egXML xmlns="http://www.tei-c.org/ns/Examples">      ,--------VP....................
      |        |                    :
      V   ,----NP.......         ,--PP--,
      |   |    |       :         |      |
     see Art   N    ,--PP--,     P    ,-NP-,
          |    |    |      |     |    |    |
         the vessel P    ,-NP-, with Art   N
                    |    |    |       |    |
                   with Art   N      the periscope
                         |    |
                        the periscope</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><eTree n="ex3" label="VP">
   <eTree label="V"><eLeaf label="see"/></eTree>
   <eTree label="NP">
      <eTree label="Art"><eLeaf label="the"/></eTree>
      <eTree label="N"><eLeaf label="vessel"/></eTree>
      <eTree xml:id="GD-PPA" exclude="#GD-PPB" label="PP">
         <eTree label="P"><eLeaf label="with"/></eTree>
         <eTree label="NP">
            <eTree label="Art"><eLeaf label="the"/></eTree>
            <eTree label="N"><eLeaf label="periscope"/></eTree>
            </eTree>
         </eTree>
      </eTree>
   <eTree xml:id="GD-PPB" copyOf="#GD-PPA" exclude="#GD-PPA" label="PP"/>
   </eTree></egXML></p>
<p>To indicate that one of the alternatives is selected, one may specify
the <att>select</att> attribute on the highest <gi>eTree</gi> as
either <val>#GD-PPA</val> or <val>#GD-PPB</val>; see section
<ptr target="#SAAT"/>.</p> 
<p>Depending on the grammar one uses to associate structures with
examples like <mentioned>see the man with the periscope</mentioned>, the
representations may be more complicated than this.  For example,
adopting a version of the <term>X-bar</term> theory of phrase structure
originated by Jackendoff,<note place="foot"><bibl>R. Jackendoff, 
<title>X-Bar Syntax</title>, 1977</bibl></note> the
attachment of a modifier may require the creation of an intermediate
node which is not required when the attachment is not made, as shown in
the following diagram.  A possible encoding of this ambiguous structure
immediately follows the diagram.
<egXML xmlns="http://www.tei-c.org/ns/Examples">    ..............VP......................
    :                                    :
 ,--V'--,                          ,-----V'------,
 |      |                          |             |
 V    ,-NP--,                   ,--V'--,      ,--PP--,
 |    |     |                   |      |      |      |
see  Spec ,-N'--,               V    ,-NP-,   P    ,-NP-,
      |   |     |               |    |    |   |    |    |
     the  N'  ,-PP---,         see  Spec  N' with Spec  N'
          |   |      |               |    |        |    |
          N   P    ,-NP-,           the   N       the   N
          |   |    |    |                 |             |
      vessel with Spec  N'             vessel        periscope
                   |    |
                  the   N
                        |
                     periscope</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><eTree n="ex4" label="VP">
   <eTree xml:id="VBARA" exclude="#VBARB" label="V'">
      <eTree xml:id="VA" label="V"><eLeaf label="see"/></eTree>
      <eTree label="NP">
         <eTree xml:id="SPEC1A" label="Spec"><eLeaf label="the"/></eTree>
         <eTree label="N'">
            <eTree xml:id="NBAR2A" label="N'">
               <eTree label="N"><eLeaf label="vessel"/></eTree>
               </eTree>
            <eTree xml:id="PPA1" label="PP">
               <eTree label="P"><eLeaf label="with"/></eTree>
               <eTree label="NP">
                  <eTree label="Spec"><eLeaf label="the"/></eTree>
                  <eTree label="N'">
                     <eTree label="N"><eLeaf label="periscope"/></eTree>
                     </eTree>
                  </eTree> </eTree> </eTree> </eTree> </eTree>
   <eTree xml:id="VBARB" exclude="#VBARA" label="V'">
      <eTree label="V'">
         <eTree xml:id="VB" copyOf="#VA" label="V"/>
         <eTree label="NP">
            <eTree xml:id="SPEC1B" copyOf="#SPEC1A" label="Spec"/>
            <eTree xml:id="NBAR2B" copyOf="#NBAR2A" label="N'"/>
            </eTree>
         </eTree>
      <eTree xml:id="PPB" copyOf="#PPA1" label="PP"/>
      </eTree>
   </eTree></egXML></p>
<!--
** changed id= of second first-generation child <eTree> from VBARA to
** VBARB, and exclude= of same from 'vbarb' to 'vbara'. 2001-12-23, Syd
-->
<p>A <term>derivation</term> in a generative grammar is often thought
of as a set of trees.  To encode such a derivation, one may use the
<gi>forest</gi> element, in which the trees may be marked up using the
<gi>tree</gi>, the <gi>eTree</gi> or the <gi>triangle</gi> element.
The <att>type</att> attribute may be used to specify what kind of
derivation it is.  Here is an example of a two-tree forest, involving
application of the <soCalled>wh-movement</soCalled> transformation in
the derivation of <mentioned>what you do</mentioned> (as in <mentioned>this is
what you do</mentioned>) from the underlying <mentioned>you do
what</mentioned>.<note place="foot">The symbols
<code>e</code> and <code>t</code> denote
special theoretical constructs (<term>empty category</term> and
<term>trace</term> respectively), which need not concern us here.</note>
<egXML xmlns="http://www.tei-c.org/ns/Examples">     ,--S'--,                 ,--S'--,
     |      |                 |      |
    COMP ,--S--,             COMP ,--S--,
     |   |     |              |   |     |
     e   NP  ,-VP-,           NP  NP  ,-VP-,
         |   |    |           |   |   |    |
        you  V    NP        what you  V    NP
             |    |                   |    |
            do   what                do    t</egXML>
<egXML xmlns="http://www.tei-c.org/ns/Examples"><forest n="ex5" type="syntactic derivation">
   <eTree n="Stage 1" xml:id="S1SBAR" label="S'">
      <eTree xml:id="S1COMP" label="COMP"><eLeaf xml:id="S1E" label="e"/></eTree>
      <eTree xml:id="S1S" label="S">
         <eTree xml:id="S1NP1" label="NP"><eLeaf label="you"/></eTree>
         <eTree xml:id="S1VP" label="VP">
            <eTree xml:id="S1V" label="V"><eLeaf label="do"/></eTree>
            <eTree xml:id="S1NP2" label="NP">
               <eLeaf xml:id="S1WH" label="what"/>
               </eTree>
            </eTree>
         </eTree>
      </eTree>
   <eTree n="Stage 2" xml:id="S2SBAR" corresp="#S1SBAR" label="S'">
      <eTree xml:id="S2COMP" corresp="#S1COMP" label="COMP">
         <eTree copyOf="#S1NP2" corresp="#S1E" label="NP"/>
         </eTree>
      <eTree xml:id="S2S" corresp="#s1s" label="S">
         <eTree xml:id="S2NP1" copyOf="#S1NP1" label="NP"/>
         <eTree xml:id="S2VP" corresp="#S1VP" label="VP">
            <eTree xml:id="S2V" copyOf="#S1V" label="V"/>
            <eTree xml:id="S2NP2" corresp="#S1NP2" label="NP">
              <eLeaf corresp="#S1WH" label="t"/>
              </eTree>
            </eTree>
         </eTree>
      </eTree>
   </forest></egXML></p>
<p>In this markup, we have used <att>copyOf</att> attributes to provide
virtual copies of elements in the tree representing the second stage of
the derivation that also occur in the first stage, and the
<att>corresp</att> attribute (see section <ptr target="#SACS"/>) to link
those elements in the second stage with corresponding elements in the
first stage that are not copies of them.</p>
<p>If a group of forests (e.g. a full grammatical derivation including
syntactic, semantic and phonological subderivations) is to be
articulated, the grouping element <gi>forestGrp</gi> may be used.</p>
<p>The formal declarations of the <gi>eTree</gi>, <gi>triangle</gi>,
<gi>eLeaf</gi>, <gi>forest</gi> and <gi>forestGrp</gi> elements are as
follows.
<specGrp xml:id="DGDAL" n="Trees (alternate method)">
&etree.odd;
&triangle.odd;
&eleaf.odd;
&forest.odd;
&forestgp.odd;
</specGrp></p></div2></div1>
