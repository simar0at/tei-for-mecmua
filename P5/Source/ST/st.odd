
<!-- open questions

1. how far do we need to maintain the distincn between base addnl aux
modules?

2. what about x. entities: can we do without them?

3. The filenames for modules are now made in a different way : is it fixed?

4. should *all* classes be defined in this chapter or not?

-->
<!-- changed "tag set" to "module" passim (well, its a start) LB 20
     aug 05 -->
<!--
Copyright TEI Consortium. 

Licensed under the GNU General Public License. 

See the file COPYING for details.

$Date$
$Author$

-->
<div1 xmlns="http://www.tei-c.org/ns/1.0" type="Chapter" xml:id="ST" n="3">
<head>Structure of the TEI Document Type Definition</head>
				
<p>This chapter describes the overall structure of the encoding scheme
defined by these Guidelines.  It introduces the conceptual framework
within which the following chapters are to be understood, and
describes the technical means by which that conceptual framework is
implemented.  It assumes familiarity with SGML or XML; see chapter
<ptr target="#SG"/>.
 						</p>

<p>The TEI encoding scheme consists of a number of <term>modules</term>, each of
which declares particular elements and attributes. Part of an
element's declaration includes its assignment to one or more
element classes. Selected modules may be
combined in different ways, according to principles described in
this chapter, within the framework of the overall TEI.
	</p>

<p>The modules from which the main TEI scheme is constructed may be
classified as follows:
 
<list type="bullets">
<item>core modules</item>
<item>base modules</item>
<item>additional modules</item></list></p>

<p>The first two sections of this chapter discuss these distinctions
and list the specific modules included in each category.  Section
<ptr target="#STIN" type="div2"/> describes how to create a TEI schema
or invoke the TEI document type declaration, and how to specify which
of the various base modules and optional additional modules are used
in a document.</p>

<p>The <term>global attributes</term>, characteristics postulated of
every element or tag in the encoding scheme, are defined in section 
<ptr target="#STGA" type="div2"/>.</p>

<p>The remainder of the chapter contains a more technical description of
the mechanisms used to implement the encoding scheme.  It may be
skipped at a first reading, but a proper understanding of the topics
addressed here is essential for anyone planning to modify or extend the
TEI encoding scheme in any way (see also chapter <ptr target="#MD"/>), and
also highly desirable for those wishing to take full advantage of its
modular nature.  The structure of the main TEI DTD file itself is
outlined in section <ptr target="#STOV"/>.  The <term>element
classes</term> used to define smaller groups of elements and their
characteristics are described in section <ptr target="#STEC" type="div2"/>.
Both global attributes and element classes are implemented using
<term>parameter entities</term>; various other uses of parameter
entities in the TEI DTDs are discussed in section <ptr target="#STPE"/>.</p>
	
<div2 xml:id="STMA"><head>Main modules</head>
	
<p>These Guidelines define a large number of elements for marking up
documents, all of which are formally defined within the <term>document
type declaration</term> (<term>DTD</term>) files provided by the TEI
and documented in the remainder of the present document.  They are
grouped into <term>element sets</term> (also known as <term>tag sets</term> 
or <term>modules</term>), each
comprising a set of declarations for elements which belong together in some
respect, typically related to their intended application area.
 </p>
<p>All elements used to transcribe documents are available for use within
the <term>main DTD</term> of the TEI and are  defined in Parts III and
IV of these Guidelines.  There are modules for prose
matter, verse and verse collections, drama, dictionaries, analysis and
interpretation of text, text criticism, etc. A full list, including the
files in which they are defined, and the rules determining their
selection and combination, is given in section <ptr target="#STBA"/>.
 </p>
</div2>

<div2 xml:id="STBA"><head>Core, Base, and Additional Modules</head>	
<p>A TEI schema is constructed by selecting an appropriate
combination of smaller modules, each containing some set of tags likely
to be used together.  These building blocks include:
 
<list type="gloss"><label><term>core modules</term> </label>
<item>standard components of the TEI
main DTD in all its forms; these are always included without any special
action by the encoder;
 </item><label><term>base modules</term> </label>
<item>basic building blocks for specific text types; exactly one base must be
selected by the encoder;
 </item><label><term>additional modules</term> </label>
<item>extra
tags useful for particular purposes. All additional modules are
compatible with all bases and with each other; an encoder may therefore
add them to the selected base in any combination desired.
 </item></list>
 
Each module is contained in one or more system files, which are
defined by appropriate inclusions of  schema modules or 
<term>parameter entity declarations</term>
and invoked as a unit by
<term>parameter entity references</term> in a DTD.<note place="foot">A <term>parameter entity</term> is an entity used only in
markup declarations; references to parameter entities are delimited by a
percent sign and a semicolon rather than the ampersand and colon used
for <term>general entity</term> references.  The entity <ident type="pe">TEI.core.ent</ident>, for example, would be referred to using
the string <code>%TEI.core.ent;</code>.  Parameter entities can also be
used to control the inclusion or exclusion of <term>marked
sections</term> of the document or DTD; the TEI DTD uses marked
sections to handle the selection of different base and additional tag
sets.</note>
Several such declarations may be needed to invoke all parts of a given
module, since as well as defining elements or attributes, a module may
(for example) add new items to the set of global attributes or add
classes to the system of element classes.  Consistent naming principles
are applied throughout the TEI scheme for these and other entities.
Thus, assuming a module named <ident rend="noindex" type="class">xxx</ident>, the following parameter entities may be
encountered:
 
<list type="gloss"><label>TEI.xxx </label>
<item>used to enable or disable module <ident rend="noindex">xxx</ident>; must have the value <val>INCLUDE</val> (module is enabled) or, by default, <val>IGNORE</val> (module not enabled).
 </item><label>TEI.xxx.ent </label>
<item>refers to a system file containing any
parameter entity declarations unique to module <ident rend="noindex" type="class">xxx</ident>.
 </item><label>TEI.xxx.dtd </label>
<item>refers to a system file containing the element
and attribute list declarations for module <ident rend="noindex" type="class">xxx</ident>.
 </item><label>a.xxx </label>
<item>contains definitions of attributes which are to be
added to the set of global attributes when module <ident rend="noindex" type="class">xxx</ident> is enabled.
 </item><label>m.comp.xxx </label>
<item>a list of any component-level elements
unique to base module <ident rend="noindex" type="class">xxx</ident>
(for a definition of component-level elements, see section <ptr target="#STEC"/>).
 </item><label>mix.xxx </label>
<item>a special entity for use in defining the set of
component-level elements when the mixed base module is in use.
 </item><label>gen.xxx </label>
<item>a special entity for use in defining the set of
component-level elements when the general base module is in use.
 </item></list>
 
Few modules declare all of these entities; only those actually used are
declared.
 </p>
<p>The interpretation of the parameter entity declarations, and the
inclusion of the appropriate modules, are handled by a single
<soCalled>driver file</soCalled> for the main TEI DTD.  This file,
<ident type="file">tei2.dtd</ident>, is described in detail below in
section <ptr target="#STOV"/>.  The remainder of the present section
identifies the files in which each module is contained, and the
parameter entities associated with them.
 </p>
<div3 xml:id="STBACO"><head>The Core Modules</head>
<p>Two <soCalled>core</soCalled> modules are always included in every
invocation of the main TEI DTD.  The tags and attributes that they
contain are therefore available to any TEI document.  The parameter
entities used for this purpose, and the files they refer to, are:
 
<list type="gloss"><label><ident type="pe">core</ident> </label>
<item>refers to the file
<ident type="file">core.dtd</ident>, which declares the core tags
defined in chapter <ptr target="#CO"/>
 </item><label><ident type="pe">header</ident> </label>
<item>refers to the file
<ident type="file">header.dtd</ident>, which declares the tags of the TEI
header defined in chapter <ptr target="#HD"/>
 </item></list>
 
Together with these modules, part II also documents a module for
default text structure and front and back matter.  This module is
embedded by the base module selected, and may vary with the base; it is
therefore described in the next section.
 </p></div3>
<div3 xml:id="STBABA"><head>The Base Modules</head>
<p>The base modules are those which define the basic building blocks of
different text types.  The basic structures of verse (line, stanza,
canto, etc.), for example, are not those of prose (paragraph, section,
chapter, etc.), while dictionaries use yet another set of basic
structures.  Each base corresponds to one chapter of Part III of this
document.
 </p>
<p>In general, exactly one base module must be selected for any
TEI-conformant document.  Errors will result if none, or more than one,
is selected, because the same elements may be differently defined in
different base modules.  For documents which mingle structurally
dissimilar elements and require elements from more than one base,
however, either the <term>mixed base</term> or the <term>general
base</term> may be used; see section <ptr target="#STCO"/>.
  
These bases require the encoder to specify which of the other bases are
to be combined.
</p>
<p>The encoder selects a base module by declaring the appropriate
parameter entity with the replacement text <val>INCLUDE</val>
To invoke the base module for prose, for example, the encoder must
ensure that the DTD subset in the document contains the declaration:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % TEI.prose 'INCLUDE' >]]></egXML>
 </p>
<p>The entities used to select the different base modules, and the
files containing the declarations for each base, are listed below.
 
<list type="gloss"><label><ident type="pe">TEI.prose</ident> </label>
<item>selects the base module
for prose, contained in <ident type="file">prose.dtd</ident>.
  </item><label><ident type="pe">TEI.verse</ident> </label>
<item>selects the base module
for verse, contained in <ident type="file">verse.dtd</ident> and
<ident type="file">verse.ent</ident>.
 </item><label><ident type="pe">TEI.drama</ident> </label>
<item>selects the base module
for drama, contained in <ident type="file">drama.dtd</ident> and <ident type="file">drama.ent</ident>.
 </item><label><ident type="pe">TEI.spoken</ident> </label>
<item>selects the base module
for transcriptions of spoken texts, contained in
<ident type="file">spoken.dtd</ident> and
<ident type="file">spoken.ent</ident>.
 </item><label><ident type="pe">TEI.dictionaries</ident> </label>
<item>selects the base
module for print dictionaries, contained in
<ident type="file">dictionaries.dtd</ident> and
<ident type="file">dictionaries.ent</ident>.
 </item><label><ident type="pe">TEI.terminology</ident> </label>
<item>selects the base tag
set for terminological data files, contained in
<ident type="file">terminology.dtd</ident>,
<ident type="file">terminology.ent</ident>,
<ident type="file">teite2n.dtd</ident>, and
<ident type="file">termflat.ent</ident>.
 </item><label><ident type="pe">TEI.general</ident> </label>
<item>selects the generic
mixed-mode base base module, contained in
<ident type="file">general.dtd</ident>.
  </item><label><ident type="pe">TEI.mixed</ident> </label>
<item>selects the base module
for free mixed-mode texts, contained in
<ident type="file">mixed.dtd</ident>.
  </item></list>
 </p>
<p>As shown in the list, each base module is normally contained in one
or two system files:  a required one (with the extension
<mentioned>dtd</mentioned>) defining the elements in the module and their
attributes, and an optional one (with the file extension
<mentioned>ent</mentioned>) defining any global attributes or specialized
element classes enabled by that module.  The parameter entities for
these files have the same name as the enabling parameter entity for the
base, with the suffixes <mentioned>ent</mentioned> and <mentioned>dtd</mentioned>
respectively:  the verse base, for example, is enabled by declaring the
parameter entity <ident type="pe">TEI.verse</ident> as <val>INCLUDE</val>; this in turn enables declarations of <ident type="pe">verse-decl</ident> and <ident type="pe">verse</ident>
as the system files <ident type="file">verse.ent</ident> and
<ident type="file">verse.dtd</ident>.  For further details, see
section <ptr target="#STOV"/>. </p>
<p>Most base modules (but not necessarily all) embed common definitions
of text structure, front matter, and back matter, by referring to three
standard parameter entities; these are:
 
<list type="gloss"><label><ident type="pe">structure</ident> </label>
<item>refers to the file
<ident type="file">structure.dtd</ident>, with default definitions for
<gi>text</gi>, <gi>div</gi>, etc.
 </item><label><ident type="pe">front</ident> </label>
<item>refers to the file
<ident type="file">frontmatter.dtd</ident>, with tags for front matter
 </item><label><ident type="pe">back</ident> </label>
<item>refers to the file
<ident type="file">backmatter.dtd</ident>, with tags for back matter
 </item></list>
 
These default-structure tags are documented in chapter <ptr target="#DS"/>.
 </p></div3>

<div3 xml:id="STBAAD"><head>The Additional Modules</head>
<p>The additional modules define optional tags required by different
encoders for different types of analysis and processing; each
corresponds to a chapter in part IV of this document.  In any TEI
encoding, any or all of these additional modules may be made available,
as they are all compatible with each other and with every base module.
They are invoked in the same way as base modules, by defining the
appropriate parameter entity as <val>INCLUDE</val>; the
relevant parameter entities, and the files containing the additional tag
sets, are these:
 <!-- filenames are all wrong LB 20 aug 05 -->
<list type="gloss">
<label><ident type="pe">TEI.msdescription</ident> </label>
<item>embeds the files
<ident type="file">msdesc.dtd</ident> and
<ident type="file">msdesc.ent</ident>, used for the detailed
description of manuscript or early print materials (chapter <ptr target="#MS"/>)
 </item><label><ident type="pe">TEI.linking</ident> </label>
<item>embeds the files
<ident type="file">linking.dtd</ident> and
<ident type="file">linking.ent</ident>, with tags for linking,
segmentation, and alignment (chapter <ptr target="#SA"/>)
 </item>
<label><ident type="pe">TEI.analysis</ident> </label>
<item>embeds the files
<ident type="file">analysis.dtd</ident> and
<ident type="file">analysis.ent</ident>,
with tags for simple analytic mechanisms (chapter <ptr target="#AI"/>)
 </item><label><ident type="pe">TEI.fs</ident> </label>
<item>embeds the file
<ident type="file">iso-fs.dtd</ident>,
with tags for feature structure analysis (chapter <ptr target="#FS"/>)
 </item><label><ident type="pe">TEI.certainty</ident> </label>
<item>embeds the file
<ident type="file">certainty2.dtd</ident>,
with tags for indicating uncertainty and
probability in the markup (chapter <ptr target="#CE"/>)
 </item><label><ident type="pe">TEI.transcr</ident> </label>
<item>embeds the files
<ident type="file">transcr.dtd</ident> and
<ident type="file">transcr.ent</ident>,
with tags for manuscripts, analytic bibliography, and transcription of
primary sources (chapter <ptr target="#PH"/>)
 </item><label><ident type="pe">TEI.textcrit</ident> </label>
<item>embeds the files
<ident type="file">teitc2.dtd</ident> and
<ident type="file">teitc2.ent</ident>,
with tags for critical editions (chapter <ptr target="#TC"/>)
 </item><label><ident type="pe">TEI.names.dates</ident> </label>
<item>embeds the files
<ident type="file">namesdates.dtd</ident> and
<ident type="file">namesdates.ent</ident>,
with specialized tags for names and dates (chapter <ptr target="#ND"/>)
 </item><label><ident type="pe">TEI.nets</ident> </label>
<item>embeds the file <ident type="file">nets.dtd</ident>, with tags for graphs, digraphs, trees,
and other networks (chapter <ptr target="#GD"/>) &#x2014; not to be confused
with the graphics markup of <ident type="pe">TEI.figures</ident>
 </item><label><ident type="pe">TEI.figures</ident> </label>
<item>embeds the files
<ident type="file">figures.dtd</ident> and
<ident type="file">figures.ent</ident>,
with tags for graphics, figures,
illustrations, tables, and formulae (chapter <ptr target="#FT"/>) &#x2014; not
to be confused with the graph-theoretic markup of <ident type="pe">TEI.nets</ident>
 </item><label><ident type="pe">TEI.corpus</ident> </label>
<item>embeds the file <ident type="file">corpus.dtd</ident>, with tags for additional tags for
language corpora (chapter <ptr target="#CC"/>)
 </item></list>
 </p>
<p>Like the base modules, the additional modules are each contained in
one or two system files:  a required one (with the file extension
<mentioned>dtd</mentioned>) defining the elements in the module and their
attributes, and an optional one (with the file extension
<mentioned>ent</mentioned>) defining any global attributes or specialized
element classes enabled by that module.  The parameter entities for
these files have the same name as the enabling parameter entity for the
module, with the suffixes <mentioned>ent</mentioned> and <mentioned>dtd</mentioned>
respectively:  the additional module for linking, segmentation, and
alignment, for example, is enabled by declaring the parameter entity
<ident type="pe">TEI.linking</ident> as <val>INCLUDE</val>;
this in turn
enables declarations of <ident type="pe">linking-decl</ident> and
<ident type="pe">linking</ident> as the system files
<ident type="file">linking.ent</ident> and
<ident type="file">linking.dtd</ident>.
 </p></div3>

<div3 xml:id="STBAUS"><head>User-Defined Modules</head>
<p>As described in chapter <ptr target="#MD"/>, users may modify the markup
language defined here by renaming elements, suppressing elements, adding
new elements, or modifying element or attribute-list declarations.  In
general, local modifications will be most conveniently grouped into two
files:  one containing the local modifications to parameter entities
used in the DTDs, and the other containing new or modified
declarations of elements and their attributes.  These files will be
embedded in the TEI DTD if they are associated with the following two
parameter entities:
 
<list type="gloss"><label><ident type="pe">extensions-decl</ident></label>
<item>local modifications to parameter entities</item><label><ident type="pe">extensions</ident></label>
<item>declarations of new elements and modified
declarations for existing elements</item></list>
 </p>
<p>In some cases, users may wish to provide completely new base or
additional modules, to be invoked in the same way as those defined in
this document; such modules should also be divided into
<soCalled>entity files</soCalled> and <soCalled>DTD files</soCalled> in
the same way as the standard modules.  Such modifications should be
undertaken only with a thorough understanding of the interface among
core, base, and additional modules as documented in the final sections
of this chapter; see in particular section <ptr target="#STOVLO"/>.
 </p>
<p>Further recommendations for the creation of user-defined extension or
modification are provided in chapters <ptr target="#MD"/> and <ptr target="#CF"/>.
</p> 	</div3></div2>	

<div2 xml:id="STIN"><head>Invocation of the TEI DTD</head>

<p>A valid TEI XML document (though not a merely well-formed TEI XML
document) must begin with a document type definition (DTD).  Local
systems may allow the DTD to be implicit, but for interchange purposes
it <emph>must</emph> be explicit for both SGML and XML. Because of its
highly modular nature, it may in any case be desirable for the
component parts of the TEI DTD to be made explicit even for local
processing.</p>

<p>The simplest version of the TEI DTD names the main TEI DTD file as
an external file, and specifies a single base module for use in the
document, using the parameter entity names specified in section <ptr target="#STBA"/>.  For example, a document using the base module for
prose will begin with a document type declaration something like this:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
      <!ENTITY % TEI.XML   'INCLUDE' >
      <!ENTITY % TEI.prose 'INCLUDE' >
]>]]></egXML>
 
A document using the base module for drama will define a different
parameter entity:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
      <!ENTITY % TEI.XML   'INCLUDE' >
      <!ENTITY % TEI.drama 'INCLUDE' >
]>]]></egXML></p>
<p>If one or more of the <term>additional modules</term> described in
Part IV are to be used, they are invoked in the same way as the base tag
set.  A document using the base module for prose, with the additional
modules for text criticism and for linking, segmentation, and
alignment, for example, will begin with a document type declaration
something like this:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
      <!ENTITY % TEI.XML      'INCLUDE' >
 
<!-- TEI base module specified here: ... -->
      <!ENTITY % TEI.prose 'INCLUDE' >
 
<!-- TEI additional modules optionally specified here: ... -->
      <!ENTITY % TEI.textcrit 'INCLUDE' >
      <!ENTITY % TEI.linking 'INCLUDE' >
 ]>]]></egXML></p>
<p>If local modifications are used, they may be stored in separate
files and pointed to using the parameter entities <ident type="pe">extensions-decl</ident> and <ident type="pe">extensions</ident>.  If such local modifications are
added to the example just given, this is the result:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
      <!ENTITY % TEI.XML      'INCLUDE' ><!-- Local modifications to the TEI DTD declared here.  They
      will be embedded at an appropriate point in the main
      DTD. ... -->
      <!ENTITY % extensions-decl SYSTEM 'project.ent' >
      <!ENTITY % extensions SYSTEM 'project.dtd' >
 
<!-- TEI base module specified here: ... -->
      <!ENTITY % TEI.prose 'INCLUDE' >
 
<!-- TEI additional modules specified here: ... -->
      <!ENTITY % TEI.textcrit 'INCLUDE' >
      <!ENTITY % TEI.linking 'INCLUDE' >
 ]>]]></egXML>
 
<!-- changed following para to reflect fact that mixed base needed when -->
	<!-- different bases are mixed, not just when prose and verse are needed -->
	<!-- 
<p>If the document has a mixture of different text types (e.g. prose and -->
	<!-- verse) or embeds smaller texts of different text types, one of the -->
	<!-- mixed-type bases must be used.  Their proper invocation is described -->
	<!-- below in section <xref target=STCO>. --></p>
<p>If the document requires tags which are defined in different base
modules (e.g. prose and drama) or embeds smaller texts which use
different base modules, then one of the mixed-type bases must be used.
Their proper invocation is described below in section <ptr target="#STCO"/>.</p></div2>

<div2 xml:id="STCO"><head>Combining TEI Base Modules</head>
<p>The TEI DTD has been designed to simplify the task of choosing an
appropriate set of tags for the text in hand.  The core module includes
tags appropriate to the majority of simple tagging requirements for
prose, verse, and drama, irrespective of the base module chosen.  For
more detailed tagging, the encoder may choose the prose base for prose
texts, the verse base for verse, and so on.</p>
<p>In discussing these base modules elsewhere in these Guidelines, it
is generally assumed for clarity of exposition that a text will fall
into one, not several, of these types.  It is not uncommon, however, for
a text to combine prose and verse, or other forms treated by the TEI as
different bases.  Examples include:
 
<list type="bullets">
<item>when the text is a collection of other texts, which do not all use
the same base:  e.g. an anthology of prose, verse, and drama</item>
<item>when the text contains other smaller, embedded texts:  e.g. a poem
or song included in a prose narrative</item>
<item>when some sections of the text are written in one form, and others
in a different form:  e.g. a novel where some chapters are in prose,
others take the form of dictionary entries, and still others the form of
scenes in a play</item>
<item>when the text moves back and forth among forms not between
sections but within a single section:  e.g. mixed prose-and-verse forms
like many pastorals or like some portions of the Poetic Edda</item></list></p>
<p>The TEI DTD provides the following mechanisms to handle these cases:
 
<list type="bullets">
<item>a definition of a corpus or collection as a series of
<gi>TEI</gi>
documents, sharing a common TEI header (see chapter <ptr target="#CC"/>)</item>
<item>a definition of composite texts which comprise front matter, a
group or several possibly nested groups of collected texts,
themselves possibly composite (see section <ptr target="#DSGRP"/>)</item>
<item>a notion of <term>embedded text</term>
which allows one text to be embedded within another (that is,
<gi>text</gi> is defined as a component-level element, as described
briefly at the conclusion of section <ptr target="#DSGRP"/>)</item></list></p>
<p>Whichever mechanism is adopted, if the whole of the resulting
document is to be parseable by the main TEI DTD it may need to combine
elements from different TEI base modules.  Two special-purpose base
modules are defined for this purpose:
 
<list type="simple">
<item>the <term>general</term> base, which allows different sections of a
text to use different bases, but ensures that each section uses
only one base</item>
<item>the <term>mixed</term> base, which allows chunk- and
inter-level elements from any base to mix within any text division</item></list></p>
<p>When either of these <soCalled>combined</soCalled> bases is used, the
user must specify all of the other bases to be included in the mix as
well as either the general or the mixed base.  This is the only
exception to the general rule that no more than one base module may be
enabled in a TEI document.
 
The following set of declarations for example allows for any mixture of
the low level structural tags defined in the prose, drama and dictionary
base modules:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
   <!ENTITY % TEI.XML   'INCLUDE' >
   <!ENTITY % TEI.mixed 'INCLUDE' >
   <!ENTITY % TEI.prose 'INCLUDE' >
   <!ENTITY % TEI.drama 'INCLUDE' >
   <!ENTITY % TEI.dictionaries 'INCLUDE' >
<!-- Structurally, Moby Dick is not your
    everyday common or garden variety novel ... -->
]>]]></egXML>
 
The following set of declarations has the same effect, but with the
additional restriction that each text division (i.e. each member of the
element class <ident type="class">divn</ident>) must be homogenous with
respect to the mixture of available bases.  Because in a
<soCalled>general</soCalled> base, each <gi>div</gi> of the text may use
a different base, the divisions of the text prefixed by this set of
declarations will each be composed of elements taken solely from one of
the prose, verse, or dictionary base modules:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!DOCTYPE TEI PUBLIC "-//TEI P5//DTD Main Document Type//EN" "tei2.dtd" [
   <!ENTITY % TEI.XML      'INCLUDE' >
   <!ENTITY % TEI.general  'INCLUDE' >
   <!ENTITY % TEI.prose    'INCLUDE' >
   <!ENTITY % TEI.drama    'INCLUDE' >
   <!ENTITY % TEI.dictionaries 'INCLUDE' >
]>]]></egXML>
</p>

</div2>	

<div2 xml:id="STGA"><head>Global Attributes</head>
<p>The following attributes are defined for every TEI element.<note place="foot">More
exactly, these are the attributes of the element class
<ident type="class">global</ident>, to which all elements belong; for
further discussion of attribute classes and ways in which attributes
may be inherited and over-ridden, see section <ptr target="#STECAT"/>.</note>
 
<specList><specDesc key="tei.global" atts="xml:id n xml:lang rend"/></specList>
 </p>
<p>Some modules (e.g. those for terminology, linking, and analysis)
define other global attributes; these are documented in the appropriate
chapters of Part III and Part IV.  See also section <ptr target="#STECAT"/>.
 </p>
<p>An additional attribute, <att>TEIform</att>, is also defined
for every TEI element.  Unlike the other attributes defined for every
element, <att>TEIform</att> is not defined by class <ident type="class">global</ident> because its default value is different in
every case and must be defined individually for each element.<note place="foot">A dummy element class <ident type="class">TEIform</ident> is
defined in the reference section, solely for documentary purposes.</note>
 
<specList><specDesc key="tei.TEIform" atts="TEIform"/></specList>
 </p>
<p>Any TEI element may be given values for <att>xml:id</att>, <att>n</att>,
<att>xml:lang</att>, <att>rend</att>, or <att>TEIform</att>, simply by
specifying values for these attributes.
 
<!-- not sure if this is not too obvious here, but left it in for now -->
 
The following two examples convey the same information about the text:
that the material transcribed occurs within a <gi>p</gi> element
(paragraph).  They differ only in that the second provides an identifier
for the paragraph, to which other elements (e.g. notes or hypertext
links) can conveniently refer.
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p>If to do were as easy as to know what were
good to do, chapels had been churches and poor men's cottages
princes' palaces.  It is a good divine that follows his own
instructions ...</p></egXML>
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p xml:id="mv1.2.5">If to do were as easy as to know what were
good to do, chapels had been churches and poor men's cottages
princes' palaces.  It is a good divine that follows his own
instructions ...</p></egXML>
<!-- Merchant of Venice, I.ii, speech 5 (Portia)              -->
</p>
  <p>The values of <att>xml:id</att> attributes must be legal
	<ident>names</ident> with respect to the SGML declaration in
	force. For XML documents this means that an <att>xml:id</att> value
	must begin with a letter (as defined in the World Wide Web
	Consortium's XML Recommendation) or the underscore charcter
	(<q>_</q>), and contain no characters other than letters, digits,
	hyphens, underscores, full
	stops, and certain combining and extension characters.<note place="foot">The colon is also by default a
	valid name character; however, it is reserved for a specific
	purpose in XML (to indicate namespace prefixes), and is not
	therefore generally recommended by these Guidelines, for
	compatability reasons.</note></p>
  <p>For SGML documents this means that by default they must begin
	with a letter (from A to Z or a to z) and contain no characters
	other than letters, digits 0 to 9, full stop, and hyphen. By
	default, i.e. using the TEI-supplied SGML declaration, SGML names
	must be 32 or fewer characters long.</p>
  <p>Furthermore, by default upper and lower case letters are not
	distinguished in SGML names: thus, the strings
	<mentioned>a23</mentioned> and <mentioned>A23</mentioned> are
	identical, and may not be used to identify two distinct
	elements. This may (and perhaps should) be changed in the SGML
	declaration.</p>
  <p>In XML names (and thus the values of <att>xml:id</att> in an XML TEI
	document) upper and lower case letters are distinguished, and
	thus <mentioned>partTime</mentioned> and
	<mentioned>parttime</mentioned> are two distinctly different
	names, and could (perhaps unwisely) be used to denote two
	different element types. This cannot be changed.</p>
  <p>If two elements are given the same identifier, the parser will
	signal a syntax error. The following example, therefore, is
	<emph>not</emph> valid:
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p xml:id="PAGE1"><q>What's it going to be then, eh?</q></p>
<p xml:id="PAGE2">There was me, that is Alex, and my three droogs,
that is Pete, Georgie, and Dim, ... </p></egXML>
<!-- Clockwork Orange, opening -->
</p>
<p>For a discussion of methods of providing unique identifiers for
elements, see section <ptr target="#CORS2"/>.</p>
<p>The <att>n</att> attribute allows identifying information (e.g.
chapter numbers, etc.) to be encoded even if it would not be a legal
<att>xml:id</att> value.  Its value may be any string of characters;
typically it is a number or other similar enumerator or label.  For
example, the numbers given to the items of a numbered list may be
recorded with the <att>n</att> attribute; this would make it possible to
record errors in the numeration of the original, as in this list of
chapters, transcribed from a faulty original in which the number 10 is
used twice, and 11 is omitted:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><list type="ordered">
  <item n="1">About These Guidelines</item>
  <item n="2">A Gentle Introduction to SGML</item>
  
  <item n="9">Verse</item>
  <item n="10">Drama</item>
  <item n="10">Spoken Materials </item>
  <item n="12">Printed Dictionaries</item>
  
</list></egXML>
 
The <att>n</att> attribute may also be used to record non-unique names
associated with elements in a text, possibly together with a unique
identifier as in the following example start-tags:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><div type='chap' n='One' xml:id='TXT0101'/></egXML>
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><div type='stanza' n='xlii'/></egXML>
 </p>
<p>The <att>xml:lang</att> attribute indicates the language, writing system,
and character set associated with a given element and all its contents.
If it is not specified, the value is inherited from that of the
immediately enclosing element.  As a rule, therefore, it is simplest to
specify the base language of the text on the <gi>TEI</gi> element, and
allow most elements to take the default value for <att>xml:lang</att>; the
language of an element then need be explicitly specified only for
elements in languages other than the base language.
 </p>
<p>The following two encodings convey the same information about the
language of the text, since in the first the <att>xml:lang</att> attributes
on the <gi>emph</gi> elements specify the same value as that on the
parent <gi>p</gi> element, while in the second they inherit that value
without specifying it.
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p xml:lang="en"> ... Both parties deprecated war, but one of
 them would <emph xml:lang="en">make</emph> war rather than let
 the nation survive, and the other would <emph xml:lang="en">accept
 </emph> war rather than let it perish, and the war came.</p></egXML>
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p xml:lang="en"> ... Both parties deprecated war, but one of
 them would <emph>make</emph> war rather than let
 the nation survive, and the other would <emph>accept</emph>
 war rather than let it perish, and the war came.</p></egXML>
 
<!-- Lincoln's Second Inaugural Address, 4 March 1865, rpt.   -->
	<!-- (from Richardson, ed., Messages and Papers, 6:276ff) in  -->
	<!-- H. S. Commager, ed., Documents of American History, 5th  -->
	<!-- ed.  (New York:  Appleton-Century-Crofts, 1949), p.      -->
	<!-- 442.                                                     -->
 </p>
<p>In the following example, by contrast, the <att>xml:lang</att> attribute
on the <gi>term</gi> element must be given if we wish to record the fact
that the technical terms used are Latin rather than English; no
<att>xml:lang</att> attribute is needed on the <gi>q</gi> element, by
contrast, because it is in the same language as its parent.  It is
strongly recommended that all language shifts in the source be
explicitly identified by use of the <att>xml:lang</att> attribute, as
described in chapter <ptr target="#CH"/>.
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p xml:lang="en">The constitution declares <q>that no bill of attainder
or <term xml:lang="la">ex post facto</term> law shall be passed.</q> ... </p></egXML>
 
<!-- Marbury v. Madison, 1 Cranch, 137 (1803), rpt. in H. S.  -->
	<!-- Commager, ed., Documents of American History, 5th ed.    -->
	<!-- (New York:  Appleton-Century-Crofts, 1949), p. 192.      -->
</p>
<p>If it is useful to supply more details about a particular language
than can be gleaned by its RFC 3066 language code alone, or if a
private use code is used (i.e., a code that begins with <code>x-</code>),
further information should be supplied in a <gi>language</gi>, which is  defined in
section <ptr target="#HD41"/>. The RFC 3066
language code for the language in question should be specified on the
<att>ident</att> attribute of the <gi>language</gi> element —
this allows processing software, by matching values of
<att>xml:lang</att> against the values of the <att>ident</att>
attribute of <gi>language</gi>, to form a mapping between the
description of a language and occurences of it.</p>
<p>The <att>rend</att> attribute is used to give information about the
physical presentation of the text in the source.  In the following
example, it is used to indicate that both the emphasized word and the
proper name are printed in italics:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><p> ... Their motives <emph rend="italics">might</emph> be
 pure and pious; but he was equally alarmed by his knowledge
 of the ambitious <name rend="italics">Bohemond</name>, and
 his ignorance of the Transalpine chiefs: ...</p></egXML>
 
<!-- Gibbon, Decline and Fall, chapter 58, para beginning     -->
	<!-- 'In some Oriental tale I have read ...', p. 391 of       -->
	<!-- Britannica edition.                                      -->
	<!--  ... played fast and loose with by LB for pedagogic purposes -->
	<!-- Shame, shame.                                            -->
 
If all or most <gi>emph</gi> and <gi>name</gi> elements are rendered in
the text by italics, it will be more convenient to register that fact in
the TEI header once and for all and specify a <att>rend</att> value
only for any elements which deviate from the usual rendition.
 </p>
<p>The contents of the <att>rend</att> attribute are free text.  In any
given project, encoders are advised to settle on a standard vocabulary
with which to describe typographic or manuscript rendition of the text,
and to document their usage of that vocabulary in the <gi>rendition</gi>
element of the TEI header. </p>
<p>The <att>TEIform</att> attribute is used to allow application
programs to handle TEI-encoded documents correctly even if some or all
elements have been renamed.  Most users can ignore this attribute
entirely; it is only relevant when the TEI DTDs are modified.<note place="foot">The <att>TEIform</att> attribute is based on the notion of
<term>architectural forms</term> developed for HyTime (ISO 10744).</note>
</p>
<p>The default value of <att>TEIform</att> for any element is the
generic identifier of that element, as described in this document.  The
value for <gi>p</gi> is <mentioned>p</mentioned>, the value for <gi>div1</gi> is
<mentioned>div1</mentioned>, etc.  When elements are renamed, as described in
chapter <ptr target="#MD"/>, the declaration of <att>TEIform</att> is not
modified.  If <gi>div1</gi> is renamed <gi>chapter</gi>, for
example, the default value of <att>TEIform</att> remains
<mentioned>div1</mentioned>.  An application program which does not recognize
the new generic identifier can check to see whether the attribute
<att>TEIform</att> exists, and examine its value if it does to find out
which TEI element, if any, is being used.
 </p>
<p>Modifications of DTDs, however, may involve more than simple renaming
of elements:  sometimes elements are given not just new names, but
complete new definitions.  In such cases, the <att>TEIform</att>
attribute may be used to indicate the standard TEI element
corresponding to the modified element.  For example, if a local
modification of a DTD renamed the <gi>div1</gi> element as <gi>chapter</gi> and also modified its formal declarations (e.g. to
change its content model), then the <att>TEIform</att> attribute on the
modified element should be given the default value <val>div1</val>, in order to indicate that the local <gi>chapter</gi> element is a modification of the standard TEI
<gi>div1</gi>.
 </p>
<p>When new elements are introduced, they may be identified as
specialized variants of existing TEI elements by giving them the
appropriate default value for <att>TEIform</att>.  For example, if a
local element called <gi>quatrain</gi> were introduced, as a
specialized variant of the <gi>lg</gi> (line group) element which must
contain exactly four lines, then its declaration might give its
<att>TEIform</att> as <val>lg</val>, to signify that a
quatrain is a particular type of line group, thus:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ELEMENT quatrain (l, l, l, l)            >
<!ATTLIST quatrain      %a.global;
          TEIform       (lg)            'lg'    >]]></egXML>
 
 </p>

<p>The formal definition of the global attributes is as follows.</p>

<specGrp xml:id="DSTGA" n="Global attributes">
<p>The global
attributes are defined for every element in the TEI module;
individual declarations may be overridden by local declarations for
individual elements. If the modules invoked by
the user define extra global attributes (they do this in their .ent
file), then they are inherited by GLOBAL; otherwise the parameter
entities referred to expand to the empty string, as shown here.
</p>




&global.odd;



    <p>The TEIform attribute is also global, but is declared
individually for each element, not in a parameter entity
declaration.</p>
</specGrp>	
	
</div2>

<div2 xml:id="STOV"><head>The TEI2.DTD File</head>
<p>All TEI-encoded documents use the same top-level DTD file, which
refers to a number of other DTD files, the exact set of other files
referred to depending on which base and which additional tagsets are in
use.  The remainder of this chapter describes in some detail the
organization and function of this file and those it embeds; it is
necessarily of a rather technical and specialized nature.</p>

<p>The main TEI DTD is always invoked by specifying the file
<ident type="file">tei2.dtd</ident>.  This file:
 
<list type="ordered">
<item>takes care of certain necessary preliminaries:
 <list type="ordered">
<item>embeds any locally defined changes to the standard TEI
parameter entities, so that local modifications can take precedence
over default declarations;</item>
<item>declares TEI-specific keywords used in other declarations and
declares default values of <val>IGNORE</val> for all the
parameter entities used to select base and additional modules (see
section <ptr target="#STPEKW"/>);</item>
<item>declares parameter entities for TEI generic identifiers (by
embedding the file <ident type="file">teigis2.ent</ident>;
see section <ptr target="#STPEGI"/>);</item><item>declares parameter entities used to control whether the target
DTD should be in SGML or XML (see section <ptr target="#STXML"/>).
</item>
</list></item><item>declares parameter entities for element classes, content models,
and global attributes (by embedding <ident type="file">teiclasses.ent</ident>; see section <ptr target="#STECOV"/>);</item>
<item>declares the top-level elements <gi>TEI</gi> and
<gi>teiCorpus</gi>;</item>
<item>embeds DTD files containing local modifications (if any),
the core modules, the base module, and the additional modules.</item></list></p>
<div3 xml:id="STOVOV"><head>Structure of the TEI2.DTD File</head>

<p>Each parameter entity associated with a module controls several
marked sections in the main DTD file <ident type="file">tei2.dtd</ident>.  If the entity has been declared in the
DTD subset with the text <val>INCLUDE</val>, then the
marked sections it controls will be parsed; otherwise, they will be
ignored.  The marked sections controlled by each entity:
 
<list type="ordered">
<item>declare and refer to the entity file for the module,
which defines its global attributes and element classes;</item>
<item>declare and refer to the DTD file for the module,
which defines its elements and their attributes;</item>
<item>declare the parameter entity <ident type="pe">macro.component</ident> in
a form suitable for texts using that base.</item></list></p>

<p>The main TEI module has the following
structure.</p>
 
<moduleSpec xml:id="DSTTEI2" type="core" ident="tei">
<altIdent type="FPI">Main document type declaration
file</altIdent>
<desc>Structural declarations for the TEI</desc>
</moduleSpec>
  <p>This file first defines some useful entities, then defines the
  element TEI and includes files with the various specialized parts of
  the document type declaration. 

  I.  Preliminaries.
  
  Embed any local modifications to TEI entities.
  </p>
  <specGrpRef target="#DSTOVLE"/>

  <p>II. Define element classes for content models, shared
  attributes for element classes, global attributes, entities for TEI keywords,
  entities for TEI generic identifiers.  </p>

  <specGrpRef target="#DSTECOV"/>
  
  <p>III.  Embed the core modules, the
  (single) base module, and the (optional) additional modules specified
  by the user.
  </p>
  <specGrpRef target="#DSTOVLO"/>
  <specGrpRef target="#DSTOVAD"/>



<p>A TEI-conformant document <emph>must</emph> use the <ident type="file">tei2.dtd</ident> file, or one derived from it in the manner
described in chapter <ptr target="#MD"/>.
It must also specify which base and
which additional modules are to be invoked, using the mechanisms
described in section <ptr target="#STIN"/>.</p>

<p>Define the top-level TEI elements:  one for individual
texts, one for composites with a collective header.
The <gi>TEI</gi> and <gi>teiCorpus</gi>
elements are formally declared as follows:
<specGrp xml:id="DCOTOPELEMENTS" n="TEI2">




&tei2.odd;






&teicorp2.odd;



</specGrp>
</p></div3>

<div3 xml:id="STOVLO"><head>Embedding Local Modifications</head>
<p>As noted above in section <ptr target="#STBAUS"/>, local modifications
to the DTD are most conveniently grouped into two files, one containing
modifications to the TEI parameter entities, and the other new or
changed declarations of elements and their attributes.  These files
should be associated with the parameter entities
<ident type="pe">extensions-decl</ident> and
<ident type="pe">extensions</ident> by declarations included in
the document's DTD subset.</p>
<p>For example, if the relevant files are called <ident rend="noindex" type="file">project.ent</ident> and <ident rend="noindex" type="file">project.dtd</ident>, then declarations like the following
would be appropriate:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % extensions-decl SYSTEM 'project.ent' >
<!ENTITY % extensions SYSTEM 'project.dtd' >]]></egXML></p>
<p>When an entity is declared more than once, the first declaration
is binding and the others are ignored.  The local modifications to
parameter entities should therefore be handled before the standard
parameter entities themselves are declared in <ident type="file">tei2.dtd</ident>.  The entity <ident type="pe">extensions-decl</ident> is referred to before any TEI
declarations are handled, to allow the user's declarations to take
priority.  If the user does not provide a <ident type="pe">extensions-decl</ident> entity, the entity will be expanded
to the empty string.</p>
<p>For example the encoder might wish to add two phrase-level elements
<gi>it</gi> and <gi>bd</gi>, perhaps as synonyms for
<tag>hi rend='italics'</tag> and <tag>hi rend='bold'</tag>.  As
described in chapter <ptr target="#MD"/>, this involves two distinct steps:
one to define the new elements, and the other to ensure that they are
placed into the TEI document structure at the right place.  We deal with
the second first, by specifying the element class to which the new
elements should be attached.  To do this, the standard parameter entity
<ident type="pe">x.phrase</ident> should be modified to include the two
new generic identifiers.  The file containing local declarations of the
standard parameter entities will thus contain a declaration of the
following form:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % x.phrase 'it | bd |' >]]></egXML></p>
<p>The relevant fragment of the DTD is this:
 
<specGrp xml:id="DSTOVLE" n="Local modifications to parameter entities">
<p>Embed local modifications to TEI parameter entities.  Declare
entity as empty string first, in case user has no mods and has not
declared it.</p>



&teiexte.odd;



</specGrp></p>
<p>The second type of modification needed is most conveniently performed
after all the standard TEI parameter entities have been declared; this
allows the element declarations provided by the user to make use of the
parameter entities which define standard TEI content models and
attribute definitions.  To facilitate this, the parameter entity
<ident type="pe">extensions</ident> is used to embed local element
declarations <emph>before</emph> any of the TEI modules are embedded by
the file <ident type="file">tei2.dtd</ident>, but <emph>after</emph> all
the TEI element classes and other parameter entities have been declared.</p>
<p>The task of declaring the non-standard <gi>it</gi> and <gi>bd</gi> elements is thus simplified:  they can, for example, use
the same parameter entities as the <gi>hi</gi> element.  A suitable
local DTD-modifications file might look like the following (note that
the standard parameter-entitity reference for phrase sequence is used):
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ELEMENT it            (%macro.phraseSeq;)                         >
<!ATTLIST it
          id                ID             #IMPLIED
          lang              IDREF          %INHERITED;
          n                 CDATA          #IMPLIED
          rend              CDATA          #FIXED 'italics'    
          TEIform           CDATA          "hi"                >
<!ELEMENT bd            (%macro.phraseSeq;)                         >
<!ATTLIST bd
          id                ID             #IMPLIED
          lang              IDREF          %INHERITED;
          n                 CDATA          #IMPLIED
          rend              CDATA          #FIXED 'boldface'   
          TEIform           CDATA          "hi"                >]]></egXML></p>
<p>For further examples of local modifications to both parameter
entities and element declarations, see chapter <ptr target="#MD"/>.</p>
<p>The relevant fragment of the DTD is this:
<specGrp xml:id="DSTOVLO" n="Embed local element declarations, etc."><p>Embedding local modifications here allows user modifications
to use all the standard TEI element classes and parameter entities.</p>



&teiextd.odd;



</specGrp></p></div3>
<div3 xml:id="STOVCO"><head>Embedding the Core Modules</head>
<p>Because all TEI identifiers are referred to indirectly, every
TEI application must first embed declarations  for the entities
holding their names. This is carried out by the following DTD
fragment:</p>

<specGrp xml:id="DSTGIS" n="Define TEI generic identifiers">

&teigis.odd;

</specGrp>

<p>The default text structure tags, which are also documented as part of
the core, are embedded by the base module, unless the base defines its
own text structure tags; see the chapters on the individual bases.</p></div3>

<div3 xml:id="STOVBA"><head>Embedding the Base Module</head>

<p>The <ident type="file">tei2.dtd</ident> file embeds the appropriate
files for the base module previously selected by means of the
parameter entities described in section <ptr target="#STBA"/>.  A
parameter entity for the file containing the relevant module is
declared and referred to inside a conditional marked section
controlled by the appropriate parameter entity.  </p></div3>

<div3 xml:id="STOVAD"><head>Embedding the Additional Modules</head>
<p>The <ident type="file">tei2.dtd</ident> file embeds the appropriate
files for any additional base module previously enabled by means of the
parameter entities described in section <ptr target="#STBA"/>.  A parameter
entity for the file containing the relevant module is declared and
referred to, inside a conditional marked section controlled by the
appropriate parameter entity.  The relevant fragment of <ident type="file">tei2.dtd</ident> is this:
</p>

<specGrp xml:id="DSTOVAD" n="Embed additional modules"><p>These entities are declared and embedded only when the user
has overridden the default declaration of IGNORE for a specific
additional module.</p>
</specGrp>
</div3></div2>
<div2 xml:id="STEC"><head>Element Classes</head>
<p>The TEI DTD contains over four hundred element types.  To aid
comprehension, modularity and modification, the majority of these
elements are formally classified in some way.  This section describes
the various <term>element classes</term> recognized in the TEI DTD.
Element classes are used to express two distinct kinds of commonality
among elements.  The elements of a class may share some set of
attributes, or they may appear in the same locations in the content
models of the TEI DTDs, or both.  A class is known as an
<term>a-class</term> if its members share attributes, and as an
<term>m-class</term> if its members appear at the same locations in the
content models of other TEI elements.  An element is said to
<term>inherit</term> attributes, or the ability to appear at a given
point in a document, from any classes of which it is a member.  Classes
may have subclasses and superclasses, and the characteristics of a
superclass are inherited by all members of its subclasses.
 </p>
<p>Both types of element classes are represented in the TEI DTDs by
parameter entities.  For other uses of parameter entities in the TEI
DTDs, see section <ptr target="#STPE"/>.
 </p>
<p>This section describes the major element classes of each type
together with the formal declarations for their parameter entities,
which are contained in the file <ident type="file">teiclasses.ent</ident>.
All element classes are documented in the alphabetical reference section
in Part VII.
 </p>
<div3 xml:id="STECAT"><head>Classes Which Share Attributes</head>
<p>An attribute class (a-class) groups together elements which share
some set of common attributes.  For example, the members of the class
<ident type="class">names</ident> are all elements which contain proper
nouns: e.g.  <gi>name</gi>, <gi>placeName</gi>, or <gi>persName</gi>.
All of these elements use the same attributes (<att>key</att> and
<att>reg</att>) to record information about the referent or the
regularized form of the proper nouns.  Similarly, the members of the
<ident type="class">pointer</ident> class share a set of attributes
useful for managing cross-reference links and other pointers.<note place="foot">Because the details of their pointing mechanism differ, the
members of the <ident type="class">pointer</ident> class do not,
however, share their pointing attributes.</note>
 </p>
<p>The attributes shared by the members of an a-class are defined in a
parameter entity; member elements inherit the attributes by referring to
the parameter entity within their attribute-list declaration (examples
below).  This practice helps ensure that if the attribute definitions
for the class change, all members of the class will automatically
inherit the new definitions.  Parameter entities used for this purpose
form their names by taking the name of the class they define and
prefixing the string <mentioned>a.</mentioned>; we refer to these entities as
<term>a-dot entities.</term>
 </p><p>For example, the declaration for the <ident type="class">names</ident>
class includes attribute definitions for its two attributes
<att>reg</att> and <att>key</att>:
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % attributes.class.names '
      key  CDATA #IMPLIED
      reg  CDATA #IMPLIED'> 
]]></egXML> 
 
Members of the class typically inherit these definitions by referring to
<ident type="class">a.names</ident>:<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % name 'INCLUDE' >
<!ELEMENT %n.name; %om.RR;  %phrase.seq;> 
<!ATTLIST %n.name;
      %a.global;
      %a.names;
      type CDATA #IMPLIED
      TEIform CDATA 'name'  >
]]></egXML>
 </p>
<p>Subclasses of a-classes inherit the attributes of their superclass
similarly, by referring to the a-dot entity of the superclass in
defining their own a-dot entity.  </p>
<p>The a-classes declared in the core modules of these Guidelines are:
<list type="gloss"><label><ident type="class">declaring</ident> </label>
<item>elements which have a
<att>decls</att> attribute for specifying which declarations in the
header apply to the element, as described in section <ptr target="#CCAS"/>
 </item><label><ident type="class">declarable</ident> </label>
<item>header elements
containing declarations, which can be pointed at by the <att>decls</att>
attribute, as described in section <ptr target="#CCAS"/>
 </item><label><ident type="class">divn</ident> </label>
<item>structural elements which
behave in the same way as divisions, as described in section <ptr target="#DSDIV"/>
 </item><label><ident type="class">enjamb</ident> </label>
<item>elements which carry the
<att>enjamb</att> attribute for indicating metrical enjambement
 </item><label><ident type="class">interpret</ident> </label>
<item>elements which contain
overtly interpretive or extra-textual analysis or commentary on a text
or some portion of it
 </item><label><ident type="class">metrical</ident> </label>
<item>elements which carry
metrical information (metrical pattern, realization of the pattern,
rhyme)
 </item><label><ident type="class">names</ident> </label>
<item>elements which contain
proper nouns and share attributes for identifying their referents and
regularizing their spelling (section <ptr target="#CONARS"/>)
 </item><label><ident type="class">personPart</ident> </label>
<item>elements which contain
personal names or parts of them
 </item><label><ident type="class">placePart</ident> </label>
<item>elements which contain
place names or parts of them
 </item><label><ident type="class">pointer</ident> </label>
<item>elements which point from
one location in the document to another (section <ptr target="#COXR"/>)
 </item><label><ident type="class">seg</ident> </label>
<item>elements for the systematic
or arbitrary segmentation of the text
 </item><label><ident type="class">temporalExpr</ident> </label>
<item>elements which
contain temporal expressions
 </item><label><ident type="class">timed</ident> </label>
<item>elements (in the base tag
set for spoken texts) which have a duration in time expressible with the
attributes, as described in section <ptr target="#TSBATI"/>
</item><label><ident type="class">typed</ident> </label>
<item>elements which carry
an additional semantic or functional classification
 </item>
 </list>
 </p>
<p>All elements are considered members of the class <ident type="class">global</ident> and thus include a reference to <ident type="pe">a.global;</ident> in their attribute definition list
declaration.  Some modules add specialized attributes to the set of
global attributes; these additions are declared in the
<soCalled>ent</soCalled> file of each module, using the following
entity names.  If the module does not define new global attributes, no
entity of this type is declared.
 
<list type="gloss">	
	
<label><ident type="pe">a.analysis</ident> </label>
<item>additional global
attributes for the analysis module
 </item><label><ident type="pe">a.linking</ident> </label>
<item>additional global
attributes for the linking module
 </item><label><ident type="pe">a.terminology</ident> </label>
<item>additional global
attributes for the terminology base
 </item></list>
 </p>

<p>These entities are included in the <ident type="file">teiclasses.ent</ident> file indirectly, when the
entity-declaration files of each module are embedded, as shown below
in section <ptr target="#STECMK"/>.  For purposes of documentation,
these attributes are treated as if inherited by the class <ident type="class">global</ident> from superclasses called <ident type="class">terminology</ident>, etc., and are documented under the
class name.

<specGrp xml:id="DSTECAT" n="Attribute classes">
&decling.odd;
&declabl.odd;
&typed.odd;
&clinterp.odd;
&divn.odd;
&names.odd;
&naming.odd;
&clseg.odd;
&timed.odd;
<!-- the following classes are not yet documented -->
&spanning.odd;
&intervention.odd;
&ascribed.odd;
</specGrp></p>
</div3>

<div3 xml:id="STECCM"><head>Classes Used in Content Models</head>
<p>When the members of a class are structurally similar and can appear
at the same kinds of structural locations in the document, they are
grouped together into an m-class (or
<soCalled>model-class</soCalled>).  M-classes are implemented by
defining a parameter entity for use in the formal declaration of element
content models.  The parameter entity takes the name of the class it
defines, and prefixes the string <mentioned>m.</mentioned>, which can be
interpreted as <gloss>model</gloss> or as <gloss>members</gloss>.  The
replacement text of the entity is a list of the members of the class,
separated by <mentioned>|</mentioned>, the content model symbol for alternation.
 </p>
<p>For each class an additional entity is defined, which also takes the
name of the class, this time prefixed by the string <mentioned>x.</mentioned>
(for extension); the default value of these <term>x-dot entities</term>
is always an empty string.  A reference to the corresponding x-dot
entity is always included within the replacement string for each m-dot
entity.  This enables an encoder to add new members to a class simply by
declaring a new value for an x-dot entity.
 </p>
<p>For example, the class <ident type="class">bibl</ident> has the three
members <gi>bibl</gi>, <gi>biblFull</gi>, and <gi>biblStruct</gi>.
Its content-model entity is defined thus:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % x.bibl '' >
<!ENTITY % tei.bibl '%x.bibl; bibl | biblFull | biblStruct' >]]></egXML>
 
With the default value of the x-dot entity, this is the same as defining
<ident type="pe">tei.bibl</ident> with the replacement text <code>bibl | biblFull | biblStruct</code>.  If an encoder wishes
to add a new bibliographic element called <gi>my.bib</gi>, it can
be added to the <ident type="class">bibl</ident> class by redefining the
x-dot entity thus:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % x.bibl 'my.bib |' >]]></egXML>
 
This changes the replacement text of <ident type="pe">tei.bibl</ident> from
its default value to <code>my.bib | bibl | biblFull |
biblStruct</code>.  If more than one element is to be added to a class,
the x-dot entity for the class should be redefined as a list of the new
generic identifiers, each one <emph>(including the last)</emph> followed
by a vertical bar.  The same effect could be achieved simply by
redefining the whole of the new <ident type="pe">tei.bibl</ident> entity
directly, but the x-dot method requires no repetition of the already
existing members of the class and thus minimizes the chance of error.
 </p>
<p>Like a-classes, m-classes may have subclasses or superclasses.  Just
as elements inherit from a class the ability to appear in certain
locations of a document (wherever the class can appear), so all members
of a subclass inherit the ability to appear wherever any superclass can
appear.  Superclasses transmit their location characteristics to their
subclasses by referring, in declaring their m-dot entity, to the m-dot
entities of the subclasses.
 </p>
<p>For example, the class <ident type="class">phrase</ident> includes the
classes <ident type="class">data</ident>, <ident type="class">edit</ident>,
<ident type="class">hqphrase</ident>, <ident type="class">loc</ident>, and
<ident type="class">seg</ident> as members, as can be seen in the
declaration for its m-dot entity:
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % class.phrase "%x.class.phrase; %class.data; | %class.edit;
 | %class.formPointers; | %class.hqphrase; | %class.loc; 
 | %class.oddPhr; | %class.phrase.verse; | %class.seg; | %n.formula; 
 | %n.handShift;">]]></egXML>
 When the entity <ident type="pe">tei.phrase</ident> is referred to in
content models, all members of all subclasses are included in the model.
 </p></div3>
<div3 xml:id="STECOV"><head>The TEICLAS2.ENT File</head>
<p>The most important element classes used in TEI content models are
declared in the DTD file <ident type="file">teiclasses.ent</ident>, which
is the default replacement text for the entity <ident type="pe">teiclasses</ident> and is embedded by the <ident type="file">tei2.dtd</ident> file.  These element classes are described,
and their declarations reproduced, in the following sections.
 </p>
<p>The class system is structured around the following threefold
division of elements:
 
<list type="gloss"><label><term>chunks</term> </label>
<item>elements such as paragraphs and other
paragraph-level elements, which can appear directly within texts or
within text subdivisions (i.e. <gi>div</gi> elements), but not within
other chunks</item><label><term>phrase-level elements</term> </label>
<item>elements such as
highlighted phrases, book titles, or editorial corrections which can
occur only within chunks (paragraphs or paragraph-level elements), but
not between them (and thus cannot appear directly within a
<gi>div</gi>)<note place="foot">Note that in this context, <term>phrase</term> means
any string of characters, and can apply to individual words, parts of
words, and groups of words indifferently; it does not refer only to
linguistically motivated phrasal units.  This may cause confusion for
readers accustomed to applying the word in a more restrictive sense.</note></item>
<label><term>inter-level elements</term></label>
<item>elements such as lists,
notes, quotations, etc. which can appear either between chunks (as
children of a <gi>div</gi>) or within them</item></list>
 </p>
<p>Together the two sets of <term>chunks</term> and <term>inter-level
elements</term> make up the set of:
<list type="gloss"><label><term>text components</term> </label>
<item>elements which can appear
directly within texts or text divisions; also called simply
<term>components</term> or <soCalled>component-level elements</soCalled></item></list>
In general, the body of any text comprises a series of components,
optionally grouped into <gi>div</gi> elements.
 </p>
<p>Some elements belong to none of these classes; these include
high-level structural elements like <gi>TEI</gi> and
<gi>group</gi> as well as some specialized elements which appear only
within particular structures (like <gi>analytic</gi>,
<gi>monographic</gi>, and <gi>series</gi>).  The majority of elements
found in normal running text, however, are assigned by the TEI DTDs to
one or the other of these classes.
 </p>
<p>Some <term>macro.component</term> elements (e.g. <gi>p</gi> or
<gi>note</gi>) are common to all base modules, while others are unique
to individual modules.  This distinction is reflected in the parameter
entity declarations, as shown below.
 </p>
<p>The <ident type="file">teiclasses.ent</ident> file has the following
overall structure:
 
<specGrp xml:id="DSTECOV">
  <p>Define the default for each base and additional
  module as 'IGNORE', and initialising the tag omissibility indicator
  entities, depending on the value of TEI.XML
  </p>
  <specGrpRef target="#DSTKEYS"/>

   <specGrpRef target="#DSTGIS"/>

<p>Now we can declare the 'low-level' core classes:
these are classes of semantically and structurally similar elements
declared as part of the core module, e.g. the classes 'data' or
'edit'.</p>
<specGrpRef target="#DSTECLO"/>
<specGrpRef target="#DSTECMI"/>
<p>Next, we declare the 'high-level' classes: these group
together all phrase-level elements, all inter-level elements, and all
chunk-level elements in the core, and identify the 'common' component
elements (chunks and inter-level elements), as opposed to the
tagset-specific components.</p>
<specGrpRef target="#DSTECHI"/>
<p>Next, we embed the portions of each base and additional tag
set which declare relevant parameter entities. Only those files are
embedded which have been selected by the user in the DTD subset. These
files will declare parameter entities for their component-level
elements, as well as for any global attributes they define.</p>
<!-- <specGrpRef target="#DSTECMK"/>-->
<p>We can now declare the standard content models; one of these
varies with the base selected.</p>
<specGrpRef target="#DSTECST"/>
<p>Finally, we declare the attribute classes, including
the global attributes.</p>
<specGrpRef target="#DSTECAT"/>
<specGrpRef target="#DSTGA"/>
</specGrp>
</p>
</div3>
<div3 xml:id="STECLO"><head>Low-Level Element Classes</head>
<p>The following low-level classes group together sets of semantically
or structurally similar elements.  These classes may include both
elements in the core and elements declared in particular modules; a
reference is given at least to the relevant section on the core tags.
 </p>
<p>The following are phrase-level element classes:
 
<list type="gloss"><label><ident type="class">hqphrase</ident> </label>
<item>elements for highlighted
phrases or material marked by quotation marks, including those defined
in section <ptr target="#COHQ"/>
 </item><label><ident type="class">data</ident> </label>
<item>elements for recording
information about the referents of a text, including those defined in
section <ptr target="#CONA"/>
 </item><label><ident type="class">date</ident> </label>
<item>elements for recording
dates, including those defined in
section <ptr target="#CONADA"/>
 </item><label><ident type="class">edit</ident> </label>
<item>elements for recording
simple editorial interventions in a text, including those defined in
section <ptr target="#COED"/>
 </item><label><ident type="class">loc</ident> </label>
<item>elements for recording
location information in a text, including those defined in section <ptr target="#CORS"/>
 </item><label><ident type="class">seg</ident></label>
<item>elements for marking arbitrary
segments at the level of individual characters or phrases, including
those documented in section <ptr target="#SASE"/> and <ptr target="#AILC"/>
 </item><label><ident type="class">sgmlKeywords</ident></label>
<item>elements for marking
generic identifiers, attribute names, tags, and sample attribute
values, when they occur in the text (used in module documentation, for
which see chapter <ptr target="#TD"/>)
 </item><label><ident type="class">versePhrases</ident></label>
<item>phrase-level elements
specific to verse, documented in section <ptr target="#VESE"/>
 </item><label><ident type="class">formPointers</ident></label>
<item>elements for
referring, within a dictionary entry, to the orthographic form or
pronunciation of the headword, documented in section <ptr target="#DIHW"/>
 </item></list>
 </p>
<p>The following are inter-level element classes:
<list type="gloss">
  <label><ident type="class">hqinter</ident></label>
  <item>elements for highlighted
  phrases or material marked by quotation marks, including those defined
  in section <ptr target="#COHQ"/></item>
  <label><ident type="class">bibl</ident></label>
  <item>elements for bibliographic
  citations; see section <ptr target="#COBI"/></item>
  <label><ident type="class">lists</ident></label>
  <item>elements for lists; see
  section <ptr target="#COLI"/></item>
  <label><ident type="class">notes</ident></label>
  <item>general-purpose annotation
  elements; see section <ptr target="#CONO"/></item>
  <label><ident type="class">stageDirection</ident></label>
  <item>elements for
  specialized stage-direction elements documented in section <ptr target="#DRSTA"/></item>
</list>
 </p>
<p>The following classes of elements may appear anywhere within the
<gi>text</gi> element:
 
<list type="gloss"><label>metadata</label>
<item>elements which convey non-textual
information about the text (meta-information, as it were)</item><label>refsys</label>
<item>milestone elements used in
reference systems</item><label>editincl</label>
<item>elements marking arbitrary  spans
of text which has been added, deleted, or omitted from a
transcription</item>
</list>
These three classes together make up the <ident type="class">Incl</ident>
class, comprising elements which may appear anywhere within
a <gi>text</gi> element. In earlier versions of the Guidelines, this
was implemented as an SGML inclusion
exception on the <gi>text</gi> element. In the current version,
members of this class are explicitly added to relevant content
models only.
</p>
<p>The entity declarations for these classes are these:
<specGrp xml:id="DSTECLO" n="Low-level classes">
  <p>Most of these elements are in the core module, but
  some may be from other modules.</p>

 
&teiheader.odd;
&teitext.odd;
&hqphrase.odd;
&cldate.odd;
&data.odd;
&edit.odd;
&clloc.odd;
&vephr.odd;
&metadata.odd;
&refsys.odd;
&editincl.odd;
&globincl.odd;
&odddecl.odd;
&oddref.odd;
&oddphr.odd;
    
 <p>Inter-level classes</p>

&hqinter.odd;
&clbibl.odd;
&lists.odd;
&notes.odd;
&stagedir.odd;
&cplxval.odd;
&singval.odd;
&featval.odd;
&ditoplev.odd;

   
</specGrp>
</p>
</div3>
<div3 xml:id="STECHI"><head>High-Level Element Classes</head>
<p>The following element classes are used to implement the threefold
structural distinction among phrases, chunks, and intermediate elements
discussed above in section <ptr target="#STECOV"/>.  In this terminology,
<term>chunk</term>s (or <term>chunk elements</term>) are elements which
can occur only in chunk-level sequences (e.g. between but not within
paragraphs); <term>inter-level elements</term> can occur either within
chunks (at phrase-level) or between chunks (e.g. at paragraph-level),
and <term>phrase-level elements</term> can occur only at phrase level,
within chunks (e.g. within but not between paragraphs).
 </p>
<p>The element class <ident type="class">common</ident> includes all
component-level (chunk- and inter-level) elements common to more than
one base.  It is used in implementing the combined bases described in
section <ptr target="#STCO"/>.
  </p>
<p>The relevant portion of the DTD looks like this:
<specGrp xml:id="DSTECHI" n="Common high-level classes">
&phrase.odd;
&inter.odd;
&chunk.odd;
&segment.odd;
&paragraph.odd;

<p>This class isolates all the common component-level elements.</p>

&common.odd;

</specGrp>
</p></div3>

<div3 xml:id="STECMK"><head>Elements Marked for Text Type</head>
<p>The following element classes are used to group together
component-level elements which are allowed only in texts of a particular
type (i.e. texts using a specific module).
 
<list type="gloss"><label><ident type="class">comp.verse</ident> </label>
<item>elements unique to
verse
 </item><label><ident type="class">comp.drama</ident> </label>
<item>elements unique to
drama
 </item><label><ident type="class">comp.spoken</ident> </label>
<item>elements unique to
spoken texts
 	
 </item><label><ident type="class">comp.dictionaries</ident> </label>
<item>elements unique
to dictionaries
 </item><label><ident type="class">comp.terminology</ident> </label>
<item>elements unique
to terminological data
 </item></list>
 </p>
<p>Declarations for these base-specific element classes are included in
the <term>entity file</term> of each base, which is in turn embedded by
the <ident type="file">teiclasses.dtd</ident> file in the module shown
below.  If the module defines additions to the set of global
attributes, or declares a class of component-level elements unique to
the module, then it has an entity file which is embedded here;
otherwise not.
 <!--
<specGrp xml:id="DSTECMK" n="Embedding tag-set-specific entity definitions">
</specGrp>  
-->
 </p></div3>

<div3 xml:id="STECMX"><head>Components in Mixed and General Bases</head>
<p>When the mixed or general base is in use, the definitions of the
entities <ident type="pe">macro.component</ident> and
<ident type="pe">macro.componentSeq</ident> are rather more complex.
The relevant portion of the DTD is this:
 
<specGrp xml:id="DSTECMX" n="Definition of components for combined bases">
<p>Default declarations for the 'mix.' entities used for mixed
and general bases.</p>

&vemixxx.odd;
&drmixxx.odd;
&tsmixxx.odd;
&dimixxx.odd;

<p>But it defines a special version of macro.componentSeq, which
restricts each div of the text to a single base:  bases can shift only
in embedded divs or at div boundaries.  This entity is constructed out
of a series of smaller entities, one for each module.  If the module
is not in use, its entity will expand to the empty string.</p>

<p>Conditional declarations for all the entities gen.verse,
etc.</p>

&vegen.odd;
&drgen.odd;
&tsgen.odd;
&digen.odd;

<p>Default declarations for all the entities gen.verse,
etc.</p>

&drgenxx.odd;
&tsgenxx.odd;
&digenxx.odd;
&vegenxx.odd;

</specGrp>
</p>
</div3>

<div3 xml:id="STECST"><head>Standard Content Models</head>
<p>As far as possible, the TEI DTDs use the following set of
frequently-encountered content models to help achieve consistency among
different elements.
 
<list type="gloss"><label><ident type="pe">phrase</ident> </label>
<item>a single sequence of
character data or single phrase-level element</item>

<label><ident type="pe">macro.phraseSeq</ident> </label>
<item>sequence of character
data and phrase-level elements</item>

<label><ident type="pe">macro.component</ident> </label>
<item>a single chunk- or
inter-level element</item>

<label><ident type="pe">macro.componentSeq</ident> </label>
<item>sequence of chunk- and
inter-level elements; this is the usual content of a <gi>div</gi>
element</item>

<label><ident type="pe">macro.glossseq</ident> </label>
<item>sequence of identifying and glossing
elements</item>

<label><ident type="pe">macro.paraContent</ident> </label>
<item>sequence of character
data, phrase-level elements, and inter-level elements; this is the usual
content of chunks (including, most prominently, paragraphs)</item>

<label><ident type="pe">macro.specialPara</ident> </label>
<item>specialized content
model, allowing <emph>either</emph> a sequence of chunks <emph>or</emph>
the same content as <ident type="pe">macro.paraContent</ident>; this is used for
elements such as notes and list items, which can behave either as
chunk-level elements, or else as containers for groups of
component-level elements.
 </item></list>
 </p>
<p>The relevant portion of the DTD looks like this:
 
<specGrp xml:id="DSTECST" n="Standard Content Models"><p>Here we
declare the macros phrase, macro.phraseSeq, component,
macro.componentSeq, macro.paraContent, and macro.specialPara, for use
in the content models of element declarations.  The entities phrase
and macro.phraseSeq are the same in all bases.  They may include
elements specific to single modules; if the module is not selected,
these elements are undefined and have no
effect.</p>

&cbcomp.odd;
&pephrase.odd;
&phrseq.odd;

&glossseq.odd;

<p>The component varies with the base.  The
versions for the combined bases are declared first (so as to
take precedence over the declarations in the individual
bases).</p>

<specGrpRef target="#DSTECMX"/>

<p>The patterm macro.componentSeq is always a starred sequence of
component elements.  Its definition does not vary with the base (unless
we are using the general base, in which case it has already been defined
above), but the meaning of the definition does.</p>

&compseq.odd;

<p>The following entities do not vary with the base.</p>

&peparac.odd;

&pespecp.odd;

</specGrp>
 </p></div3>
<div3 xml:id="STECMI"><head>Miscellaneous Content-Model Classes</head>
<p>The following element classes occupy specific places in content
models; most are relevant only when certain modules are selected
 
<list type="gloss"><label><ident type="class">agent</ident> </label>
<item>elements which denote an
individual or organization to whom or to which responsibility for an action
can be assigned</item>

<label><ident type="class">addrPart</ident> </label>
<item>elements which can occur
as part of an address</item>

<label><ident type="class">biblPart</ident> </label>
<item>elements which can occur in bibliographic citations</item>
<label><ident type="class">chooseable</ident></label>
<item>elements which can be used as part  of a
<gi>choice</gi> alternation</item>

<label><ident type="class">demographic</ident> </label>
<item>elements which record
demographic characteristics of the participants in a text or language
interaction (used in module for corpora and collections)</item>

<label><ident type="class">divbot</ident> </label>
<item>elements which can occur
as part of the closing material of a text division or body</item>

<label><ident type="class">divtop</ident> </label>
<item>elements which can occur
as part of the opening material of a text division or body</item>

<label><ident type="class">dramafront</ident> </label>
<item>elements which can
occur in the front matter of drama and other performance texts</item>

<label><ident type="class">fmchunk</ident> </label>
<item>elements which can
occur in place of a title page in front matter only </item>

<label><ident type="class">front</ident> </label>
<item>elements which can occur
(at the level of text divisions) in front matter only</item>

<label><ident type="class">msItemPart</ident></label>
<item>elements which can appear within the description of an
individual title or item in a manuscript description</item>

<label><ident type="class">personPart</ident> </label>
<item>elements which contain
parts of a personal name</item>

<label><ident type="class">placePart</ident> </label>
<item>elements which contain
parts of a place name</item>
<label><ident type="class">tpParts</ident> </label>
<item>elements which occur within title pages</item>

</list>
 </p>
<p>They are declared in the following module:
 
<specGrp xml:id="DSTECMI" n="Misc. Element Class Models">

&agent.odd;
&addrpart.odd;
&biblpart.odd;
&demog.odd;
&divbot.odd;
&divtop.odd;
&drfront.odd;
&clfront.odd;
&fmchunk.odd;
&tpparts.odd;

&msitempart.odd;

&chooseable.odd;
    </specGrp>
</p></div3></div2>
<div2 xml:id="STPE"><head>Other Parameter Entities in TEI DTDs</head><p>The TEI DTDs use parameter entities for several purposes:
 
<list type="bullets">
<item>to define sets of attributes shared by given classes of elements</item>
<item>to define classes of elements which can occur at the same
locations in content models</item>
<item>to identify what base module should be used for a document</item>
<item>to identify what additional modules should be included</item>
<item>to include or exclude the declaration of each element</item>
<item>to specify the name of each element</item>
<item>to specify tag omissibility information within
a DTD, or alternatively to omit such information in an XML DTD</item>
</list>
 
The first two applications of parameter entities are described above in
section <ptr target="#STEC"/>.  This chapter describes the other uses of
parameter entities in the TEI DTDs.
 </p>
<p>The parameter entities used to specify which base tag
set and which additional modules are to be used in a given document
are listed in section <ptr target="#STBA"/>.  Their default definition is
always <val>IGNORE</val>:  the encoder selects the TEI base and additional
modules by declaring the appropriate parameter entities with the
entity text <val>INCLUDE</val>.
</p>
<p>The DTD and entity files are listed in section <ptr target="#STBA"/>; if
the standard TEI entities are modified to point at locally developed DTD
files containing local modifications or extensions to the TEI DTDs, the
use of the standard parameter entity names ensures that the modification
will be obvious upon examination of the document's DTD.
 </p>
<p>The following entities are referred to by the main
<ident type="file">tei2.dtd</ident> file to embed portions of the TEI DTDs
or locally developed extensions.
 
<list type="gloss"><label><ident type="pe">extensions-decl</ident></label>
<item>identifies a local file containing
extensions to the TEI parameter entities; see section <ptr target="#STOVLO"/></item><label><ident type="pe">extensions</ident></label>
<item>identifies a local file containing
extensions to the TEI module; see section <ptr target="#STOVLO"/></item><label><ident type="pe">TEI.elementNames</ident></label>
<item>identifies a file containing parameter
entity declarations for names of TEI elements; see section <ptr target="#STPEGI"/></item><label><ident type="pe">TEI.keywords</ident></label>
<item>identifies a file containing parameter
entity declarations for TEI keywords, including the default
declaration (<val>IGNORE</val>) of the marked-section keyword for
each module; see section <ptr target="#STPEKW"/></item><label><ident type="pe">teiclasses</ident> </label>
<item>identifies a file
containing definitions of parameter entities used in content models; see
section <ptr target="#STECOV"/></item><label><ident type="pe">TEI.singleBase.1</ident> </label>
<item>defined as
<val>INCLUDE</val>
(for normal bases) or <val>IGNORE</val> (for mixed and general base);
used to prevent multiple definitions of the default text
structure.</item>
<label>TEI.XML</label>
<item>indicates whether the target DTD is to be expressed in SGML or
XML. By default, this parameter entity has the value <val>IGNORE</val>; the
user should set it to <val>INCLUDE</val> in order to generate an XML DTD; see
<ptr target="#STXML"/>.</item>
</list>
 </p>
<div3 xml:id="STPEEX"><head>Inclusion and Exclusion of Elements</head>
<p>The TEI DTDs use marked sections and parameter entity references to
allow users to exclude the definitions of individual elements, in order
either to make the elements illegal in a document or to allow the
element to be redefined, as further described in chapter <ptr target="#MD"/>.</p>
<p>Parameter entities used for this purpose have exactly the same name
as the generic identifier of the element concerned.  The default
definition for these parameter entities is <val>INCLUDE</val> but they may
be changed to <val>IGNORE</val> in order to exclude the standard element and
attribute definition list declarations from the DTD.
 </p>
<p>The declarations for the element <gi>p</gi>, for example, are
preceded by a definition for a parameter entity with the name
<ident rend="noindex" type="ge">p</ident> and contained within a marked
section whose keyword is
given as <code>%p;</code>:
 
<eg><![CDATA[<!ENTITY % p 'INCLUDE' >
<![ %p; [
       <!-- element and attlist declaration for p here -->
]]]]></eg></p><p>These parameter entities are defined immediately preceding the
element whose declarations they control; because their names are
completely regular, they are not documented individually in the
reference section of this document.
 </p></div3>
<div3 xml:id="STPEGI"><head>Parameter Entities for Element Generic Identifiers</head>
<p>In the TEI DTDs, elements are not referred to directly by their
generic identifiers; instead, the DTDs refer to parameter entities which
expand to the standard generic identifiers.
This allows users to rename elements by redefining the appropriate
parameter entity (as described more fully in chapter <ptr target="#MD"/>).
Parameter entities used for this purpose are formed
by taking the standard generic identifier of the element and
attaching the string <q>n.</q> as a prefix.  Thus the standard generic
identifiers for paragraphs, notes, and quotations, <gi>p</gi>,
<gi>note</gi>, and <gi>q</gi> are defined by declarations of the
following form:
 
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<!ENTITY % n.p "p">
<!ENTITY % n.pb "pb">
<!ENTITY % n.persName "persName">]]></egXML>
</p>
<p>Since all names in the TEI DTD are case-sensitive, the specific
mix of upper and lower case letters in the standard generic identifier must be
preserved in the entity name.
 </p>
<p>The formal declarations of the parameter entities used for generic
identifiers are contained in the
file <ident type="file">teigis2.ent</ident>; since
their names and replacement texts are fully predictable, these parameter
entities are not individually documented in the reference section of
these Guidelines.
The parameter entity <ident type="pe">TEI.elementNames</ident> is
used to embed the file <ident type="file">teigis2.ent</ident> in the DTD.
A full set
of alternate generic identifiers can be substituted for the standard set
by defining <ident type="pe">TEI.elementNames</ident> to point at a
different
file.<note place="foot">It is expected that after completion of the full
text of these Guidelines, the TEI will prepare alternate sets of generic
identifiers in languages other than English. It should be noted,
however, that in the interests of simplicity parameter entities are
used only for generic identifiers. Attribute names, standard attribute
values, and parameter entity names are less easily modified.</note>
 </p></div3>

<div3 xml:id="STPEKW"><head>Parameter Entities for TEI Keywords</head>
<p>The TEI uses the following parameter entities to signal
information which cannot be expressed using attribute declaration keywords:
 
<list type="gloss"><label>INHERITED </label>
<item>indicates that an attribute value is inherited
from the enclosing element, if not specified</item><label>ISO-date </label>
<item>indicates that the
attribute value should be a date in a format defined by ISO
8601:2000(E), usually yyyy-mm-dd (e.g. 1993-06-28).</item><label>regexp</label>
<item>indicates that an attribute value should be a regular expression
as defined in <title>XML Schema Part 2: Datatypes Second
Edition</title>, <ref target="http://www.w3.org/TR/xmlschema-2/#regexs">Appendix
F</ref></item></list>
 
In addition, the parameter entities which control the selection of
base and additional modules may be regarded as a keyword.
 
</p>
<p>The parameter entity <ident type="pe">INHERITED</ident> is used
to signal that the default value for an attribute should be inherited
from an enclosing element.
The definition for <ident type="pe">INHERITED</ident> is
the string <q>#IMPLIED</q>; as for all implied defaults, the application
program is responsible for deducing the default attribute value when no
value is specified in the element start-tag.  Since the parameter entity
is resolved by the parser, the application program will see no
difference between attributes whose default is <q>%INHERITED;</q> and
those whose default is <q>#IMPLIED</q> &#x2014; information about which
attribute values are inherited and which are inferred in some other way
must be built into the application in advance.
 </p>
<p>The parameter entity <ident type="pe">ISO-date</ident> is used to
signal that
the value for an attribute should be an ISO-standard date value; in
this notation,<note place="foot">Defined by ISO 8601:2000(E),
<title>Data elements and interchange formats &#x2014; Information
interchange &#x2014;  Representation of dates and times</title>
([Geneva]:  International Organization for Standardization, 2000).</note>
a date like <q>September 22, 1968</q> would be written
<q>1968-09-22</q> (or alternatively as <q>19680922</q>, <q>1968-W38-7</q>, <q>1968W387</q>, <q>1968-266</q>, or <q>1968266</q>).
The parameter entity <ident type="pe">ISO-date</ident>
expands to <q>CDATA</q>.
 </p>
<p>The keywords controlling the selection of base and additional tag
sets (described in section <ptr target="#STBA"/>) all have the default
value <val>IGNORE</val>; the user can override this by a local declaration,
as described in section <ptr target="#STIN"/>.
 </p>
</div3>
<div3 xml:id="STXML"><head>Generation of Schemas and DTDs </head>
<p>The TEI Guidelines can
generate schemas, or DTDs which are both SGML and XML compliant.</p>

<p>Only two SGML tag omissibility indicators are used in the TEI
Guidelines: <code>- O</code> (i.e., the end-tag may be omitted but not
the start-tag); and <code>- -</code> (i.e. neither start- nor end-tag
may be omitted). Two parameter entities are defined, one called
<ident>om.RO</ident> (<q>omissibility-required-optional</q>), and the
other called <ident>om.RR</ident>
(<q>omissibility-required-required</q>). In SGML mode, the value for each of these
parameter entities is the appropriate indicator. Content models in the
text of the Guidelines and in generated DTDs always reference the
omissibility information by means of one or the other of these
parameter entities. </p>
<p>In  XML mode (the default) tags are never omissible and omissibility
indicators are syntactically invalid. Thus 
these parameter entities are redefined as the null string, by
means of a second set of declarations contained within the file
<ident>keywords.ent</ident> and controlled by a marked section
guarded by the <ident type="pe">TEI.XML</ident> parameter entity. 
If the user declares a parameter
entity TEI.XML with the value INCLUDE in the DTD subset, then the 
parameter entities representing tag omissibility indicators will
be redefined as null strings, so that the resulting DTD is XML
conformant;
if the parameter entity is set to IGNORE, the DTD is suitable for SGML.</p>
</div3>

<div3><head>Declaration of TEI keywords</head>
<p> 
<specGrp xmlns:rng="http://relaxng.org/ns/structure/1.0" xml:id="DSTKEYS" n="TEI Keywords">
<p>I.  Declare TEI keywords for data types.</p>
<p>These patterns are used to express
rules or constraints used mainly in attribute declarations.
In some cases, the constraint cannot be directly expressed, so the
nearest equivalent is used.</p>

&datatype.certainty.odd;
&datatype.code.odd;
&datatype.key.odd;
&datatype.language.odd;
&datatype.regexp.odd;
&datatype.sex.odd;
&datatype.token.odd;
&datatype.uboolean.odd;
&datatype.uri.odd;
&datatype.urilist.odd;
&datatype.choice.odd;

<p>II.  Declare keywords for tag-set selection.</p>
<p>Declare all bases and additional modules as IGNORE.  The
user can override this default by declaring the same entity with the
replacement text INCLUDE, in the document's DTD
subset.</p>
<p>Base modules first.</p>

&prtop.odd;
&vetop.odd;
&drtop.odd;
&tstop.odd;
&ditop.odd;
&tetop.odd;

<p>Now the mixed bases.</p>

&cbgetop.odd;
&cbmxtop.odd;

<p>Now additional modules.</p>

&satop.odd;
&aitop.odd;
&fstop.odd;
&cetop.odd;
&phtop.odd;
&tctop.odd;
&ndtop.odd;
&tsdtop.odd;
&gdtop.odd;
&fttop.odd;
&cctop.odd;
&mstop.odd;

</specGrp>
 </p>
</div3>
</div2>
</div1>
