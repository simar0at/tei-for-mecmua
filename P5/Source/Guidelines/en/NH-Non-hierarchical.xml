<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright TEI Consortium. 
Licensed under the GNU General Public License. 
See the file COPYING.txt for details.
$Date$
$Id$
-->
<div xmlns="http://www.tei-c.org/ns/1.0" type="div1" xml:id="NH" n="31">
  <head>Non-hierarchical Structures</head>
  <p>XML strongly emphasizes and encourages a hierarchical document
  model. At various points these Guidelines discuss problems which
  arise when using XML to encode textual features which do not
  naturally lend themselves to representation in a strictly
  hierarchical form, such as overlapping, fragmented, or disordered
  document elements. This chapter provides an overview of several
  techniques for handling such problems, and should be consulted when
  deciding how to deal with them.</p>
  <p>The following examples illustrate the type of problem with which this
  chapter is concerned: 
  <list type="bullets">
    <item><p>In any kind of text, the physical structure (e.g. volume,
    page, column, line, etc.), frequently conflicts with compositional
    or other structures such as chapters paragraphs, sentences, acts,
    scenes, etc.</p></item>
    <item><p>In verse texts, the metrical structure (e.g. stanzas and
    metrical lines) and the linguistic structure (e.g. phrases,
    clauses, and sentences) often conflict.</p></item>
    <item><p>In verse drama, the dramatic structure (e.g. acts, scenes,
    and speeches) often conflicts with the metrical structure.</p></item>
    <item><p>A quotation or direct speech may begin in the middle of one
    sentence and continue for several more sentences.</p></item>
    <item><p>Quotation or direct speech elements are typically also
    often interrupted by narrative (such as in <quote rend="quoted"><q>What</q>, she asked, <q>do you think you're
    doing?</q></quote>), thus constituting fragmented and
    discontinuous elements.</p></item>
    <item><p>In any kind of text, embedded matter (e.g. a play or a song
    in a narrative text) may be fragmented or interrupted by other
    matter; thus complicating representation of the unity of the
    embedded material (e.g. to identify the song as a single song, and
    to mark its internal formal structure).</p></item>
    <item><p>In a dictionary, different types of information (e.g.
    orthography, syllabification, and hyphenation) may be combined
    within a single notation. This complicates the task of
    simultaneously preserving the presentation of the material in the
    source text and disentangling the distinct pieces of information
    of interest for more convenient processing of lexical
    information.</p></item>
  </list>
  </p>
  <p>Many other examples might be given, but these should suffice to show the
    variety of applications where non-hierarchical or non-nesting information
    appears, and to illustrate the various methods for addressing the problem.</p>
  <p>Non-nesting information poses fundamental problems for any encoding scheme,
    and it must be stated at the outset that no solution has yet been suggested
    which combines all the desirable attributes of formal simplicity, capacity
    to represent all occurring or imaginable kinds of structures, suitability
    for formal or mechanical validation, and clear identity with the notations
    needed for simpler cases (i.e. cases where the textual features do nest
    properly). The representation of non-hierarchical information is thus
    necessarily a matter of choices among alternatives, of trade-offs between
    various sets of different advantages and disadvantages.</p>
  <p>There are several methods used within these Guidelines to handle
    non-nesting information: <list type="bullets">
      <item>
        <p>redundant encoding of information in multiple forms
        (discussed in <ptr target="#NHME"/>)</p>
      </item>
      <item>
        <p>remodeling of the document structure (discussed in <ptr target="#NHRM"/>)</p>
      </item>
      <item>
        <p>boundary elements: empty elements which mark the boundaries between
          elements in a non-nesting structure (discussed in <ptr target="#NHBM"/>)</p>
      </item>
      <item>
        <p>fragmentation of an item: the division of what logically is
        a single element into two or more parts, each of which nests
        properly within its context; a vritual element may then be
        recreated from the partial elements, which may be
        discontinuous or out of order (discussed in <ptr target="#NHVE"/>)</p>
      </item>
      <item>
        <p>stand-off markup: the annotation of information by pointing
        at it, rather than placing XML tags within it (discussed in
        <ptr target="#NHSO"/>)</p>
      </item>
    </list>
  </p>
  <p>In the sections which follow these techniques are described, and
  their advantages and disadvantages are briefly discussed. The
  various solutions to the problem will be exemplified using extracts
  of two poems and a song as examples.</p>
  <p>A stanza of a poem written by the Italian Nobel prize winner Salvatore
    Quasimodo serves as a first example: <quote xml:lang="it">
      <l>E l'orma dell'acqua è l'alba</l>
      <l>sulla riva. Si esauriva in me</l>
      <l>il supplizio della sabbia,</l>
      <l>a batticuore, spaziando la notte.</l>
    </quote> This stanza contains four metrical lines and two sentences. The
    metrical lines can be considered part of a <mentioned>metrical</mentioned>
    view of the text, the sentences part of a <mentioned>linguistic</mentioned>
    view. The first sentence ends in the middle of the second line.</p>
  <p>A stanza of a German ballad written by Friedrich Schiller serves as a
    second example. As in the first example, sentence structure and line
    structure of this stanza will be regarded. In Schiller's ballad, in addition
    to sentences and lines, there is direct discourse which one might want to
    annotate. <quote xml:lang="de">
      <l>“Was wollt ihr?” ruft er, für Schrecken bleich,</l>
      <l>“Ich habe nichts als mein Leben,</l>
      <l>Das muß ich dem Könige geben!”</l>
      <l>Und entreißt die Keule dem nächsten gleich:</l>
      <l>“Um des Freundes willen erbarmet euch!”</l>
      <l>Und drei mit gewaltigen Streichen</l>
      <l>Erlegt er, die andern entweichen.</l>
    </quote>
  </p>
  <p>A verse of a song by Tom Lehrer serves as the third example. <quote>
        <l>But he would work late at the Bauhaus,</l>
        <l>And only came home now and then.</l>
        <l>She said, “What am I running, a chow house?</l>
        <l>It's time to change partners again!”</l></quote> 
	<!--       <bibl>
        <author><persName>Lehrer, Tom</persName></author>
        <title level="a">Alma</title>
        <title level="m">That Was the Year that Was</title>
        <biblScope type="CD">track 11</biblScope>
        <biblScope type="LP">side 2, song 4</biblScope>
      </bibl> -->
	Here
        again, there is a passage of direct discourse which starts in
        one metrical line and ends in the next.</p>
  <p>Thus, there are three <soCalled>views</soCalled> that we will discuss in
    the following sections. The first view concerns itself with the metrical
    structure of the poetry. In encoding this view of the poems one is likely to
    be interested in metrical lines, stanzas, cantos, rhyming schemes, scansion
    patterns, etc. For the purposes of this discussion we will call this view
    the <mentioned>metrical</mentioned> view, and encode only the metrical lines
    and stanzas.</p>
  <p>The second view concerns itself with the linguistic structure of the text
    — phonemes, morphemes, words, phrases, clauses, and sentences are
    likely to be of interest to those encoding this view. However, here we will
    only encode sentences in what we refer to as the
    <mentioned>linguistic</mentioned> view.</p>
  <p>The third view, which we will call the
  <mentioned>vocal</mentioned> view, is concerned with direct speech
  or quotations; whether the text is in the narrator's voice or a
  character's voice. Here we will not attempt to differentiate which
  character is speaking, but only to differentiate attributed speech
  from the narrator's voice.</p>

  <div type="div2" xml:id="NHME">
    <head>Multiple Encodings of the Same Information</head>
    <p>Conceptually, the simplest method of disentangling two (or more)
      conflicting hierarchical views of the same information is to encode it
      twice (or more), each time capturing a single view.</p>
    <p>The metrical view of each stanza is straight-forwardly encoded using the
        <gi>lg</gi> element to encode the stanza, and an <gi>l</gi> element to
      encode each metrical line. Here is the passage by Quasimodo:
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="it"><lg type="stanza">
	    <l>E l'orma dell'acqua è l'alba</l>
	    <l>sulla riva. Si esauriva in me</l>
	    <l>il supplizio della sabbia,</l>
	    <l>a batticuore, spaziando la notte.</l>
	  </lg></egXML>
      The passage by Schiller is structurally very similar in this view:
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><lg type="stanza">
	    <l>“Was wollt ihr?” ruft er, für Schrecken bleich,</l>
	    <l>“Ich habe nichts als mein Leben,</l>
	    <l>Das muß ich dem Könige geben!”</l>
	    <l>Und entreißt die Keule dem nächsten gleich:</l>
	    <l>“Um des Freundes willen erbarmet euch!”</l>
	    <l>Und drei mit gewaltigen Streichen</l>
	    <l>Erlegt er, die andern entweichen.</l>
	  </lg></egXML>
      As is the song by Lehrer:
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><lg type="verse">
        <l>But he would work late at the Bauhaus,</l>
        <l>And only came home now and then.</l>
        <l>She said, What am I running, a chow house?</l>
        <l>It's time to change partners again!</l>
      </lg></egXML>
    </p>
    <p>An encoding of the same passage by Schiller with respect to the vocal view
      follows.
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><p>
	<said>Was wollt ihr?</said> ruft er, für Schrecken bleich, 
	<said>Ich habe nichts als mein Leben, 
	Das muß ich dem Könige geben!</said>
	Und entreißt die Keule dem nächsten gleich:
	<said>Um des Freundes willen erbarmet euch!</said>
	Und drei mit gewaltigen Streichen
	Erlegt er, die andern entweichen.
      </p></egXML>
      Of course, the vocal view is not useful for the Italian poem, which does
      not contain direct discourse. The vocal view of the Lehrer song follows.
      <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>But he would
      work late at the Bauhaus, And only came home now and then. She
      said, <said>What am I running, a chow house? It's
      time to change partners again!</said></p></egXML></p>
    <p>A third annotation marks up linguistic categories, particularly the
      sentences. Focusing on the linguistic structure of the example by Quasimodo, the first stanza can be
      regarded as a paragraph containing two sentences:
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="it"><p>
  <s>E l'orma dell'acqua è l'alba sulla riva.</s>
  <s>Si esauriva in me il supplizio della sabbia, a batticuore, 
    spaziando la notte.</s>
</p></egXML>
      Respectively, one might want to annotate the second example in the
      linguistic perspective, as follows: <!-- <egXML xml:lang="en" xmlns="http://www.tei-c.org/ns/Examples"><p>
        <said>What do you want</said> shouts he, xxxx,
        <said>I do not have anything left except my life,
          and my life I have promised to the king</said>
      </p></egXML> -->
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><p>
  <said><s type="quest">Was wollt ihr?</s></said> ruft er, für Schrecken bleich,
  <said><s type="emph">Ich habe nichts als mein Leben, 
    Das muß ich dem Könige geben!</s></said></p></egXML>
    For the third example, we present an encoding which represents
    both the narrator's sentence structure and the sentence structure
    within the passage of direct speech:
    <egXML xmlns="http://www.tei-c.org/ns/Examples"><p><s>But he would
      work late at the Bauhaus, And only came home now and then.</s> <s>She
      said, <said><s>What am I running, a chow house?</s> <s>It's
      time to change partners again!</s></said></s></p></egXML></p>
    <p>The advantages of this method of markup are that each way of looking at
      the information is explicitly represented in the data, and may be
      processed in straightforward ways, without requiring complex methods of
      disentangling information relevant to one view from information relevant
      only to other views. Typically each view is straight forward to encode.</p>
    <p>However, this method has several obvious drawbacks. It requires
    redundant information be encoded, with the resulting risk that one
    view may be updated without corresponding changes being made to
    the others, resulting in inconsistencies within the document.
    Moreover, it is difficult to access information from one view
    while processing the file that contains the encoding of another,
    because the files are not related to each other, at least not
    directly. It has been shown, however, that it is possible to
    relate the different annotations in an indirect way: if the
    textual content of the annotations is identical, the very text can
    serve as a means for linking the different annotations, as
    described by <ref target="http://xml.coverpages.org/Witt-allc2002.html">Witt
    2002</ref>.</p>
      <p>It is possible to use multiple encodings to represent
      non-hierarichical structures using the TEI schemas with or
      without customization.</p>
  </div>
  <div type="div2" xml:id="NHRM">
    <head>Remodeling of the Document Class</head>
    <p>Sometimes it is possible to merge several logical hierarchies into one
      physical hierarchy. In one of the examples, the stanza of Schiller's
      ballad, such a merged document might look as follows: <eg xml:lang="de"><![CDATA[<!-- markup uses TEI names, but is not valid -->
<lg type="stanza">
  <l><said><s type="quest">Was wollt ihr?</s></said>
    ruft er, für Schrecken bleich,</l> 
  <said><s type="emph"><l>Ich habe nichts als mein Leben,</l>
  <l>Das muß ich dem Könige geben!</l></s></said>
  <!-- ... -->
</lg>]]></eg>
    </p>
    <p>In this case, there exists a single hierarchy containing all
    the information of the three separate annotations given above, but
    the single hierarchy does not conform to the TEI document grammar.
    The first line contains a quote which itself contains a sentence.
    In contrast to the first line, the second and third lines are
    contained in a sentence. This is a strange analysis, which is
    consequently not legitimated by the TEI document type.</p>
    <p>Even if such an annotation were valid, many overlapping
    structures exist which cannot be annotated in this way. This can
    be seen in the first and third examples. In Quasimodo's poem, the
    sentence <quote xml:lang="it">E l'orma dell'acqua è l'alba sulla
    riva.</quote> ends in the middle of line 2, thus there is neither
    a line which contains a whole sentence nor a sentence which
    contains a whole line. In Lehrer's song, the quotation <quote>What
    am I running, a chow house? It's time to change partners
    again!</quote> begins in the middle of line 3, thus there is
    neither a line which contains the whole quotation nor does the quotation
    contains the whole line.</p>
    <p>This means that, even though in some cases it may be possible
    to customize the TEI such that multiple annotations could be
    encoded in a single hierarchy, in general such customizations will
    violate the TEI abstract model (described in <ptr target="#CFAM"/>), and thus will validate non-conformant
    documents.</p>
  </div>
  <div type="div2" xml:id="NHBM">
    <head>Boundary Marking with Empty Elements</head>
    <p>Usually a span of text, or a <soCalled>content
    object</soCalled>, is annotated by encoding it as an XML element
    which has a start-tag at the beginning of the span and an end-tag
    at the end. It is possible to encode a span of text using an empty
    element at the beginning and another empty element at the end.
    This has the advantage that, because the span is not indicated
    with an XML element that has content, the content cannot overlap
    with some other XML element. This has the disadvantage that there
    is no single XML element representing the span of text, and thus
    processing with XML technologies is significantly more difficult.</p>
    <p>The empty elements used at each end are called
    <term>segment-boundary elements</term> or <term>segment-boundary
    delimiters</term>. There are several variations on this method of
    encoding:
      <list type="gloss">
        <label>Segment-Boundary Elements</label>
        <item>All segment-boundary delimiter elements are of the same
        generic type (e.g., <gi>boundary</gi>, which is a not a TEI
        element, and thus is in its own namespace). The type of
        textual feature being encoded, and whether any given tag is
        the start or end of said feature, is encoded in attribute
        values (e.g., an <att>element</att> attribute may be used to
        indicate the textual feature, and a <att>tag</att> attribute
        might take the values <val>start</val> and <val>end</val>).
	<egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:nh="http://www.example.org/ns/nonTEI"><l>She said,
	What am I running, a chow house?</l>
	<l>It's time to change partners again!</l></egXML>
	The TEI
        may be customized (using the methods described in <ptr target="#MD"/>) to support this method of encoding
        non-hierarchical structures.</item>
        <label>Paired Segment-Boundary Elements</label>
        <item>The names of the segment-boundary elements reflect
        whether they indicate the beginning of a passage or the end.
        E.g., <gi>boundary-start</gi> and <gi>boundary-end</gi>. As
        with single empty segment-boundary elements, the type of
        feature being annotated is indicated with an attribute.
	<egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:nh="http://www.example.org/ns/nonTEI"><l>She said, What am I running, a chow house?</l>
<l>It's time to change partners again!</l></egXML> The
        TEI may be customized (using the methods described in <ptr target="#MD"/>) to support this method of encoding
        non-hierarchical structures.</item>
        <label>Typed Segment-Boundary Delimiters</label>
        <item>The name of the segment-boundary elements reflects the
        type of feature being annotated; whether any given
        segment-boundary element indicates the beginning or the end of
        a span of text is indicated with an attribute. E.g.,
        <gi>said-boundary</gi>. 
	<egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:nh="http://www.example.org/ns/nonTEI"><l>She said, What am I running, a chow house?</l>
<l>It's time to change partners again!</l></egXML> The TEI may
        be customized (using the methods described in <ptr target="#MD"/>) to support this method of encoding
        non-hierarchical structures.</item>
        <label>Paired Typed Segment-Boundary Delimiters</label>
        <item>The names of the segment-boundary elements reflect both
        the type of feature being annotated and whether the beginning
        or end of such a feature is being indicated. E.g.
        <gi>said-boundary-start</gi>. 
	<egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:nh="http://www.example.org/ns/nonTEI"><l>She said, What am I running, a chow house?</l>
<l>It's time to change partners again!</l></egXML> The TEI may be customized
        (using the methods described in <ptr target="#MD"/>) to
        support this method of encoding non-hierarchical
        structures.</item>
        <label>Hierarchical Overlap Representation using Same element but Empty</label>
        <item>Referred to as <soCalled>HORSE</soCalled> markup, this
        is a special case of typed segment-boundary delimiters in
        which the type of element used is exactly the same as the type
        of element that would have been used if there were not an
        overlap problem. E.g., instead of <gi>said-boundary</gi> the
        normal <gi>said</gi> element is used without content (i.e., empty), with
        special attributes to indicate which is the beginning and
        which is the end. Furthermore, each empty element that marks
        the beginning is explicitly linked to the empty element that
        marks the end, and vice-versa. <eg><![CDATA[<l>She said, <said sID="one"/>What am I running, a chow house?</l>
<l>It's time to change partners again!<said eID="one"/></l>
]]></eg> 

	The TEI may be customized (using the methods described in <ptr target="#MD"/>) to support this method of encoding
	non-hierarchical structures, but because the modified elements
	are in the TEI namespace, but have additional attributes and
	different semantics, such modifications are TEI Extensions,
	and are not TEI Conformant. For an explanation of a TEI
	Extension, see <ptr target="#CF"/>.</item>
      </list></p>
    <p>Each of the variations of segment boundary delimters described
    above (except for HORSE) has the disadvantage that it is difficult
    to tell which start element corresponds to which end element
    without a complex processing of the text. One way to improve on
    this situation would be to use the linking attribute
    <att>corresp</att> discussed in <ptr target="#SACS1"/> to
    associate the boundary element indicating the end of a given
    sentence with that indicating its start, as follows:
      <eg><![CDATA[<l>She said, <said-boundary position="start" xml:id="sb01"/>What am I running, a chow house?</l>
<l>It's time to change partners again!<said-boundary position="end" corresp="#sb01"/></l>]]></eg></p>
    <p>In the above example the explicit indication of correspondence
    is not strictly required, because the sentence-end follows its own
    sentence-begin. However, cases do exist where the beginnings and
    endings do not line up so predictably. This is particularly true
    in cases of <term>self-overlap</term>, in which an element
    overlaps with another occurence of the same element type. Thus,
    the explicit indication of which beginning corresponds with which
    end (or vice-versa) is necessary.</p>
      <!-- or perhaps "What did you think that you were going to get away with that?" -->
      <p>The following is an artificial, though simple, example that
      demonstrates self-overlap. It is an encoding of an ambiguous
      newspaper headline <q>Broadway hit and run</q> in which it is
      desired to record the collocations of both possible readings
      (<q>Broadway hit</q> &amp; <q>and run</q>, an article about a
      popular play and a marathon; and <q>Broadway</q> &amp; <q>hit
      and run</q>, an article about an illegal motor vehichle
      collision). The following encoding demonstrates the use of paired
      segment-boundary elements. Each end-boundary indicates its
      corresponding start-boundary, but the start-boundaries do not
      indicate their ends.
      <eg><![CDATA[<start type="phr" xml:id="phrase01"/>
<start type="phr" xml:id="phraseA"/>
     Broadway
  <end type="phr" corresp="#phraseA"/>
<start type="phr" xml:id="phraseB"/>
     hit
  <end type="phr" corresp="#phrase01"/>
<start type="phr" xml:id="phrase02"/>
     and run
  <end type="phr" corresp="#phraseB"/>
  <end type="phr" corresp="#phrase02"/>]]></eg>
      </p>
    <p>HORSE is an interesting variant of the typed segment-boundary delimiter
      technique.<note place="foot">This method has been introduced in
        the markup literature under various names, e.g. Trojan
        milestones, HORSE markup, CLIX, and COLT. It has been
        described in detail by <ptr type="cit" target="#NH-BIBL-1"/>.</note> The two differences are <list type="ordered">
        <item>the type of element used as the empty segment-boundary delimiter
          element is the same element that would normally be used to encode the
          feature if there were no overlap problem; and</item>
        <item>each segment-boundary that marks the beginning of a passage is
          explicitly linked to the segment-boundary element that marks its end,
          and vice-versa.</item>
      </list> So instead of using elements like <gi>said-boundary</gi>,
      the normal TEI <gi>said</gi> element is used, only without content
      so that it functions not as a container for the metrical line,
      but just as an indication of the start and end of the metrical
      line. This is possible because each element which allows text
      content (also called mixed content) in the TEI scheme, i.e. all
      elements which can be affected by overlap, can also have no
      content at all.<note place="foot">Using RELAX NG or the W3C
      Schema language it is possible to declare that an element may
      contain text content but must not be empty, however the TEI
      currently has no such elements.</note> Therefore all relevant
      elements can be used as empty segment-boundary delimiter
      elements. However, it is still necessary to use an

      attribute to indicate whether a segment-boundary delimiter element is a
      start-boundary or an end-boundary. Furthermore, when using the same
      element both in its normal role as a container and as a segment-boundary
      delimiter it is advisable to use an attribute other than the general
      purpose <att>corresp</att> attribute to indicate the corresponding start-
      or end-tag. Thus in HORSE the <att>sID</att> and <att>eID</att> attributes
      are used for both of these purposes: <list>
        <item>the name of the attribute informs users (and programs)
        for which kind of tag the empty element is substituting:
        <att>sID</att> for start-tag and <att>eID</att> for end
        tag</item>
        <item>the value of the attribute indicates where the
        corresponding end- or start-tag is, by co-reference; i.e. the
        element whose <att>sID</att> value matches the current
        element's <att>eID</att> value is its start-tag</item>
        </list>. 
    </p>
    <p>Besides the already mentioned non-need to introduce new, somehow
      artificial elements, this special use of empty elements has the advantage
      that it uses the same element name as the normal container elements. This
      has at least two positive consequences: <list type="inline">
        <item>the human reader of the markup immediately knows what the segment-boundary stands for and</item>
        <item>the segment-boundary element has exactly the same attribute
          definition as the container element</item>
      </list>.</p>
    <p>Here is the same ambiguous newspaper headline as above encoded with HORSE
      markup. <eg><![CDATA[<phr sID="phrase01"/>
<phr sID="phraseA"/>
   Broadway
<phr eID="phraseA"/>
<phr sID="phraseB"/>
   hit
<phr eID="phrase01"/>
<phr sID="phrase02"/>
   and run
<phr eID="phraseB"/>
<phr eID="phrase02"/>]]></eg></p>
    <p>In addition to the advantage of using the normal TEI element
    name, the use of the HORSE attributes <att>sID</att> and
    <att>eID</att> has advnatages over using <att>xml:id</att> and
    <att>corresp</att>. First and foremost, their semantics are clear
    and unambiguous, whereas <att>corresp</att> in particular can be
    used for a variety of different reasons. Because the semantics are
    unambiguous, validation can be easier. E.g., unlike
    <att>corresp</att> the value of <att>eID</att> cannot be a pointer
    to some other doucment on the web; in addition a schema can
    prohibit any attributes other than <att>eID</att> on an empty
    element used as an end-tag. (See <ptr target="#NH-BIBL-9"/>.)</p>
    <p>Boundary marking with empty elements has the advantage of simplicity; it provides all the
      information needed to reconstruct all the competing hierarchical views of
      the text. Often the only processing required for an element occurs at its
      start and end (or can easily be formulated to do so); this markup method
      handles those cases well.</p>
    <p>Despite their advantages, segment-boundary delimiters incur the
      disadvantage of cumbersome processing: since the elements of the analysis
      (e.g. the sentences in the poems) are not uniformly represented by nodes
      in the document tree, they must be reconstituted by software in an ad hoc
      fashion, which is likely to be difficult and may be error prone.</p>
    <p>Most important for some encoders, this method disguises the logical
      relationship between the beginning and the ending of each logical element.
      This makes it impossible for standard validation software to provide the
      same kind of validation possible elsewhere in the encoding. When using
      grammar based schema languages it is not possible to define a content
      model for the range limited by empty elements.<note place="foot">
        Grammar based schema languages (e.g. DTD, W3C Schema, and
	RELAX NG)
          are used to define markup languages (e.g. XHTML or TEI). Rule-based
          schema languages (e.g. Schematron) can be used to define further
          constrains. Such a rule-based schema language permits a sequence of
          certain elements between empty elements to be legitimized or
          prohibited.
      </note></p>
  </div>
  <div type="div2" xml:id="NHVE">
    <head>Fragmentation of Elements and Reconstitution of Virtual Elements</head>
    <p>Fragmentation breaks up what might be considered a single
    element into multiple smaller elements, in order to make it fit
    within the hierarchy. For example, if a passage of direct
    discourse begins in the middle of one paragraph and continues for
    several more paragraphs, one could encode the passage as a series
    of <gi>said</gi> elements, each fitting within a <gi>p</gi>
    element. The resulting encoding provides complete XML
    <gi>said</gi> elements each of which has a start-tag, content, and
    and end-tag, but only represents a portion of the complete passage
    of direct discourse. For this reason these elements are sometimes
    called <soCalled>partial elements</soCalled>.</p>
    <p>This kind of fragmentation has the effect that the
      document contains more <gi>said</gi> elements than there are passages of
      direct speech. If one wants to count the quotations by counting the
      <gi>said</gi> elements, this is a drawback. To the extent that the element
      being broken up is used primarily to signal some characteristic, (e.g.
      that of being spoken by a character other than the narrator) rather than
      some countable object, this drawback is rather minor. Direct discourse is
      in fact so frequently interrupted by narrative interruptions, including
      but not limited to reporting clauses like <mentioned>he said</mentioned>,
      that the number of <gi>said</gi> elements is unlikely to correspond precisely
      to the number of utterances, speaker turns, or any other observable unit
      of conversation. However, since the technique of fragmentation is a
      general technique to avoid overlapping markup, the effect of introducing
      artificially new instances of a particular element must be kept in mind.
      When applied to the encoding of e.g. sentences, pages, or entries in a
      dictionary, the mismatch between the annotated phenomenon and the number of
      instances of the element may be more problematic.</p>
    <p>To tag one of our examples with this method, the speech can be broken up
      to fit into the series of lines:
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><lg type="stanza">
	      <l><said>Was wollt ihr?</said> ruft er, für Schrecken bleich,</l>
	      <l><said>Ich habe nichts als mein Leben,</said></l>
	      <l><said>Das muß ich dem Könige geben!</said></l>
	      <!-- ... -->
	    </lg></egXML>
      Here there are three <gi>said</gi> elements to encode two quotations. The linguistic view of the Lehrer
      example could similarly be encoded as follows:
      <egXML xmlns="http://www.tei-c.org/ns/Examples">
	<l><s>But he would work late at the Bauhaus,</s></l>
	<l><s>And only came home now and then.</s></l>
	<l><s>She said, “What am I running, a chow house?</s></l>
	<l><s>It's time to change partners again!”</s></l>
      </egXML>
      Here there are four <gi>s</gi> elements but only two top-level
      sentences. The advantages of this method are that it is simple
      and that at least one of the competing hierarchies can be
      processed normally.</p>
    <p>The technique of fragmentation is often complemented by the technique of
      virtual joins. Virtual joins may be used to combine objects in the text to
      a new hierarchy. Here is the same example with two quotations encoded using
      three <gi>said</gi> elements, but in this case the two <gi>said</gi> elements
      that represent a single quotation are aggregated by use of the
      <att>next</att> and <att>prev</att> attributes described in <ptr target="#SAAG"/>.
      <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><lg type="stanza">
            <l><said xml:id="q1">Was wollt ihr?</said> ruft er, für Schrecken bleich,</l>
            <l><said xml:id="q2.1" next="#q2.2">Ich habe nichts als mein Leben,</said></l>
            <l><said xml:id="q2.2" prev="#q2.1">Das muß ich dem Könige geben!</said></l>
            <!-- ... -->
          </lg></egXML> This method of virtually joining partial
          elements is sometimes called <soCalled>chaining</soCalled>.
    </p>
    <p>The TEI provides an even simpler mechanism for virtually
    joining fragments, the use of the <att>part</att> attribute
    described in <ptr target="#SASE"/>.<!-- I feel a bit silly refering
    the reader there, as the explanation there is far more lame than
    here! -sb --> Here is the Lehrer verse with the sentences aggregated into only two virtual <gi>s</gi> elements:
      <egXML xmlns="http://www.tei-c.org/ns/Examples">
	<l><s part="I">But he would work late at the Bauhaus,</s></l>
	<l><s part="F">And only came home now and then.</s></l>
	<l><s part="I">She said, “What am I running, a chow house?</s></l>
	<l><s part="F">It's time to change partners again!”</s></l>
      </egXML>
      The disadvantage of this mechanism is that it does not work well
      for cases of self-overlap, or if there are nested occurences of
      the the same element type, as it can become difficult to
      ascertain which initial, medial, or final partial element should
      be combined with which others. For example, a mildly modified verse from a different Tom Lehrer song presents difficulties:
      <egXML xmlns="http://www.tei-c.org/ns/Examples">
	<l><s part="I">Don't say that he's hypocritical,</s></l>
	<l><s part="F">Say rather that he's apolitical.</s></l>
	<l><s part="I"><said><s part="I">Once rockets go up, who says where they come down —</s></said></s></l>
	<l><s part="F"><said><s part="F">That's not my department!</s></said>, says Wernher von Braun.</s></l>
    </egXML></p>
    <p>The fragmented partial elements may be reconstituted into a
    virtual element using markup that is not directly part of the
    encoding, e.g. the <gi>join</gi> element. This method is described
    in the next section, <ptr target="#NHSO"/>.</p>
    <p>The major advantage of fragmentation and virtual joins is that
    it allows all the hierarchies in the text to be handled
    explicitly, both the privileged one directly represented, and the
    alternate hierarchy which has been split up and rejoined. Its
    major disadvantages are that (like most of the other methods
    described here) it privileges one hierarchy over the others, and
    requires special processing to reconstitute the elements of the
    other hierarchies.</p>
  </div>
  <div type="div2" xml:id="NHSO">
    <head>Stand-off Markup</head>
    <p>Classic use of markup is characterized by embedding the
    annotation in the text. An alternative approach separates the text
    and the annotation. This approach is known as stand-off
    annotation. See section <ptr target="#SASO"/> for more information
    on, and examples of, stand-off markup. Stand-off annotation
    establishes a new hierarchy by building a new tree whose nodes are
    XML elements which do not contain textual content, but rather
    links to another <term>layer</term>: <gloss>a node in another XML
    document or a span of text</gloss>.
      <?sb2aw In some respects a generalization of the virtual
            joins, because not only contents of elements are joined, but also
            ranges between points within the document. ?>
      This approach can be subdivided according to different criteria.
      A first distinction concerns the link base, i.e. the content to
      which annotations are to be applied. Sometimes the link target
      contains markup. Example: <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:lang="de"><l><said><w xml:id="w78">Was</w> <w xml:id="w79">wollt</w> <w xml:id="w80">ihr</w>?</said> <w xml:id="w81">ruft</w> <w xml:id="w82">er</w>, <w xml:id="w83">für</w> <w xml:id="w84">Schrecken</w> <w xml:id="w85">bleich</w>,</l>
      <l><said><w xml:id="w86">Ich</w> <w xml:id="w87">habe</w> <w xml:id="w88">nichts</w> <w xml:id="w89">als</w> <w xml:id="w90">mein</w> <w xml:id="w91">Leben</w>, <w xml:id="w92">Das</w> <w xml:id="w93">muß</w> <w xml:id="w94">ich</w> <w xml:id="w95">dem</w> <w xml:id="w96">Könige</w> <w xml:id="w97">geben</w>!</said></l></egXML>
    </p>
    <p>The new hierarchy is built up by reference to that base annotation, e.g.
      at the end of the same XML file: <egXML xmlns="http://www.tei-c.org/ns/Examples"><p xmlns:xi="http://www.example.org/cannot/really/use/XInclude">
    <s/>
    <s/>
</p></egXML></p>
    <p>Notice how similar this is to the use of <gi>join</gi> elements:
      <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>
  <join result="s" scope="root" targets="#w78 #w79 #w80"/>
  <join result="s" scope="root" targets="#w81 #w82 #w83 #w84 #w85 #w86 #w87 #w88 #w89 #w90 #w91 #w92 #w93 #w94 #w95 #w96 #w97"/>
            </p></egXML>
      The main advantages of XInclude over <gi>join</gi> are that it is possible
      to specify attributes on the aggregate <gi>s</gi> elements, and that there
      exists off-the-shelf software that will perform XInclude processing.</p>
      <p>Stand-off markup may be used even when the base text being
      annotated is plain text, i.e. does not have any XML encoding. In
      this case the range of text to be annotated is indicated by
      character offsets. See <ptr target="#SATS"/>, in particular <ptr target="#SATSSR"/>.</p>
    <p>Another distinction concerns the number of files which can serve as link
      targets. Often, one (dedicated) annotation is used as the link target of
      all the other annotations. It is also possible to freely interlink several
      layers.</p>
    <p>It has been noted that stand-off markup has several advantages over
      embedded annotations. In particular, it is possible to produce annotations
      of a text even when the source document is read-only. Furthermore,
      annotation files can be distributed without distributing the source text.
      Further advantages mentioned in the literature are that discontinuous
      segments of text can be combined in a single annotation, that independent
      parallel coders can produce independent annotations, and that different
      annotation files can contain different layers of information. Lastly, it
      has also been noted that this approach is elegant.</p>
    <p>But there are also several drawbacks. First, new stand-off annotated
      layers require a separate interpretation, and the layers —
      although separate — depend on each other. Moreover, although
      all of the information of the multiple hierarchies is included, the
      information may be difficult to access using generic methods.
      <!-- Another disadvantage is
	  related with the use of document grammars: Standard document grammars can only be used
	  for the level, containing both markup and textual data, standard parsing or editing
	  software cannot be employed. --></p>
    <!--     <p>linking at a sub-element range is difficult</p>
	       <p>the primary layer should be a (primary) level</p>-->
  </div>
  <div type="div2" xml:id="NHNX">
    <head>Non-XML-based Approaches</head>
    <p>There exist many non-XML methods of encoding a text that either
    solve or do not suffer the problem of the inability to encode
    overlapping hierarchies. These include, but are not limited to the
    following proposals.</p>
    <p>One attempt at extending XML is represented by the work of
    Andreas Witt et.al. <ptr type="cit" target="#NH-BIBL-2"/>, who have applied the notion of
    concurrent markup to XML (thus reintroducing the CONCUR feature of
    SGML, which was omitted from XML).</p>
    <p>Alexander Dekhtyar and students at the University of Kentucky
    have also developed a form of document representation in which
    several trees share all or part of the same frontier, and in which
    each individual view of the document has the form of a tree.
    <ptr type="cit" target="#NH-BIBL-3"/></p>
    <p>The <soCalled>colored XML</soCalled> proposal <ptr type="cit" target="#NH-BIBL-4"/> stores a body of information as a set of
    intertwined XML trees. The colored XML approach eliminates
    unnecessary redundancy and makes the database readily updatable,
    while allowing the user to exploit different hierarchical access
    paths.</p>
    <p>The MultiX proposal <ptr type="cit" target="#NH-BIBL-5"/> represents documents as directed graphs. Because
    XML is used to represent the graph, the document is, at least in
    principle, manipulable with standard XML tools.</p>
    <p>According to the Just-In-Time-Trees proposal <ptr type="cit" target="#NH-BIBL-6"/>, documents may be stored using XML, but
    the XML representation is processed in non-standard ways and may
    be mapped onto different data structures than those known from
    XML.</p>
    <p>The <choice><abbr>LMNL</abbr><expan>Layered Markup and
    Annotation Language</expan></choice> proposal offers alternatives
    to the basic XML linear form as well as its data model and
    processing model, with an alternative notation to XML and a data
    structure based on Core Range Algebra <ptr type="cit" target="#NH-BIBL-7"/>.</p>
    <p><choice><expan>Markup Languages for Complex
    Documents</expan><abbr>MLCD</abbr></choice> provides a notation
    (TexMECS) and a data structure (Goddag) as well as a draft
    constraint language for the representation of non-hierarchical
    structures. <ptr type="cit" target="#NH-BIBL-8"/></p>
    <p>These approaches are based either on non-standard XML
    processing or data models, or not not based on XML at all. Since
    TEI is currently based on XML they are not described any further
    in these Guidelines.</p>
  </div>
  <div type="div2" xml:id="NHDI">
    <head>Discussion</head>
    <p>All proposed solutions of the multiple hierarchy problem have advantages
      as well as drawbacks. For different applications and usage scenarios,
      different solutions may be approriate.</p>
    <list>
      <item>
        <p>For editing purposes the following solutions may be most appropriate:<list type="inline">
            <item>Multiple encodings of the same information </item>
            <item>Remodeling of the document class </item>
            <item>Boundary marking with empty elements </item>
          </list> The choice of a solution depends on a number of specifics:
            <list type="inline">
            <item>the number of different views and potential hierarchies</item>
            <item>the amount of overlap</item>
            <item>how much, if any, customization is required</item>
            <item>how much encoding guidance annotators need from the XML
              editing software</item>
          </list>. If good (special purpose) software is available it might also
          be appropriate to use stand-off markup or non XML-based solutions.</p>
      </item>
      <item>For processing, the stand-off-approach often is quite easy to
        handle. Several readily available XML tools will perform XInclude
        processing.</item>
      <item>For sustainable storage and easy information transfer redundant
        encoding is desirable. Other formats can be generated by unifying the
        separate annotations.</item>
    </list>
  </div>
</div>
