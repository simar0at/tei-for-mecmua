<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="all" name="makeschemas">
  <!--
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
        Id: $Id$
        Copyright: 2011, TEI Consortium<
-->
  <!--
      make TEI schemas in various forms
 -->
  <property name="trang" value="/usr/share/trang/trang.jar"/>
  <property name="XSL" value="/usr/share/xml/tei/stylesheet"/>
  <property name="lang" value="en"/>
  <property name="verbose" value=""/>
  <property name="documentationLanguage" value="en"/>
  <property name="inputDir" location="."/>
  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>
  <target name="all" depends="subset,outputs"/>

  <target name="subset">
    <xslt processor="trax" force="yes" style="Utilities/subset.xsl" in="${inputDir}/p5.xml" out="p5subset.xml">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
    </xslt>
  </target>

  <target name="outputs">
    <echo>make modular DTDs, RELAXNG schemas, json, odd schemas</echo>

      <xslt processor="trax" force="yes" style="${XSL}/odds2/odd2json.xsl" in="p5subset.xml" out="p5subset.js">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        <param name="callback" expression="teijs"/>
      </xslt>
      <xslt processor="trax" force="yes" style="${XSL}/odds2/odd2json.xsl" in="p5subset.xml" out="p5subset.json">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      </xslt>
      <xslt processor="trax" force="yes" style="${XSL}/odds2/odd2xslstripspace.xsl" in="p5subset.xml" out="stripspace.xsl.model">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      </xslt>
      <xslt processor="trax" force="yes" style="Utilities/listofattributes.xsl" in="${inputDir}/p5.xml" out="p5attlist.txt">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      </xslt>
      <xslt processor="trax" force="yes" style="${XSL}/odds2/odd2dtd.xsl" in="p5subset.xml" out="stdout">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        <param name="outputDir" expression="DTD"/>
        <param name="lang" expression="${lang}"/>
        <param name="documentationLanguage" expression="${documentationLanguage}"/>
      </xslt>
      <xslt processor="trax" force="yes" style="${XSL}/odds2/odd2relax.xsl" in="p5subset.xml" out="stdout">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        <param name="outputDir" expression="Schema"/>
        <param name="lang" expression="${lang}"/>
        <param name="documentationLanguage" expression="${documentationLanguage}"/>
      </xslt>
      <xslt processor="trax" force="yes" style="${XSL}/odds2/extract-isosch.xsl" in="${inputDir}/p5.xml" out="p5.isosch">
        <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      </xslt>
      <sequential>
        <echo>Do ODD processing for p5odds.odd</echo>
        <xslt force="yes" style="${XSL}/odds2/odd2odd.xsl" in="p5odds.odd" out="p5odds.compiled.xml">
          <factory name="net.sf.saxon.TransformerFactoryImpl"/>
          <param name="lang" expression="${lang}" if="lang"/>
          <param name="defaultSource" expression="${inputDir}/p5subset.xml"/>
          <param name="verbose" expression="${verbose}" if="verbose"/>
        </xslt>
        <xslt force="yes" style="${XSL}/odds2/odd2relax.xsl" in="p5odds.compiled.xml" out="p5odds.rng">
          <factory name="net.sf.saxon.TransformerFactoryImpl"/>
          <param name="lang" expression="${lang}" if="lang"/>
          <param name="verbose" expression="${verbose}" if="verbose"/>
        </xslt>
        <delete file="p5odds.compiled.xml"/>
      </sequential>
      <sequential>
        <echo>Do ODD processing for p5odds-examples.odd</echo>
        <xslt force="yes" style="${XSL}/odds2/odd2odd.xsl" in="p5odds-examples.odd" out="p5odds-examples.compiled.xml">
          <factory name="net.sf.saxon.TransformerFactoryImpl"/>
          <param name="lang" expression="${lang}" if="lang"/>
          <param name="defaultSource" expression="${inputDir}/p5subset.xml"/>
          <param name="verbose" expression="${verbose}" if="verbose"/>
        </xslt>
        <xslt force="yes" style="${XSL}/odds2/odd2relax.xsl" in="p5odds-examples.compiled.xml" out="p5odds-examples.rng">
          <factory name="net.sf.saxon.TransformerFactoryImpl"/>
          <param name="lang" expression="${lang}" if="lang"/>
          <param name="verbose" expression="${verbose}" if="verbose"/>
        </xslt>
        <delete file="p5odds-examples.compiled.xml"/>
      </sequential>

  </target>
</project>
