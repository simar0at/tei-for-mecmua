<?xml version="1.0" encoding="UTF-8"?>
<div xml:id="in" xmlns="http://www.tei-c.org/ns/1.0">
    <argument>
        <p>[Abstract:] This article is the first article in a series that should 
            help its readers getting started in the TEI. It explains the 
            principles of text encoding and explains what to expect 
            from the promised series of articles. It examines the 
            reasons for using or not using TEI, and gives a full, 
            albeit simplified, example of a real TEI text, showing the 
            overall structure of a TEI document: header, facsimile, text 
            consisting of front, body and back, and textual divisions. 
            It also shows a number of optional extras that can help 
            explain the text (notes), reconstructing the text's 
            history (addition and deletion), or indexing the text 
            (names and person description). 
        </p>
    </argument>
    <head>Getting started using TEI: What is TEI?</head>
    <p>The article you are reading is the first instalment in a series of articles that should help you getting started using TEI. 
        The following instalments will appear in upcoming issues of TEI-EJ.   
        The series cannot provide a full tutorial, and it cannot explain all of the detail 
    of the underlying technologies, but it should make life a little easier for someone who is 
    confronted with the TEI (Text Encoding Initiative) for the first time.  
    This article begins by giving a brief explanation of the TEI (<ptr target="#inovr"/>), and goes on 
        to describe what you can expect from this article series (<ptr target="#indoc"/>). We then 
        discuss the question of when to use and when not to use TEI (<ptr target="#inuse"/>). 
        We give a first example of a complete TEI text in <ptr target="#inost"/>.</p>
    <div xml:id="inovr">
        <head>TEI: a very high-level overview</head>
        <p>If you are reading this article you have probably decided, or are considering, using the 
            TEI to create a digital version of one or more texts. 
            Someone may have told you you should do so, or you may have read 
            about other projects that used the TEI. So what is TEI, and why is 
            it important? </p>
        <p>The simplest answer to that question is that the TEI is a set of 
            guidelines for the encoding of text. Text encoding is the addition 
            of codes to text in order to make it possible for a computer to 
            process that text. Text encoding assumes, usually, that 
            you already have a text, either by manually transcribing it, or by using 
            an <term target="getstartgloss.xml#ocr">OCR</term> program. 
            The codes that you add to the text will describe some aspect of the text: either by adding 
            information such as author or place of publication (metadata), or by characterizing 
            the role or meaning or other properties of pieces of text. The title of this chapter, 
            to give a very simple example, might be encoded as:</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <head>TEI: A very high-level overview</head>
         </egXML>
        <p>You might ask why we do this. Word processing software, like Microsoft Word, can after all handle text very well without 
            us having to type codes in pointing brackets. The long answer is given in another article in this series 
            (<ref target="#dm">The rationale of declarative markup</ref>), but a shorter answer is that 
            explicit coding gives you (the editor of the text) control over your text and its application, 
            something you don't have when you use a commercial 
            word processor. For an office document that may not represent a problem,   
            but for a text that you edit you probably do 
            not want to depend on the standard facilities 
            that were created to handle business document. 
            And while it is true that there are programs 
            that can compute wordlists and complex 
            concordances, without any need for explicit 
            codes, that is only true for a single text 
            without structure. Once you have multiple 
            texts you need a way to associate texts with titles, 
            and if your text consists of poetry with a prose 
            commentary, you may want to have word counts by type 
            of text. That is to say: you need a structured 
            representation of text properties, and that is what text encoding 
            provides.</p>
        <p>If you know something about web pages, you may think by now that text encoding is like using 
            <term target="getstartgloss.xml#html">HTML</term>, the language of the web. 
            Isn’t the <gi>head</gi> that we saw just now very much like the 
            various <gi>h1</gi>, <gi>h2</gi>, … elements that HTML uses to 
            encode headers at various levels? And indeed, the encodings 
            that the TEI uses (so-called <term>tag</term>s between angle brackets), 
            is very similar to HTML's formalism, and some of the 
            tags it shares with HTML (such as <gi>p</gi> for paragraph 
            and <gi>div</gi> for textual division). The formalism 
            is called <term target="getstartgloss.xml#xml">XML</term> (more about it in the 
            <ref target="#tbxml">Technical Background</ref> article in this series). What makes TEI 
            different from HTML is that the TEI provides tags for 
            many different text types (e.g. poetry, drama, dictionaries) and 
            many different sorts of properties (to document e.g. a 
            bibliographical description, or textual genesis), and that each of 
            these tags has an explicit, well-documented meaning. To give 
            an example: you can represent a play in HTML, but 
            HTML has no special tags to indicate a speech, or a 
            stage direction. TEI does have these, and a computer 
            program that reads a TEI representation of a play 
            can use that knowledge, e.g. to create 
            an index of speeches by character. It couldn’t do so from an HTML representation.</p>
        <p>Your next question might be: so, once I have 
            a TEI-encoded version of my text (i.e. an XML file 
            that uses TEI tags), can I put that text on the 
            web? The answer is: yes you can, but not without 
            one further step. You need some sort of program that 
            can turn your encoded text into a (collection of) web page(s). 
            Remember, during the encoding process you explicitly 
            describe the structure of your text, such as verse lines, 
            headings, notes, etc. But you say nothing about how you 
            want these to be represented on the web, or how 
            you want them to be printed. There is a very good 
            reason for this. For most texts, there is not a single best way to 
            represent their content. One of the reasons why we do 
            text encoding is that we want to do multiple things with 
            the texts (e.g. show them on the web, present a search facility 
            that can search by chapter, index personal names, etc.); 
            for that very reason, presentation functionality is kept 
            outside of the text. The idea is that the encoding should not be 
            created for a single application program. Programs come and go; 
            the encoding remains.</p>
        <p>There are many programming languages and other tools that can be 
            used to create a web page out of an XML file, but by far the 
            most common is <term target="getstartgloss.xml#xslt">XSLT</term>. 
            We apply what is called an XSLT stylesheet to an XML file to 
            transform it into one or more web pages. XSLT stylesheets  
            can do much more than apply what one would ordinarily call 'style' to a 
            document. They can define complex transformations including sorting, 
            grouping, filtering, aggregation, and selection. The TEI provides a 
            set of sample stylesheets that can handle many types of 
            text, but usually some stylesheet programming is necessary to 
            create a suitable set of web pages for a project. The 
            amount of programming depends very much on the ambition 
            level and the properties of the text. More about XSLT 
            in the <ref target="#tbxml">Technical Background</ref>  and 
            <ref target="#st">Running stylesheets</ref> articles in this series.  
            (By the way, there is also another type of stylesheet, 
            viz. <term target="getstartgloss.xml#css">CSS</term> stylesheets. 
            CSS stylesheets define simpler rendering styles for XML or HTML (web) 
            pages, including things like margins, colours, font sizes, etc.)</p>
        <p>Two more questions that often come up when discussing TEI are (1) must 
            I create this encoding by hand? And (2) can I modify the TEI encodings 
            and add my own tags? As to the first question, the answer is: to some extent. 
            Usually, people create XML files with a program called an XML editor 
            (more in the <ref target="#ed">Choosing and installing an editor</ref> 
            article in this series). Most modern XML editors can help you create the 
            encoding, based on a <term target="getstartgloss.xml#sch">schema</term>. 
            The schema defines what tags are allowed and where they are allowed, and 
            the XML editor can prompt the user with a list of the allowed tags. 
            The program can also check whether the tags that are used are actually 
            allowed, in a process called <term target="getstartgloss.xml#val">validation</term>. Some XML editors can show the 
            definitions of these tags during editing, or adjust the layout and formatting 
            of the text based on the tags that are used. Some offer a tagless interface 
            for editing. All of these help very much in making XML editing a fairly 
            straightforward process, depending on your background.</p>
        <p>As to the second question: yes, you can modify the TEI encoding when your 
            text has properties that the existing encodings really do not handle adequately. 
            You can describe the extra tags that you need, or the ones that you 
            need to change, in a special document called <term target="getstartgloss.xml#odd">ODD</term>. 
            The TEI provides a web application called <term target="getstartgloss.xml#roma">Roma</term> 
            (<ptr target="http://www.tei-c.org/Roma/"/>) which helps create such a document. 
            Roma can also generate a schema from the ODD document. That schema, as we just 
            saw, helps you create and validate your TEI document. Much more about this 
            in the <ref target="#sc">Defining, Creating and Using TEI Schemas</ref> article in this series.</p>
        <p>The technologies that we have mentioned in this subsection (TEI, XML, HTML, XSLT, Schema’s, and XML editors) are 
            more or less what will be discussed in the remainder of this series 
            of articles. But TEI is not just a set of encodings and 
            <ref target="http://www.tei-c.org/Guidelines/P5/">Guidelines</ref> for using 
            them. The TEI is also an <ref target="http://www.tei-c.org/">organization</ref> that 
            maintains these guidelines, and a community of users that applies the guidelines. 
            In fact the users are the organization: the TEI is a consortium of universities, 
            libraries and research organizations, and the TEI <ref target="http://www.tei-c.org/About/board.xml">Board</ref> 
            and <ref target="http://www.tei-c.org/Activities/Council/">Council</ref> are elected by the 
            <ref target="http://www.tei-c.org/Membership/">member organizations</ref>. Using 
            TEI is taking part in the community of TEI users that meet on the 
            <ref target="http://listserv.brown.edu/archives/cgi-bin/wa?A0=tei-l">TEI mailing list</ref>, 
            in Special Interest Groups, at the yearly TEI member meeting and on other occasions. </p>
    </div>
    <div xml:id="indoc">
        <head>What this article series does, and what it does not</head>
        <p>If you have toyed around with downloading computer programs, you will have read 
            'Getting started with xyz' documents. Usually 
            they are one or two pages long. The Getting Started-series 
            that you are reading now may be about 50 
            pages long. That means that, depending on your 
            purposes, it will probably take you longer 
            to get started using TEI than it takes to get to use 
            your average computer program. The reason for this is that you are 
            not just learning to use a computer program; you are learning a new view of 
            text, a vocabulary for expressing that view, a formalism for writing that vocabulary, 
            <emph>and</emph> a set of programs for manipulating that formalism. The effort 
            will depend on your existing skills, on your environment (do you 
            have people around that can help you when you're stuck) 
            and on your ambitions. </p>
        <p>If you have had no previous experience of some of the more 
            technical aspects of computing, 
            getting to use TEI is going to present 
            you with a sometimes steep learning curve. But then, 
            having learned to use TEI will not just enable 
            you to encode, present and analyse your 
            documents, you will also have acquired a deeper 
            understanding of your texts, and text in general, 
            you will have mastered a set of technologies 
            that will be of use throughout your professional 
            life, and you will have met with a crowd of 
            friendly and innovative scholars, programmers and librarians 
            that may also prove to be an asset in your career as 
            well as a reward in itself.</p>
        <p>So, recognising that learning TEI is never going to 
            be easy, this series of articles will help you 
            get started. It is not a full course. Neither can it 
            provide a substantive tutorial in the main technologies that TEI uses, 
            such as <term target="getstartgloss.xml#xml">XML</term>, 
            <term target="getstartgloss.xml#xslt">XSLT</term> and <term target="getstartgloss.xml#html">HTML</term>. 
            We refer to tutorials and online training opportunities elsewhere wherever possible.</p>
        <p>The article series aims to serve a diverse audience. Its readers may include academics 
            (postgraduate, PhD, researcher, professor) who want to start understanding and using 
            the TEI: e.g. a graduate student who wants to make an edition of a book he/she is 
            writing a thesis on. The audience may also include people who are not themselves scholars but who 
            are, or will be, working as encoders with a project. These may be undergraduates, 
            editorial assistants, etc. We assume readers that are willing to learn something new, ready 
            to work hard and to try various solutions. We also assume someone that is 
            reasonably comfortable using computers, but do not expect 
            experience in programming or previous knowledge of XML or HTML. </p>
        <p>By 'reasonably comfortable using computers' we mean, among other things, that we 
            expect you to have basic computer skills, 
            such as create disk folders, move files, download and install programs, 
            and use <term target="getstartgloss.xml#zip">zip/unzip</term> software. 
            There is no point in this document trying to explain very elementary 
            computer tasks. If you feel your basic computer skills 
            are inadequate, you may want to attend elementary computer 
            training or study a beginner's tutorial.</p>
        <p>After this initial article, the following article will 
            describe a number of technologies that the TEI uses 
            in text encoding (<ptr target="#tb"/>). The reasons for 
            encoding properties of the text rather than the desired 
            output are examined in <ptr target="#dm"/>. The series then 
            goes on to discuss (in <ptr target="#ed"/>) XML editing 
            software, the principal tool for creating and modifying 
            TEI texts. Once we have an editor we can load, 
            modify and validate TEI documents (<ptr target="#lm"/>). 
            We use stylesheets (<ptr target="#st"/>) to transform XML 
            documents into other documents, e.g. to read them on the web. 
            Once you have seen this, you will want to begin using this 
            on your own texts (<ptr target="#ot"/>). </p>
        <p>A final piece of technology that is explained in the 
            series are XML schemas <ptr target="#sc"/>.  
            By using schemas we describe exactly which elements can occur 
            in a given XML document, and what elements they may contain. 
            Using the description, we can check the validity of the XML document. 
            That is one of the reasons that we want to define schemas that 
            closely fit the documents that we are encoding. The TEI provides 
            a mechanism for creating such schemas. What remains then is to ask what 
            to do once you have studied the series (<ptr target="#wg"/>). The 
            article series comes with a Glossary (<ptr target="getstartgloss.xml"/>) 
            of technical terms. </p>
        <p>This article series should be useful irrespective of the computer platform you are using 
            (Windows, Unix, Apple). In fact, an important reason why the TEI was created was that computer 
            files tended to be specific to a single platform. Work that scholars did to encode 
            historic texts was lost when platforms changed. Platform independence is therefore very important 
            to the TEI. The software that we discuss runs on all major platforms, 
            though things may not look exactly the same everywhere. Where we have to describe 
            things that are specific to one or more platforms, we will clearly indicate this.</p>
    </div>
    <div xml:id="inuse"> 
        <head>When to use and when not to use TEI?</head>
            <p>The TEI guidelines have been in development over a period of more 
                than 20 years. They have grown into a quite formidable apparatus 
                for tackling textual issues that may appear intimidating at first. 
                It is not uncommon for people to wonder: do I have to do this? 
                Isn't there an easier alternative, something closer to the 
                techniques that I already know? This section will discuss 
                situations when using TEI is appropriate and when it is less so.</p>
            <p>To be clear, you can encode any form of
                text-bearing object, and even objects that don't have any text,
                in TEI. People also use the TEI to record only metadata about
                objects. If you are undertaking a text-encoding project in
                linguistics, social sciences, library sciences, or humanities
                then it is likely that the TEI is a good fit for your needs.
                Nonetheless there are situations where the use of TEI may be 
                overkill or otherwise less appropriate.</p>
        <div>
            <head>Why not just HTML?</head>
            <p>Quite frequently people know that their main publication output
                will be in HTML on the web, and they question whether they
                should not just author directly in HTML. As mentioned earlier
                in this document the TEI has more and more specific elements than HTML. 
                Experience has taught that it is much better to describe
                what something is, rather than what it looks like. Therefore,
                while in HTML encoding you might want to display in italics
                something that is a title, emphasized, a foreign phrase, or a
                specialized term, in TEI one would mark this with specific elements for titles,
                emphasis, foreign phrases, or terms. The benefit of this is the
                easy ability to repurpose the material for different uses.
                Also, by separating out the presentation from the encoding it
                allows one to easily change the form of presentation for all
                similar elements at a later date. Another example would be 
                line numbers. If you edit in HTML, you either use line numbers 
                or you do not. If you use TEI you mark the line numbers in your 
                text as such, creating the basis for producing an HTML text 
                with line numbers and one without.</p>
        </div>
        <div>
            <head>What is your material like?</head>
            <p>For many genres (prose, poetry, plays, dictionaries, charters, 
                and more) examples exist of successful TEI encoding. The TEI 
                website contains a <ref target="http://www.tei-c.org/Activities/Projects/">list 
                of projects</ref> using TEI that can inspire prospective encoders. 
                But one reason not to use TEI could be that for your genre or discipline 
                there is an existing standard which suits your needs better.
                For example, if you are encoding a mathematical manuscript then the
                Mathematical Markup Language (MathML; <ref target="#carl2003">Carlisle 2003</ref>) 
                recommendation from the W3C is
                mostly likely a better choice. That said, if you are editing 
                documents which contain mathematical formulas but also 
                exhibit textual variation, TEI would be
                a better choice, as you can encode the textual variation using TEI 
                features and embed MathML in your document to describe the formulas.
                This ability to be able to incorporate
                other standards as part of a TEI document is one of its strengths.
                Many other standards exist and the TEI has tried not to
                reinvent the wheel where a perfectly good one exists, instead
                allowing you to embed markup from other vocabularies in your
                TEI document where necessary. Additionally if the TEI does not
                cater for some textual phenomena important to your work, then
                it is possible and even recommended to extend the TEI (in an approved and documented
                manner) to add new elements to deal with these.</p>
            <p>Another technology that people use frequently instead of the
                TEI, or other forms of XML, is relational databases. It makes
                sense to use a standard relational database when the nature of
                the data benefits from this form of storage and retrieval. One
                way to think about this division of information is whether it
                is data-like or document-like. Relational databases are good at
                storing single static fields where no markup is present in any
                of the fields. XML is good at deeply-nested, arbitrary, fields.
                An example might be an address and telephone list. If one is
                simply recording a flat list of names, phone numbers, and some
                address lines then a relational database is certainly
                sufficient. If the individual fields contain anything you want
                to record inside any of them then using a structured markup
                language like TEI XML is probably more suitable. So-called
                'document-like' information is often characterised by multiple
                levels of nesting of structures, for example divisions
                containing paragraphs containing various phrase-level markup
                such as names, abbreviations, or foreign phrases. 
                See <ref target="#brad2005">Bradley &amp; Short (2005)</ref> for 
                a discussion of some of these issues.</p>
            <p>In some cases, source material may contain structures which
                cannot be represented in TEI markup (say you are representing 
                a ballet performance). In these cases TEI 
                is clearly not the answer (though it might be an 
                ingredient in a solution). However, it may also be the case that your 
                material could be represented in TEI but the discipline
                you are working in has a significant number of tools and
                expertise available for another format. This will necessarily be a 
                factor in the format you choose.</p>
        </div>
        <div>
            <head>What is your desired output?</head>
            <p>It is one of the basic ideas of descriptive markup that the
                presentation and output should be left as a separate step from
                the encoding of the information. Part of the reason for this is that 
                one is able to leverage the markup available in a TEI document
                to produce all sorts of outputs. (e.g. not only a rendering of
                a text, but indices of certain aspects, rearrangements or
                different views, and any number of statistics) The TEI provides
                basic customisable XSLT stylesheets for transforming TEI texts
                to HTML and PDF, and additionally there are ways to import and
                export TEI to/from word processors. One of the benefits of
                using XML as a format is that it is fairly easy to transform
                XML into other formats required for later software. The need 
                to create output in multiple forms or formats is 
                a clear reason for choosing TEI. Conversely, if your output is to 
                be accessed only in a single format, other than TEI, then choosing
                that other format may be more suitable. Still, we would argue for 
                carefully considering the potential advantages of multiple 
                output forms.</p>
        </div>
        <div>
            <head>How hard is learning TEI, and where do I get help?</head>
            <p>The competence of the person undertaking the encoding is
                necessarily a consideration in choosing technologies. However,
                it should be emphasized that a fairly good understanding of
                basic TEI XML can be obtained quite quickly in comparison to
                many of the other skills people learn in order to undertake
                similar scholarly activities. Spending a few days learning TEI
                XML is an investment of time that is well worthwhile. That
                said, such an undertaking does presuppose a certain amount of
                basic computer literacy. It is worth remembering that in some
                cases it may also be possible to outsource the required TEI
                encoding of your documents. One good reason for using the TEI 
                is that there is a large international community who
                are willing to help you as you encounter new problems.
                Nonetheless, if the context in which you are undertaking the
                encoding (workplace, institution, etc.) provides no support for
                TEI or XML, and actively supports alternative solutions, then
                that should be borne in mind. What would be more beneficial, of
                course, is educate your colleagues as to the benefits of the
                TEI, and perhaps host a TEI Workshop with invited speakers to
                help train your local technical support. There are many
                scholars with basic computer literacy who have been more than able
                to teach themselves the TEI.</p>
        </div>
        <div>
            <head>Do long-term benefits outweigh initial costs?</head>
            <p>One of the benefits of using the TEI is that what you do is 
                specifying the textual distinctions that are useful to your purposes. 
                This is intellectually more satisfying than only encoding for one platform,
                such as web distribution. And yet, if you have no experience
                with the TEI, and simply need to do a single web page very
                quickly, then deciding to learn the TEI, and investigating the
                various options for transformation to HTML, is probably not as
                practical. We would argue, of course, that learning TEI is
                never time spent poorly.</p>
        </div>
        <div>
            <head>But can markup do justice to my text?</head>
            <p>There is a school of thought that holds that XML markup cannot do 
                justice to the phenomena that literary scholars study. 
                The main reasons for these doubts are that (i) XML encodes 
                hierarchical structures, while most of the phenomena that 
                literary scholars are interested in cross hierarchical boundaries: 
                Quotations run across paragraph boundaries, speeches in plays 
                overlap with metrical units in poetry, and textual variation 
                is also insensitive to structural boundaries; (ii) XML encoding is often 
                perceived as inflexible and rigid, not suited to 
                represent the creative process of scholarly discovery; 
                (iii) the need to learn and consider the technicalities of XML 
                encoding is sometimes thought to be at odds with the scholarly 
                work which the encoding should after all facilitate. 
                See for a forceful statement of these views e.g. 
                <ref target="#smit2006">Smith et al. (2006)</ref>. 
                Should they keep you from using TEI XML?</p>
            <p>It should not come as surprise that we do not think so. 
                This tutorial is not the right place for an in-depth discussion of these 
                fundamental criticisms. It is true that overlap between textual 
                phenomena is a frequent cause of problems in text encoding, 
                but there are a number of ways of dealing with them and 
                it is not usually a major problem. As to the perception of 
                inflexibility: it is clearly unwise to begin TEI encoding of 
                a text without previous thought about the phenomena worth 
                researching and worth tagging (<ref target="#lava2006">Lavagnino 2006</ref>). However, when 
                preparing a (collection of) text(s) for publication, some measure 
                of uniformity is necessary, whether one uses XML or not. And in 
                fact the use of XML can be argued to increase flexibility, as it 
                facilitates multiple presentations of the text. Finally, while 
                it is undoubtedly true that heavily marked up text can become 
                difficult to read, this is more of an interface problem than 
                an XML limitation. The problem may be alleviated by a tagless 
                editing interface in XML editors or by editing applications that 
                hide the existence of XML altogether. Another solution may be the 
                use of so-called <term target="getstartgloss.xml#som">stand-off markup</term>, 
                i.e. markup that is not embedded 
                within the text that it comments on but that points to segments of
                that text.</p>
        </div>
        <div>
            <head>TEI and the history of digital text</head>
            <p>Summing up, there is no single answer to the question when 
                to use TEI. The decision will depend on characteristics of 
                the texts, the discipline, the persons and the project involved. A final 
                consideration may be the unique place of the TEI in the history of the development of
                digital textual studies, digital humanities and the way we
                conceive of electronic text in the modern age. As the TEI was
                originally a pre-web endeavour, its decisions have helped to
                influence many of the people who have designed the systems,
                formats and processes which make up the web, including XML
                itself (see <ref target="#dero1999">DeRose 1999</ref> and 
                <ref target="#barn1995">Barnard et al. 1995</ref>).</p>
            <p>If embarking on a text encoding project of any sort,
                it will do one no harm to examine the current TEI Guidelines.
                They have been developed and updated over the
                last couple of decades with input from countless scholars and
                experts from many fields. They have been revised again and
                again to introduce new concepts, expand older ones, and correct
                mistakes. This does not mean that there is no room for improvement, 
                but simply that they
                have benefited from a long history of many eyes and experience
                with all sorts of texts. The Guidelines then provide a good  
                codification of knowledge about the markup of various textual
                phenomena. It is quite likely that your problems and concerns
                are not unique and that others have encountered similar textual
                phenomena before you. After all, damage to the carving on a
                stone tablet is very similar, in a structural sense, to damage
                to a text in a medieval manuscript, or indeed a modern printed
                book rescued from a fire. For many text types, if you decide 
                not to use TEI, you are likely to have to reinvent 
                several wheels.</p>
        </div>
    </div>
    <div xml:id="inost" >
        <head>Overall structure of a TEI text</head>
        <p>To introduce the structure of a TEI document, we will begin at the level of 
            a smaller text fragment, and then gradually add the larger document structure around it. 
            Our example is based on the <ref target="#grav2002">Diary of Robert Graves</ref>. 
            For educational purposes, the encoding that we will show here is slightly different 
            from the encoding applied in that project.</p>
        <div xml:id="osfra">
            <head>A text fragment </head>
            <p>Suppose we were to create an edition of the diary of Robert Graves. We have a facsimile of a diary page, which looks like this:</p>
            <figure>
                <figDesc>Page from the diary of Robert Graves, Oct. 10 1938</figDesc>
                <graphic url="images/graves1938-10-10.jpg"/>
            </figure>
            <p>An initial transcription of the text might look like this:
                <eg>
                    Oct 10 Monday
                    Ghost, completing ch IX
                    Dictionary with Alan.
                    A lot of time goes to making 
                    charcoal for 'Marthe', Beryl's 
                    now using this fugon for warming 
                    her attic.
                    Went to Montauban with 
                    David – first visit for about 
                    10 days – ordered small wood for 
                    Dorothy's cresset.
                    Now almost always win at 
                    Cambeluk: we are playing a 
                    correspondence game with Harry.
                    Nono broke Laura's particular 
                    coffee cup,  [sketch of cup]  and she 
                    her blue glass bottle given by 
                    Karl.</eg>
            </p>
            <p>The first thing to remark here is that in a diary transcription we will 
                want to identify the date that the entry belongs to. We may also want to say that 
                this piece of text actually <emph>is</emph> a diary entry. The next thing we 
                notice is that the entry has a heading (<q>Oct 10 Monday</q>) 
                and consists of a number of paragraphs. We introduce some XML elements and 
                attributes to account for these facts. 
            </p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <div type="diaryentry" n="1938-10-10">
                    <head>Oct 10 Monday</head>
                    <p>Ghost, completing ch IX</p>
                    <p>Dictionary with Alan.</p>
                    <p>A lot of time goes to making 
                        charcoal for 'Marthe', Beryl's 
                        now using this fugon for warming 
                        her attic.</p>
                    <p>Went to Montauban with 
                        David – first visit for about 
                        10 days – ordered small wood for 
                        Dorothy's cresset.</p>
                    <p>Now almost always win at 
                        Cambeluk: we are playing a 
                        correspondence game with Harry.</p>
                    <p>Nono broke Laura's particular 
                        coffee cup, [sketch of cup]  and she 
                        her blue glass bottle given by 
                        Karl.</p>
                </div>
            </egXML>
            <p>A fuller explanation of <term target="getstartgloss.xml#xml">XML</term> will 
                be given in the <ref target="#tb">Technical Background</ref> 
                article in this series. For now, we will limit the explanation 
                to saying that that XML <term target="getstartgloss.xml#elem">element</term>s 
                such as 'p' (paragraph) are 
                delimited by what is called <term target="getstartgloss.xml#tag">tag</term>s. 
                An opening tag looks like '&lt;p>', 
                a closing tag looks like '&lt;/p>'. In running prose, we use the 
                opening tag in discussing the element. Elements can have properties 
                attached to them by specifying <term target="getstartgloss.xml#attr">attribute</term>s, as in the <gi>div</gi> 
                element in the example. When discussing an attribute, we will 
                prefix its name with '@', as in '<att>type</att>'. </p>
            <p>The <gi>div</gi> element is what is used to describe textual divisions. 
                We use here the <att>n</att> attribute to indicate the date, and the 
                <att>type</att> attribute to state this piece of text is a diary entry. 
                <gi>head</gi> is used to describe a heading, <gi>p</gi>  describes a 
                paragraph. A question might be why we don't simply indicate paragraphs 
                by newline characters, the way many programs do (such as 
                Notepad on Windows). One reason is that different operating systems 
                use different characters to indicate the beginning of a new line. Another 
                reason is that an accidental new line character in our source would 
                cause a rendering application to begin a new paragraph. The best way to 
                avoid ambiguity and to make our encoding portable between platforms is 
                to explicitly indicate new paragraphs. We might, in fact, even have indicated 
                the locations where Graves begins a new line. TEI provides the 
                <gi>lb</gi> element for that purpose. This, as most other 
                decisions about encoding, is a matter of editorial choice. Is the 
                beginning of a new line important enough to be retained in an edition? The TEI 
                does not prescribe editorial policies.
            </p>
            <p>Before moving on to the larger document structure, we will add a few more refinements. 
                Not every project will find these refinements 
                necessary, but they give an indication of the kind of phenomena TEI can 
                handle. To begin with, the word <q>fugon</q> is a word taken 
                from Spanish, and should probably be italicised in an edition. 
                We use the <gi>foreign</gi> element to indicate this. To explain what it means, 
                we add a <gi>note</gi>. Then, there is a small drawing of a cup, 
                which our transcription renders as <q>[sketch of cup]</q>. From the 
                transcription, no-one would know that these are not Graves' 
                own words. We will use a <gi>figure</gi> element and an embedded 
                <gi>figDesc</gi> (figure description) to place the description. 
                We will also indicate that <q>ch</q> is an abbreviation 
                (for 'chapter'). And finally, we will want 
                to indicate a number of changes that Graves made in his text. 
                We will use <gi>del</gi> and <gi>add</gi> elements to indicate deletions 
                and additions to the text. The result is as follows:</p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <div type="diaryentry" n="1938-10-10">
                    <head>Oct 10 <del>Tuesday.</del><add>Monday</add></head>
                    <p>Ghost, completing <abbr>ch</abbr> IX</p>
                    <p>Dictionary with Alan.</p>
                    <p>A lot of time goes to making 
                        charcoal for 'Marthe', Beryl's 
                        now using this <foreign>fugon</foreign><note>charcoal-burner</note> for warming 
                        her attic.</p>
                    <p>Went to Montauban with 
                        David – first visit for about 
                        10 days – <del>got</del><add>ordered</add> small wood for 
                        Dorothy's cresset.</p>
                    <p>Now almost always win at 
                        Cambeluk: we are playing a 
                        correspondence game with Harry.</p>
                    <p>Nono broke Laura's particular 
                        coffee cup, <figure><figDesc>sketch of cup</figDesc></figure>  and she 
                        her blue glass bottle given by 
                        Karl.</p>
                </div>
            </egXML>
            <p>Let's now put this fragment into context.</p>
        </div>
        <div xml:id="oscon">
            <head>The larger document structure</head>
            <p>Texts do not live in isolation. They are often introduced by title pages, 
                prefaces, tables of contents and dedications; they are often 
                followed by an index, appendices, and similar material. We represent this 
                structure by a <gi>text</gi> element that contains a <gi>front</gi>, 
                <gi>body</gi> and <gi>back</gi>. In our case, the editors of Graves' 
                correspondence have created monthly abstracts of the diary entries. 
                These might very well have been placed in the <gi>front</gi> element. 
                Supposing for the moment that there is no other front matter and no 
                back matter, that would give us this:
            </p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <text>
                    <front>
                        <div type="abstract">
                            <head>OCTOBER 1938</head>
                            <p>The rains set in, and Graves works in his bedroom with the fire going. ...</p> 
                        </div>
                        <!-- abstracts for other months -->
                    </front>
                    <body>
                        <div type="diaryentry" n="1938-10-10">
                            <!-- text of entry -->
                        </div>
                        <!-- other entries -->
                    </body>
                </text>
            </egXML>
            <p>Notice, by the way, the use of <![CDATA[<!-- ...  -->]]> to write comments 
                in XML text. Comments are used to explain something about the 
                encoding to a human reader and will usually be ignored by 
                programs that process the XML.</p>
            <p>Apart from the texts that surround a main text, such as forewords and 
                appendices, TEI texts are also provided with metadata, information 
                <emph>about</emph> the text. All TEI texts come with a header that 
                contains these metadata. The element is called <gi>teiHeader</gi>. The 
                <gi>teiHeader</gi> and the <gi>text</gi> are children of the top 
                level <gi>TEI</gi> element. So the overall structure looks like this:</p> 
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <![CDATA[
            <TEI  xmlns="http://www.tei-c.org/ns/1.0">
                <teiHeader></teiHeader>
                <text>
                    <front></front>
                    <body></body>
                    <back></back>
                </text>
            </TEI>
            ]]>
            </egXML>
            <p>Notice the 'xmlns' on the <gi>TEI</gi> element: all TEI elements are 
                part of the TEI <term target="getstartgloss.xml#ns">namespace</term>, 
                <ptr target="http://www.tei-c.org/ns/1.0"/>. </p>
            <p>We will not go into details here about the content of the TEI header, but 
                show a very minimal example. Again, this is borrowed, with simplifications, from 
                the <ref target="#grav2002">Diary of Robert Graves</ref>.</p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <teiHeader>
                    <fileDesc>
                        <titleStmt>
                            <title>Diary of Robert Graves 1935-39 and ancillary material</title>
                            <author>Robert Graves</author>
                            <editor>...</editor>
                        </titleStmt>
                        <publicationStmt>
                            <publisher>...</publisher>
                            <pubPlace>...</pubPlace>
                            <availability status="unknown"><p>...</p></availability>
                            <date>...</date>
                        </publicationStmt>
                        <sourceDesc><p>...</p></sourceDesc>
                    </fileDesc>
                </teiHeader>
            </egXML>
            <p>The elements that are used here are largely self-explanatory. <gi>availability</gi> 
                is used to describe the (legal) conditions under 
                which the text is available. <gi>sourceDesc</gi> describes the source from 
                which the electronic document (the TEI document) was created. </p>
        </div>
        <div xml:id="osref">
            <head>Two refinements</head>
            <p>The encoding that we have shown up to now is of course only a very 
                partial encoding. We will show two ways of creating a more informative 
                document.</p>
            <div xml:id="osreffac">
                <head>Attaching a facsimile</head>
                <p>First, we may want to make explicit the relation between the image file that 
                    we transcribed and the transcribed content. For that purpose, the TEI provides the 
                    <gi>facsimile</gi> element, stored between the <gi>teiHeader</gi> and the <gi>text</gi> elements. 
                    The <gi>facsimile</gi> element describes the transcribed object in terms of <gi>surface</gi>s and (optionally) 
                    <gi>zone</gi>s within these surfaces. In our case, each surface will correspond 
                    with a diary page, and we have no need for zones. For each 
                    surface, we can define one or more <gi>graphic</gi> elements,  which will hold 
                    information about the images of that page. The surface element is provided 
                    with an  <att>xml:id</att> attribute. From the transcription we can point 
                    at the <gi>surface</gi> using the <att>facs</att> attribute. Let us see what 
                    this looks like:</p>
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
                    <TEI>
                        <teiHeader> ... </teiHeader>
                        <facsimile>
                            <surface xml:id="graves1938-10-10-1">
                                <graphic url="graves1938-10-10.jpg"/>
                            </surface>
                        </facsimile>
                        <text>
                            <front>...</front>
                            <body>
                                <div type="diaryentry" n="1938-10-10" facs="#graves1938-10-10-1">
                                    ...
                                </div>
                            </body>
                        </text>
                    </TEI>
                </egXML>
                <p>You see we have added a <gi>facsimile</gi> element containing a 
                    <gi>surface</gi> for the page that we transcribed. The <gi>surface</gi> has 
                    an <att>xml:id</att> attribute. On the <gi>div</gi> element in the transcription 
                    we have added a <att>facs</att> attribute. The value of the <att>facs</att> 
                    attribute is a <term target="getstartgloss.xml#url">url</term>. The value 
                    '#graves1938-10-10-1' points to the element with <att>xml:id</att> attribute 
                    'graves1938-10-10-1', that is, the <gi>surface</gi> element. The 
                    <gi>surface</gi> element contains the <gi>graphic</gi> element that 
                    is an image of the current page. 
                </p>
                <p>The reason we do this is that we have now explicitly defined the relation 
                    between the transcription and the corresponding image files. Later users of the 
                    transcription will know what belongs together. What may be more important: 
                    applications that want to render the transcription will no longer need 
                    to know about the names of the image files. They can just fetch the files 
                    that are needed from the location as it is specified in the Guidelines. It is an 
                    important step towards making general-purpose TEI applications. 
                </p>
            </div>
            <div xml:id="osrefper">
                <head>Repurposeable notes about persons</head>
                <p>A further enhancement of the document's value would be to provide 
                    some explanations about the many persons mentioned, 
                    but not identified, in the diary entries. We could create 
                    <gi>note</gi> elements, the way we did to explain 
                    <mentioned>fugon</mentioned>, but most persons recur many 
                    times throughout the diary. What we would like to have is a single explanation 
                    per person, that we can show whenever it is needed. </p>
                <p>One way to create such reusable explanations is to make use of 
                    the participant description in the TEI header. The 
                    <gi>particDesc</gi> element can contain a list of persons (a 
                    <gi>listPerson</gi> element containing <gi>person</gi>s). For each 
                    <gi>person</gi> we could, if we wanted to do so, give a structured 
                    description in terms of a number of characteristics (sex, age, etc). But we can 
                    also limit ourselves to an informal description using a <gi>p</gi> 
                    element. Whenever a specific person occurs in the diary, we can then 
                    refer to the description of that person in the header. The element 
                    that we will use to refer to the description is the <gi>rs</gi> element. The 
                    <gi>rs</gi> element (referring string) is somewhat like a name element, 
                    but more generic: names are referring strings, but so are 
                    'her oldest son' or 'the gardener'. Which gives us something like this: 
                </p>
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
                    <TEI>
                        <teiHeader>
                            <fileDesc></fileDesc>
                            <profileDesc>
                                <particDesc>
                                    <listPerson>
                                        <person xml:id="AH">
                                            <p>Alan Hodge. Oxford history graduate. Became close 
                                                friends with Laura Riding &amp; Robert Graves. First husband of Beryl Graves.</p>
                                        </person>
                                        <person xml:id="BP">
                                            <p>Beryl Pritchard. Daughter of Harry and Amy Pritchard, Robert Graves's second wife. 
                                                Formerly married to Alan Hodge. Robert and Beryl had four children: William, Lucia, Juan and Tomas.</p>
                                        </person>
                                        <person xml:id="DR">
                                            <p>David Reeves. Brother of James Reeves.</p>
                                        </person>
                                    </listPerson>
                                </particDesc>
                            </profileDesc>
                        </teiHeader>
                        <facsimile>..</facsimile>
                        <text>
                            <front>...</front>
                            <body>
                                <div type="diaryentry" n="1938-10-10" facs="#graves1938-10-10-1">
                                    <head>Oct 10 <del>Tuesday.</del><add>Monday</add></head>
                                    <p>Ghost, completing <abbr>ch</abbr> IX</p>
                                    <p>Dictionary with <rs ref="#AH">Alan</rs>.</p>
                                    <p>A lot of time goes to making 
                                        charcoal for 'Marthe', <rs ref="#BP">Beryl</rs>'s 
                                        now using this <foreign>fugon</foreign><note>charcoal-burner</note> for warming 
                                        her attic.</p>
                                    <p>Went to Montauban with 
                                        <rs ref="#DR">David</rs> – first visit for about 
                                        ... </p>
                                </div>
                            </body>
                        </text>
                    </TEI>
                </egXML>
                <p>For three persons in the diary fragment, we have created a 
                    <gi>person</gi> element. We have surrounded the names in the diary 
                    with <gi>rs</gi> tags and let the <gi>rs</gi> elements point to 
                    the <gi>person</gi>s using the <att>ref</att> attribute. </p>
                <p>This concludes the discussion of our first TEI example. 
                    The choices made in the encoding of this diary fragment 
                    are not meant to suggest what is mandatory and what not: 
                    the editorial policies of individual projects must decide, 
                    e.g., whether to retain or to expand abbreviations or to 
                    do both. Similarly, a transcription that ignores deleted 
                    text can be perfectly valid TEI. Decisions about what to 
                    encode should be driven by research interest (and, 
                    inevitably, practical feasibility).</p>
            </div>
        </div>
    </div>
    <div xml:id="insum">
        <head>Summary</head>
        <p>In this article, we have given an overview of the TEI for those that 
            want to get started applying it. We gave a high-level overview of what 
            TEI encoding is, and explained the thinking behind the series of 
            articles of which this one is the first instalment. We discussed 
            the circumstances under which applying the TEI makes sense, and 
            when it does not. Finally, we gave an extended example of the 
            overall structure of a TEI text. We saw that a 
            TEI text always contains a header (<gi>teiHeader</gi>) that 
            describes that text. The text itself (<gi>text</gi>) may, in addition 
            to the text <gi>body</gi>, contain <gi>front</gi> and <gi>back</gi> matter. 
            Additionally, a TEI encoded text may contain a <gi>facsimile</gi> 
            element that relates the transcription to the pages that have been 
            transcribed and to images of these pages. The transcription itself 
            is usually structured using <gi>div</gi> element for the textual divisions, 
            which in their turn will contain <gi>p</gi> elements (if we are dealing 
            with prose). </p>
        <p>We also saw a number of extras: we identified abbreviations, we encoded 
            additions and deletions, and annotated references to persons. As 
            said earlier, there is nothing in the TEI which obliges us to provide 
            that information. Decisions about the whether to encode such 
            features depend, among other things, on the text being edited, 
            type of edition that is being planned, and the resources that are 
            available. For those, however, that 
            want to encode them, the TEI provides the necessary mechanisms. </p>
        <p>But what exactly is XML, and why are we using it? Why do we provide 
            our texts with this type of encoding at all? Why don't we use 
            a <term target="getstartgloss.xml#wys">wysiwyg</term> editing environment, 
            the way modern word processors do? How can we process 
            files such as the one we saw? The next instalments in 
            this series will deal in depth with some of the questions 
            that we could only touch upon in this article.</p>
    </div>
    <div xml:id="inlit">
        <head>Literature</head>
        <p>Overviews of the TEI are given in <ref target="#cumm2007">Cummings (2007)</ref>, 
            <ref target="#roma2009">Romary (2009)</ref> and <ref target="#vanh2010">Vanhoutte and 
            Van den Branden (2010)</ref>. A cogent case for using the TEI is made by 
            <ref target="#sper2009">Sperberg-McQueen (2009)</ref>. An argument against the use of embedded
            markup is made by <ref target="#schm2010">Schmidt (2010)</ref>.            
        </p>
        <listBibl>
            <bibl xml:id="barn1995">
                <author>Barnard, David T.</author>, et al. (<date>1995</date>), 
                <title>Lessons for the World Wide Web from the Text Encoding Initiative</title>, in: 
                <title>World Wide Web Journal</title>, <biblScope>1</biblScope>, <biblScope>349-57</biblScope>.
            </bibl>
            <bibl xml:id="brad2005">
                <author>Bradley, John</author> and <author>Short, Harold</author> (<date>2005</date>), 
                <title>Texts into Databases. The Evolving Field of New-style Prosopography</title>, in: 
                <title>Literary and Linguistic Computing</title>, <biblScope>20 (Suppl. 1)</biblScope>, <biblScope>3-24</biblScope>.
            </bibl>
            <bibl xml:id="carl2003">
                <editor>Carlisle, David</editor>, et al. (<date>2003</date>), 
                <title>Mathematical Markup Language (MathML) Version 2.0 (Second Edition). W3C Recommendation 21 October 2003</title>. 
                <ptr target="http://www.w3.org/TR/MathML2"/>, accessed 2010-05-24.
            </bibl>
            <bibl xml:id="cumm2007"><author>Cummings, James</author> (<date>2007</date>), 
                <title>The Text Encoding Initiative and the Study of Literature</title>, in 
                <editor>Ray Siemens</editor> and <editor>Susan Schreibman</editor> (eds.), 
                <title>Blackwell Companion to Digital Literary Studies</title> (<publisher>Blackwell</publisher>: Malden (Ma)), 451-76.
            </bibl>
            <bibl xml:id="dero1999">
                <author>DeRose, Steven</author> (<date>1999</date>), 
                <title>XML and the TEI</title>, in: 
                <title>Computers and the Humanities</title>, <biblScope>33 (1-2)</biblScope>, <biblScope>11-30</biblScope>.
            </bibl>
            <bibl xml:id="grav2002">
                <author>Graves, Robert (1895-1985)</author>, (<date>2002</date>),
                <title>Diary of Robert Graves 1935-39 and ancillary material</title>,
                compiled by <editor>Beryl Graves</editor>, <editor>C.G. Petter</editor>, <editor>L.R. Roberts</editor>.
                <publisher>University of Victoria Libraries</publisher>, <pubPlace>Victoria B.C., Canada</pubPlace>. <ptr target="http://graves.uvic.ca/"/>.</bibl>
            <bibl xml:id="lava2006"><author>Lavagnino, John</author> (<date>2006</date>), 
                <title>When Not to Use TEI</title>, in: 
                <editor>Lou Burnard</editor>, <editor>Katherine O'Brien O'Keeffe</editor>, and <editor>John Unsworth</editor> (eds.),
                <title>Electronic Textual Editing</title> (<pubPlace>New York</pubPlace>: <publisher>MLA</publisher>), <biblScope>334-38</biblScope>.
            </bibl>
            <bibl xml:id="roma2009"><author>Romary, Laurent</author> (<date>2009</date>), 
                <title>Questions &amp; Answers for TEI Newcomers</title>, in: 
                <title>Jahrbuch für Computerphilologie</title>. <ptr target="http://computerphilologie.de/jg08/romary.pdf"/>, accessed 2010-05-21.
            </bibl>
            <bibl xml:id="schm2010">
                <author>Schmidt, Desmond</author> (<date>2010</date>), 
                <title>The inadequacy of embedded markup for cultural heritage texts</title>, in: 
                <title>Lit Linguist Computing</title>, <biblScope>[advance access]</biblScope>, <biblScope>fqq007</biblScope>.
            </bibl>
            <bibl xml:id="smit2006">
                <author>Smith, Jeff</author>, <author>Deshaye, Joel</author>, and <author>Stoicheff, Peter</author> (<date>2006</date>), 
                <title>Callimachus--Avoiding the Pitfalls of XML for Collaborative Text Analysis</title>, in: 
                <title>Literary and Linguistic Computing</title>, <biblScope>21 (2)</biblScope>, <biblScope>199-218</biblScope>.
            </bibl>
            <bibl xml:id="sper2009">
                <author>Sperberg-McQueen, C. M.</author> (<date>2009</date>), 
                <title>How to teach your edition how to swim</title>, in: 
                <title>Lit Linguist Computing</title>, <biblScope>24</biblScope>, <biblScope>27-39</biblScope>.
            </bibl>
            <bibl xml:id="vanh2010">
                <author>Vanhoutte, Edward</author> and <author>Van den Branden, Ron</author> (<date>2010</date>), 
                <title>The Text Encoding Initiative</title>, in: <editor>Marcia J. Bates</editor> and <editor>Mary Niles Maack</editor> (eds.), 
                <title>Encyclopedia of Library and Information Sciences</title> (<biblScope>1</biblScope>).
            </bibl>
            <bibl xml:id="wisn2009"><author>Wisneski, R.</author> and <author>Dressler, V.</author> (<date>2009</date>), 
                <title>Implementing TEI Projects and Accompanying Metadata for Small Libraries: Rationale and Best Practices</title>, in: 
                <title>Journal of Library Metadata</title>, <biblScope>9 (3)</biblScope>, <biblScope>264-88</biblScope>.
            </bibl>
        </listBibl>
    </div>
    <div xml:id="intut">
        <head>Tutorials</head>
    </div>
    
</div>
