<?xml version="1.0" encoding="UTF-8"?>
<div xml:id="in" xmlns="http://www.tei-c.org/ns/1.0">
    <head>Introduction</head>
    <p>This document should help you getting started using TEI. It cannot provide a full tutorial, and it cannot explain all of the detail 
    of the underlying technologies, but it should make life a little easier for someone who is confronted with the TEI (Text Encoding Initiative) for the first time. 
    This section begins by giving a brief explanation of the TEI (<ptr target="#inovr"/>), it then describes what you can expect from this document (<ptr target="#indoc"/>) and explains a number of 
    conventions that we'll use here (<ptr target="#incon"/>).</p>
    <div xml:id="inovr">
        <head>TEI: a very high-level overview</head>
        <p>If you are reading this document you have probably decided, or are considering, to use the TEI to create a digital version of one or more texts. 
            Someone may have told you you should do so, or you may have read about other projects that used the TEI. So what is TEI, and why is 
            it important? </p>
        <p>The simplest answer to that question is that the TEI is a set of guidelines for the encoding of text. Text encoding is the addition 
            of codes to text in order to make it possible for a computer to process that text. Text encoding assumes, usually, that 
            you already have a text, either by manually copying it, or by using an <ref target="#glocr">OCR</ref> program. The codes that you add to the 
            text will describe some aspect of the text: either by adding information such as author or place of publication (metadata), or 
            by characterizing the role or meaning or other properties of pieces of text. The title of this chapter, to give a very simple example, might be encoded as:</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <head> TEI: A very high-level overview </head>
         </egXML>
        <p>You might ask why we do this. Word processing software, like Microsoft Word, can after all handle text very well without 
            us having to type codes in pointing brackets. The long answer is given <ref target="#dm">here</ref>, but a shorter answer is that 
            explicit codes are probably simple and easy to recognize, especially if there is some agreement about 
            them (that is, if there is a public standard).  And it is true that other programs can compute wordlists and 
            complex concordances, without any need for these codes, but it is only true for a single text where all text 
            should be treated the same way. Once you have multiple texts you need way to associate texts with titles, 
            and if your text consists of poetry with a prose commentary, you may want to have word counts by type 
            of text. That is to say: you need a structured representation of text properties, and that is what text encoding 
            provides.</p>
        <p>If you know something about web pages, you may think by now that text encoding is like using 
            <ref target="#glhtml">HTML</ref>, the language of the web. Isn’t the <gi>head</gi> that we saw just now very much like the 
            various <gi>h1</gi>, <gi>h2</gi>, … elements that HTML uses to encode headers at various levels? And indeed, the encodings 
            that the TEI uses, make use of the same formalism that HTML uses (so-called tags between angle brackets), and some of these 
            tags it shares with HTML, such as <gi>p</gi> for paragraph and <gi>div</gi> for textual division. The formalism 
            is called <ref target="#glxml">XML</ref> (more about it <ref target="#tbxml">here</ref>). But what makes TEI 
            different from HTML is that the TEI provides tags for many different text types (e.g. poetry, drama, dictionaries) and 
            many different sorts of properties (to document e.g. metrical properties, or textual genesis), and that each of 
            these tags has an explicit, well-documented meaning. To give an example: you can represent a play in HTML, but 
            HTML has no special tags to indicate a speech, or a stage direction. TEI does have these, and a computer 
            program that reads a TEI representation of a play can use that knowledge, e.g. to create 
            an index of speeches by character. It couldn’t do so from an HTML representation.</p>
        <p>Your next question might be: so, once I have a TEI-encoded version of my text (i.e. an XML file 
            that uses TEI tags), can I put that text on the web? The answer is: yes you can, but not without 
            one other step. You need some sort of program that can turn your encoded text into a (collection of) web page(s). 
            Remember, during the encoding process you explicitly describe the structure of your text: the verse lines, the 
            headings, the notes, etc. But you say nothing about how you want these to be represented on the web, or how 
            you want them to be printed. There is a very good reason for this. For most texts, there is not a single best way to 
            represent their content. One of the reasons why we do text encoding is that we want to do multiple things with 
            the texts (e.g. show on the web, present a search facility that can search by chapter, index personal names, etc.); 
            for that very reason, presentation functionality is kept outside of the text. The idea is that the encoding should not be 
            created for a single application program. Programs come and go; the encoding remains.</p>
        <p>There are many programming languages that can be used to create a web page out of an XML file, but by far the 
            most common is <ref target="#glxslt">XSLT</ref>. We apply what is called an XSLT stylesheet to an XML file to 
            transform it into one or more web pages. The TEI provides a set of sample stylesheets that can handle many types of 
            text, but usually some stylesheet programming is necessary to create a suitable set of web pages for a project. The 
            amount of programming depends very much on the ambition level and the properties of the text. 
            More about XSLT <ref target="#st">here</ref> 
            (By the way, there is also another type of stylesheet, viz. <ref target="#glcss">CSS</ref> stylesheets. 
            CSS stylesheets define styles for HTML (web) pages: margins, colours, font sizes, etc.)</p>
        <p>Two more questions that often come up when discussing TEI are (1) must I create this encoding by hand? 
            And (2) can I modify the TEI encodings and add my own tags? As to the first question, the answer is: to some extent. 
            Usually, people create XML files with a program called an XML editor (more <ref target="#ed">here</ref>). Most modern XML 
            editors can help you create the encoding, based on a <ref target="#glsch">schema</ref>. The schema defines what tags 
            are allowed and where they are allowed, and the XML editor can prompt the user with a list of the allowed tags. 
            The program can also check whether the tags that are used are actually allowed, in a process called 
            validation. Some XML editors can show the definitions of these tags during editing, or adjust the layout 
            and formatting of the text based on the tags that are used. All of these help very much in making XML editing a fairly 
            straightforward process, depending on your background. </p>
        <p>As to the second question: yes, you can modify the TEI encoding when your text has properties that the existing 
            encodings really do not handle adequately. You can describe the extra tags that you need, or the ones that you 
            need to change, in a special document called <ref target="#glodd">ODD</ref>. The TEI provides a web application 
            called <ref target="#glroma">Roma</ref> which helps create such a document. Roma can also generate a schema 
            from the ODD document. That schema, as we just saw, helps you create and validate your TEI document. 
            Much more about this <ref target="#sc">here</ref>.</p>
        <p>The technologies that we have mentioned in this subsection (TEI, XML, HTML, XSLT, Schema’s, and XML editors) are 
            more or less what we will discuss in the remainder of this document. But TEI is not just a set of encodings and 
            guidelines for using them. The TEI is also an organization that maintains these guidelines, and a community of 
            users that applies the guidelines. In fact the users are the organization: the TEI is a consortium of universities, 
            libraries and research organizations, and the TEI board and council are elected by the member organizations. Using 
            TEI is taking part in the community of TEI users that meet on the TEI mailing list, in Special Interest 
            Groups, on the yearly TEI member meeting and on other occasions. </p>
    </div>
    <div xml:id="indoc">
        <head>What this document does, and what it doesn't</head>
        <p>If you have toyed around with downloading computer programs, you will have read other 'getting started' documents. Usually they are one or two pages long. The getting started document
            that you are reading now is about 50 pages. long. That means that, depending on your purposes, it'll probably take you longer to get started using TEI than it takes to get to use 
            your average computer program. The reason for this is that learning TEI is similar - in effort and in reward - to things like learning a new language or mastering a musical instrument. 
            If you have had no previous experience of some of the more technical aspects of computing, getting to use TEI is going to present you with a sometimes steep learning curve. But then, 
            having learned to use TEI will not just enable you to encode, present and analyse your documents, you will also have acquired a deeper understanding of your texts, and text in general, 
            you will have mastered a set of technologies that will be of use throughout your professional life, and you will have met with a crowd of friendly and innovative scholars and programmers 
        that may also prove to be an asset in your career as well as a reward in itself.</p>
        <p>So, recognising that learning TEI is never going to be easy, this document will help you getting started. It is not a full course. We list online training opportunities in <ptr target="#li"/>. 
            Neither can it provide a substantive tutorial in the main technologies that TEI uses, such as <ref target="#glxml">XML</ref>, <ref target="#glxslt">XSLT</ref> 
            and <ref target="#glhtml">HTML</ref>. We refer to tutorials elsewhere wherever possible.</p>
        <p>The document aims to serve a diverse audience. Its readers may include academics (postgraduate, PhD, researcher, professor) who want to start understanding and using 
            the TEI: e.g. a graduate student who wants to make an edition of a book he/she is writing a thesis on. The audience may also include people who are not themselves scholars but who 
            are, or will be, working as encoders with a project. These may be undergraduates, editorial assistants, etc. We assume readers that are willing to learn something new, ready 
            to work hard and to try various solutions. We also assume someone that is reasonably comfortable using computers, but do not expect 
            experience in programming or previous knowledge of XML or HTML. </p>
        <p>By 'reasonably comfortable using computers' we mean, among other things, that we expect you to have basic computer skills, 
            such as create disk folders, move files, download, install and run programs, 
            and use <ref target="#glzip">zip/unzip</ref> software. There is no point in this document trying to explain very elementary computer tasks. If you feel your basic computer skills 
            are inadequate, you may want to attend elementary computer training or study a beginner's tutorial.</p>
        <p>This document opens by discussing the question whether you should use TEI (<ptr target="#sy"/>). Much as we believe TEI is a powerful tool, there are also situations where TEI does
        not fit the bill. In this section we discuss whether TEI is appropriate to what you want to do. The next section (<ptr target="#tb"/>) describes a number of technologies that the TEI uses 
        in text encoding. We then go on to discuss (in <ptr target="#os"/>) the overall structure of a TEI text. The next section (<ptr target="#ed"/>) examines XML editing software, the principal 
            tool for creating and modifying TEI texts. Once we have an editor we can load, modify and validate TEI documents (<ptr target="#lm"/>). We use stylesheets (<ptr target="#st"/>) to 
            transform XML documents into other documents, e.g. to read them on the web. Once you have seen this, you'll want to begin using this on your own texts (<ptr target="#ot"/>). </p>
        <p>
            A final piece of technology we explain in this document is an XML schema. With schemas we describe exactly which elements can occur in a given XML document, and what elements they 
            may contain. Using the description, we can check the validity of the XML document. That is one of the reasons that we want to define schemas that closely fit the documents 
            that we are encoding. The TEI provides a mechanism for creating such schemas. We discuss schemas and that mechanism here: <ptr target="#sc"/>. What remains then is to ask what 
            to do once you have studied this document (<ptr target="#wg"/>). The document concludes with a Glossary (<ptr target="#gl"/>) and a list of Literature (<ptr target="#li"/>).  </p>
        <p>This document should be useful, irrespective of the computer platform you are using (Windows, Unix, Apple). In fact, an important reason why the TEI was created was that computer 
            files tended to be specific to a single platform. Work that scholars did to encode historic texts was lost when platforms changed. Platform independence is therefore very important 
            to the TEI. The software that we discuss in this document runs on all major platforms, though things may not look exactly the same everywhere. Where we have to describe 
            things that are specific to one or more platforms, we will clearly indicate this.</p>
    </div>
</div>
