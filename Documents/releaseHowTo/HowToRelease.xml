<?xml version="1.0"?>
<!--
$LastChangedDate: 2010-04-10$.
$LastChangedBy: jamesc$
$LastChangedRevision$
-->
<TEI   xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader> 
    <fileDesc> 
      <titleStmt>
	<title>Maintaining the TEI</title>
	<author>Sebastian Rahtz</author>
      </titleStmt>
      <editionStmt>
	<edition>
	  <date>March 2011</date>
	</edition>
      </editionStmt>
      <publicationStmt> 
	<p> For the TEI Website</p> 
      </publicationStmt> 
      <sourceDesc> 
	<p>Derived from lots of other talks</p> 
      </sourceDesc> 
    </fileDesc>
  </teiHeader>
  <text>
    <body>
<p>The purpose of this guide is to explain the steps that need to be
taken when changes are made to the TEI P5 sources.</p>
<div xml:id="svn">
<head>Building the release</head>
<p>You will always start from the packages on Sourceforge, managed using Subversion. These are

<list type="gloss">
<label>I18N</label><item>Input to I18N utilities. Not published</item>
<label>P5</label><item>The main TEI P5 source</item>
<label>Roma</label><item>The web application</item>
<label>Stylesheets</label><item>Base stylesheets</item>
<label>TEIOO</label><item>Support for TEI and Open Office. Not published</item>
<label>tei-emacs</label><item></item>
</list>
The rest of this documents assumes that we are dealing with the main
<ident>P5</ident> package.
</p>
<p>First edit the file <ident>VERSION</ident>, and make it say what
you are about to release. Now check that the source is clean and tested. 
When you are happy that these are what you want,
do <code>make dist</code>. This will build a set of runtime
directories in <code>./release</code>, for 
<ident>tei-p5-database</ident>,
<ident>tei-p5-exemplars</ident>,
<ident>tei-p5-source</ident>,
<ident>tei-p5-doc</ident>,
<ident>tei-p5-schema</ident>, and
<ident>tei-p5-test</ident>. There is a zip file and a directory tree
for each. </p>
</div>

<div xml:id="sf">
<head>Uploading file releases to Sourceforge</head>
<p>The zip files we build in <code>P5/release</code> 
are what we put up on Sourceforge. </p>
</div>

<div xml:id="debian">
<head>Making Debian packages</head>
<p>You make a Debian package
by combining a set of source files with Debian-specific metadata and
support files. For each of the 
6 packages described above, there is a directory under P5 named
<code>debian-<emph>packagename</emph></code>
inside which is a directory called <code>debian</code> containing the
necessary added material. The Make target <code>deb</code> goes into
each of the directories and builds the package, creating 6 corresponding .deb, .build and .changes
files.</p>

<p>Now you can move the Debian files to a repository and rebuild
the package database. </p>

<p>There are plenty of potential slips 'twixt cup and lip here.
Building Debian packages is extensively documented on the web, but
there is a lot more to it than I describe here (such as the content of
the control files for post-installation, pre-removal, init scripts,
menus etc).
</p>

<p>The important TEI-related Debian packages are
<list type="gloss">
<label>nxml-mode-tei  </label><item>Emacs mode for editing XML documents</item>
<label>tei-doc        </label><item>P4 Guidelines</item>
<label>tei-emacs      </label><item>Emacs setup</item>
<label>tei-lite       </label><item>TEI Lite</item>
<label>tei-oxygen     </label><item>oXygen XML editor setup</item>
<label>tei-p5-doc     </label><item>P5 Guidelines</item>
<label>tei-p5-schema  </label><item>P5 Schemas/DTDs</item>
<label>tei-p5-source  </label><item>P5 Sources</item>
<label>tei-roma       </label><item>Roma TEI Schema Builder</item>
<label>tei-schema     </label><item>P4 Schemas/DTDs</item>
<label>tei-teaching   </label><item>Teaching support, exercises, data etc</item>
<label>tei-xsl        </label><item>XSLT stylesheets</item>
<label>tei-xsl-teic   </label><item>XSLT stylesheets for TEIC</item>
</list>
Some of these will require other packages, which will get pulled in as
needed (trang, jing etc).</p>
</div>

<div xml:id="web">
<head>Installing data on the TEI web site</head>
<p>People wanting to download bundles should always be sent to SF,
so the point of having dtds, schemas and stylesheets on the web site(s) is 
<list>
<item>to service the rendering web pages themselves</item>
<item>to let Roma find resources</item>
<item>to provide a service of fixed URLs for DTDs and schemas</item>
</list>
Currently, this means the population of the <code>/usr/share/xml/tei</code> and
<code>/usr/share/doc/tei-*</code> directories:
<eg>
</eg>
The <ident>schema</ident> directory holds copies of the generated
Relax NG schemas (XML and compact format) from P5; the stylesheet
directory holds the <emph>generated</emph> XSLT stylesheets for general TEI
documents (<code>stylesheet</code>). This directory has 2 copies, for
P4 and for P5, but both are generated from the master copy in
Subversion. Within the two copies, there are separate subdirectories for
HTML, FO, LaTeX and ODD-processing. These stylesheets are used
extensively by the web site and by Roma, and are changed at your peril.
</p>
</div>

<div xml:id="roma">
<head>Setting up Roma and eXist</head>
<p>You thought it was easy so far?  Now we have to set up Roma and
eXist in tandem with the new data. </p>
<p>Roma needs access to XSLT stylesheets, P5 Relax NG schemas, and an
eXist database of TEI P5. Where it finds these is determined by the
file <code>roma/config.php</code> (on the web site, this is in the
<code>/usr/share/tei-roma/</code> directory). However, this varies between sites, so
what is distributed is <code>config-dist.php</code>. </p>

<p>How does TEI P5 get into eXist? Using the script <code>tei-database-rebuild</code>.</p>

</div>



    </body>
  </text>
</TEI>
