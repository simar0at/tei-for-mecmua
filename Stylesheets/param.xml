<?xml version="1.0"?>
<!-- $Date$, $Author$, $Revision$ -->

<TEI.2>
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI XSL Customization Handbook</title>
        <author>Sebastian Rahtz</author>
      </titleStmt>
      <publicationStmt>
        <p> </p>
      </publicationStmt>
      <sourceDesc>
        <p></p>
      </sourceDesc>
    </fileDesc>
    <profileDesc>
    </profileDesc>
    <revisionDesc>
         <change>
            <date>$Date$.</date>
            <respStmt>
               <name>$Author$</name>
            </respStmt>
            <item>$Revision$</item>
         </change>
    </revisionDesc>
  </teiHeader>
  <text>
<body>

<div>
 <head>Introduction</head>

<p>This section describes how to produce a customization of the TEI
stylesheets. It describes all the parameters which you can set, the
templates which are designed to be changed, and the empty templates
provided into which you can add your own code.</p>

<p> There are 13 areas for customization. In most cases there are
parameters and templates which are specific to one of the three
output methods (HTML, FO and LaTeX), and those which are common to all
three.</p>

</div>


<div><head>Making HTML: example</head>
<p>
You can simply refer to the specification <code>html/tei.xsl</code>
directly with your XSL processor, or install it locally on your own
server.  For more flexibility, you may prefer to reference the
specifications from an XSL wrapper of your own. The minimal
specification would look like this:
<eg>
<![CDATA[
<xsl:stylesheet 
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
  <xsl:import href="html/tei.xsl"/>
</xsl:stylesheet>
]]>
</eg>
You can customize the result by adding to this wrapper file (see
previous section).  The normal result will be a single stream of HTML
which you can save in a file. You can also configure it to produce
multiple output files, one per top-level <gi>div</gi>, <gi>div0</gi>,
or <gi>div1</gi>.
</p>

</div>

<div id="output">
 <head>Output</head>
<p>You can set a name for the output file(s); if you ask for multiple
output files, this name will be used to create unique filenames for
each section. By default, results will go to wherever your XSLT
processor normally writes (usually standard output).  If you opt to
have files created, you can specify the name of the directory where
the output is to be placed.</p>

<p>If you are making HTML, do you want a single output page, or a
separate one for each section of the document?   You
can decide to have a different splitting policy for front and
back matter.  </p>

</div>


<div id="layout">
<head>Layout</head>
<p>There are three ways to provide a constant navigation aid. You can
either make the whole page into a table, where the first column has a table
of contents, or you can make an HTML frameset, or you can just have 
a table of links on the left or right</p>
<p>Hypertext links present special problems, as we have to choose
whether they should start a new window, occupy all of the current
window, or stay within the frame. These stylesheets implement the
following rules:
<list type="ordered">
<item>Any <gi>ref</gi> or <gi>ptr</gi> link stays within the frame</item>
<item>Any link containing <q>://</q> uses the whole browser window</item>
<item>Any link starting <q>.</q> uses the whole browser window</item>
<item>If the stylesheet sets no splitting of the document,
any <gi>xref</gi> or <gi>xptr</gi> link  uses the whole browser
window</item>
<item>If a <gi>xref</gi> or <gi>xptr</gi> link has a
<ident>rend</ident> attribute value of <q>noframe</q>, the whole browser
window is used</item>
<item>If a <gi>xref</gi> or <gi>xptr</gi> link has a
<ident>rend</ident> attribute value of <q>new</q>, a new browser window
is started</item>
</list>
</p>
</div>

<div id="links">
<head>Standard page features</head>
<p>The default behaviour of the system is to construct each HTML page
with per-page navigation bars top and bottom, and a standard set of
navigation links underneath. </p>
</div>


<div id="headings">
 <head>Headings</head>
<p>Headings for sections can be customized in various ways.</p>
</div>

<div id="numbering">
<head>Numbering</head>
<p>Section headings, figures, tables and notes can be numbered
automatically.  We can set the numbering of front matter and back
matter separately. If you prefer to supply your own numbering, using
the <code>n</code> attribute, you can choose this over automatic
numbering.</p>

<p>Normally, heading numbers are followed by <q>. </q>, but you can vary
this. This would let you use eg fixed spaces.</p>
</div>


<div id="toc">
<head>Table of contents generation</head>
<p>You probably want tables of contents built for your document, using
the <gi>div</gi> structure. However, if you have used a <gi>divGen
type="toc"</gi> explicitly, that will also create a table of contents,
so you can suppress the automatic one.  When a table of contents is
created, you choose how many levels of headings it will show.
You can choose whether or not the front and backmatter appear
in the table of contents.</p>
</div>



<div id="i18n">
<head>Internationalization</head>
<p>At various places, the system has to create text. You can choose
the words it uses (eg translate them to another language).</p>
</div>


<div id="CSS">
 <head>CSS</head>
<p>Setting up material for the CSS file to accompany HTML output.</p>
</div>

<div id="tables">
 <head>Tables</head>
<p>Default behaviour of table elements.</p>
</div>

<div id="figures">
 <head>Figures and graphics</head>
<p>Sometimes you need to prefix the names of all graphics files with 
a directory name or a URL, or provide a default suffix.
You can also tell <gi>figure</gi> elements whether or not to
produce anything.</p>

</div>
<div id="style">
<head>Style</head>
<p>You can choose lots of features which affect the font, size, etc
<list>
<item>What font to use for URLs.</item>
<item>Whether titles, dates and authors are shown.</item>
<item>Whether headings of objects are included in cross-references.</item>
</list>
</p>
</div>

<div id="hook">
<head>Hooks</head>
<p>A set of templates which are empty by default; they can be used
to add code at strategic points. The content must be valid XSLT.</p>
</div>


<div id="misc">
<head>Miscellaneous and advanced</head>
<p>Finally, some miscellaneous or advanced features which you probably won't
use much.</p>
</div>
</body>
</text>
</TEI.2>

