#!/bin/bash
doOTA()
{
echo OTA Doctype
perl in.pl < $D.sgml > $D.stage2
osx -E20000 -f $D.errors -ccatalog -xlower -xcomment -xempty -xndata  $D.stage2 | perl out.pl > $D.stage3
}

doTEI()
{
echo TEI Doctype
grep -q DOCTYPE $D.sgml || (mv $D.sgml temp; cat NOHEAD temp > $D.sgml)
perl in.pl < $D.sgml > $D.stage2
osx -E20000 -f $D.errors -ccatalog -xlower -xcomment -xempty -xndata  $D.stage2 | perl out.pl > $D.stage3
}
doheader()
{
echo Starts with header
cat TEIHEAD $D.sgml > $D.stage1
echo "</TEI.2>" >> $D.stage1
perl in.pl < $D.stage1 > $D.stage2
osx -E20000 -f $D.errors -ccatalog -xlower -xcomment -xempty -xndata  $D.stage2 | perl out.pl > $D.stage3
}

dotext()
{
if test -e $ORIG/[a-z]*$F*.sgm
then
 echo Using header from $ORIG/*$F*.sgm
 perl justheader.pl $ORIG/*$F*.sgm  > $D.stage1
 cat $D.sgml >> $D.stage1
else
  echo Using boilerplate header
  cat TEXTHEAD $D.sgml > $D.stage1
fi
perl in.pl < $D.stage1 > $D.stage2
zip -q foo $D.stage2
unzip -o -a -q foo.zip 
rm foo.zip

osx -E20000 -f $D.errors -ccatalog -xlower -xcomment -xempty -xndata  $D.stage2 | perl out.pl > $D.stage3
}

FILES="
1000/1534/chabuda.1534
1000/1535/colpoem.1535
1000/1567/flebarn.1567
1000/1568/flechan.1568
1000/1569/fledeen.1569
1000/1570/fleispr.1570
1000/1571/flemtho.1571
1000/1572/flewopr.1572
1000/1573/fra2phi.1573
1000/1574/fraauto.1574
1000/1575/frabost.1575
1000/1576/fralond.1576
1000/1577/frapari.1577
1000/1578/fraphil.1578
1000/1579/frapoor.1579
1000/1582/hawfans.1582
1000/1583/hawblir.1583
1000/1585/hawmarb.1585
1000/1587/jamamwr.1587
1000/1588/jamenwr.1588
1000/1592/jeflett.1592
1000/1593/jefmisc.1593
1000/1594/jefpapr.1594
1000/1598/johrass.1598
1000/1600/joncati.1600
1000/1602/jonever.1602
1000/1604/jonvolp.1604
1000/1629/melmoby.1629
1000/1630/melredb.1630
1000/1631/melwhit.1631
1000/1632/orw1984.1632
1000/1637/scocasd.1637
1000/1638/scopoem.1638
1000/1644/thocape.1644
1000/1645/thomain.1645
1000/1647/thowcmr.1647
1000/1649/twamiss.1649
1000/1651/twatoms.1651
1000/1663/goefaus.1663
1000/1676/chanceng.1676
1000/1685/paston.1685
1000/1810/watch.1810
1000/1814/letters.1814
1000/1815/miscellany.1815
1000/1843/civildis.1843
"

BADMILTON="1000/1827/1827.sgml
2000/2225/2225.sgml 2000/2226/2226.sgml 2000/2227/2227.sgml 2000/2228/2228.sgml"

BADMARLOWE="1000/1621/marfaus.1621
1000/1622/marjewm.1622
1000/1623/marmasp.1623
1000/1625/marpass.1625
1000/1626/marphar.1626
1000/1627/marrare.1627
1000/1628/martamb.1628"

BADAUSTEN="1000/1519/ausemma.1519.txt 1000/1520/auslett.1520
1000/1521/ausmans.1521 1000/1522/ausnoab.1522 1000/1523/auspers.1523
1000/1524/ausprpr.1524.txt 1000/1526/aussese.1526 1837"

cat > out.pl <<EOF
while (<>) {
 s+\^\(SOFTHI+<g ref="SOFTHI"/>+g;
 s/\^\(/\&/g;
print;
}
EOF
cat > justheader.pl <<EOF
\$do=1;
while (<>) {
  if (/<TEXT>/) { \$do = 0; }
  if (/<\/TEI.2>/) { \$do = 0; }
   if (\$do) { print; }
}
EOF



# "G"
# "T"
# "at" 
# "c"
# "c."
# "u."
# "acute"
# "grave"
# "uml"
# "breve"

 cat > in.pl <<EOF
while (<>) {
s/<illus>/<milestone type="illus">/g;
s/<\/loc>//g;
s/<loc>//g;
s/<locdoc>[^<]*<\/locdoc>//;
s+</i.>+</i>.+;

s/  <!ENTITY aogon "a">/  <!ENTITY aogon "ą">/;
s/  <!ENTITY eacute "\'e">/  <!ENTITY eacute "é">/;
s/  <!ENTITY lstrok "{\l}">/  <!ENTITY lstrok "ł">/;
s/  <!ENTITY nacute "\'n">/  <!ENTITY nacute "ń">/;
s/  <!ENTITY szlig "{\ss}">/  <!ENTITY szlig "ß">/;
s/  <!ENTITY zdot "\.z">/  <!ENTITY zdot "ż">/;
s/  <!ENTITY Ccirc "^C">/  <!ENTITY Ccirc "Ĉ">/;
s/  <!ENTITY Gcirc "^G">/  <!ENTITY Gcirc "Ĝ">/;
s/  <!ENTITY Hcirc "^H">/  <!ENTITY Hcirc "Ĥ">/;
s/  <!ENTITY Jcirc "^J">/  <!ENTITY Jcirc "Ĵ">/;
s/  <!ENTITY Scirc "^S">/  <!ENTITY Scirc "Ŝ">/;
s/  <!ENTITY Ubreve "^U">/  <!ENTITY Ubreve "Ŭ">/;
s/  <!ENTITY ccirc "^c">/  <!ENTITY ccirc "ĉ">/;
s/  <!ENTITY gcirc "^g">/  <!ENTITY gcirc "ĝ">/;
s/  <!ENTITY hcirc "^h">/  <!ENTITY hcirc "ĥ">/;
s/  <!ENTITY jcirc "^j">/  <!ENTITY jcirc "ĵ">/;
s/  <!ENTITY scirc "^s">/  <!ENTITY scirc "ŝ">/;
s/  <!ENTITY ubreve "^u">/  <!ENTITY ubreve "ŭ">/;


s+<i>+<emph>+g;
s+</i>+</emph>+g;

s/\&rehy;/\^\(SOFTHI/g;
s/\&shy;/\^\(SOFTHI/g;

s/<Page/<titlePage/g;
s/tPage>/titlePage>/g;
s/<dTitle/<docTitle/g;
s/dTitle>/docTitle>/g;
s/<dAuthor/<docAuthor/g;
s/dAuthor>/docAuthor>/g;
s/<dImprint/<docImprint/g;
s/dImprint>/docImprint>/g;
s/<gk/<foreign lang=el/g;
s/gk>/gk>/g;

s//\^\(#x00A3;/g;
s//\^\(#x00E9;/g;
s//\^\(#x00E7;/g;
s//\^\(#x00E0;/g;
s//\^\(#x00DB;/g;
s//\^\(#x0131;/g;
s//\^\(#x00E2;/g;
s//\^\(#x00F6;/g;
s//\^\(#x00EA;/g;


s//\^\(#x00C9;/g; 
s//\^\(#x00F4;/g;
s//\^\(#x00FC;/g;
s//\^\(#x00EE;/g;
s//\^\(#x00E6;/g;
s//y/g;
s//\^\(#x00F2;/g;

s/\&a;/\^\(#x00E4;/g;
s/\&A;/\^\(#x00C4;/g;
s/\&o;/\^\(#x00F6;/g;
s/\&O;/\^\(#x00D6;/g;
s/\&u;/\^\(#x00FC;/g;
s/\&U;/\^\(#x00DC;/g;

s/^<Author>[^<]+<\/Author>//;
s/^<Title>[^<]+<\/Title>//;
s/^<Edition>[^<]+<\/Edition>//;
s/^<Date>[^<]+<\/Date>//;

s/\&Aelig;/\^\(#x00C6;/g;
s/\&agrav;/\^\(#x00E0;/g;
s/\&aelig;/\^\(#x00E6;/g;
s/\&amp;/\^\(amp;/g;
s/\&ccedil;/\^\(#x00E7;/g;
s/\&ccedilla;/\^\(#x00E7;/g;
s/\&ccirc;/\^\(#x0109;/g;
s/\&cdq;/\^\(#x201D;/g;
s/\&cnq;/\^\(#x2019;/g;
s/\&copyrite;/\^\(#x00A9;/g;
s/\&cq;/\^\(#x2019;/g;
s/\&cq /\^\(#x2019;/g;
s/\&csb;/\^\(#093;/g;
s/\&dag;/\^\(#x2020;/g;
s/\&dagger;/\^\(#x2020;/g;
s/\&dash;/\^\(#x2010;/g;
s/\&deg;/\^\(#x00B0;/g;
s/\&dollar;/\^\(#x0024;/g;
s/\&dq;/\^\(#x0022;/g;
s/\&eacu;/\^\(#x00E9;/g;
s/\&eacute;/\^\(#x00E9;/g;
s/\&ecirc;/\^\(#x00EA;/g;
s/\&egrave;/\^\(#x00E8;/g;
s/\&emacr;/\^\(#x0113;/g;
s/\&euml;/\^\(#x00EB;/g;
s/\&gt;/\^\(gt;/g;
s/\&iacute;/\^\(#x00ED;/g;
s/\&icirc;/\^\(#x00EE;/g;
s/\&igrave;/\^\(#x00EC;/g;
s/\&imacr;/\^\(#x012B;/g;
s/\&iuml;/\^\(#x00EF;/g;
s/\&ldquo;/\^\(#x201C;/g;
s/\&lsqb;/\^\(#x005B;/g;
s/\&lsquo;/\^\(#x2018;/g;
s/\&lstrok;/\^\(#x0142;/g;
s/\&mdash;/\^\(#x2014;/g;
s/\&nacute;/\^\(#x0144;/g;
s/\&ndash;/\^\(#x2013;/g;
s/\&ntilde;/\^\(#x00F1;/g;
s/\&oacute;/\^\(#x00F3;/g;
s/\&ocirc;/\^\(#x00F4;/g;
s/\&odq;/\^\(#x201C;/g;
s/\&oelig;/\^\(#x0153;/g;
s/\&ograve;/\^\(#x00F2;/g;
s/\&omacr;/\^\(#x014D;/g;
s/\&onq;/\^\(#x2018;/g;
s/\&oq;/\^\(#x2018;/g;
s/\&osb;/\^\(#091;/g;
s/\&ouml;/\^\(#x00F6;/g;
s/\&pound;/\^\(#x00A3;/g;
s/\&rdquo;/\^\(#x201D;/g;
s/\&rsqb;/\^\(#x005D;/g;
s/\&acute;/\^\(#x005D;/g;
s/\&rsquo;/\^\(#x2019;/g;
s/\&rule;/\^\(#x2014;/g;
s/\&slash;/\^\(#47;/g;
s/\&ss;/\^\(#x00DF;/g;
s/\&szlig;/\^\(#x00DF;/g;
s/\&uacute;/\^\(#x00FA;/g;
s/\&ubreve;/\^\(#x016D;/g;
s/\&ucirc;/\^\(#x00DB;/g;
s/\&ugrave;/\^\(#x00F9;/g;
s/\&umacr;/\^\(#x016B;/g;
s/\&uuml;/\^\(#x00FC;/g;
s/\&y;/\^\(#x021D;/g;
s/\&t;/\^\(#x00FE;/g;
s/\&zdot;/\^\(#x017C;/g;
print;
}
EOF
cat > TEXTHEAD <<EOF 
<!DOCTYPE text PUBLIC "-//TEI//DTD TEI Lite 1.0//EN" []>
EOF
cat > TEIHEAD <<EOF 
<!DOCTYPE TEI.2 PUBLIC "-//TEI//DTD TEI Lite 1.0//EN" []>
<TEI.2>
EOF
cat > NOHEAD <<EOF 
<!DOCTYPE TEI.2 PUBLIC "-//TEI//DTD TEI Lite 1.0//EN" []>
EOF

NU=$HOME/TEI/tei.oucs.ox.ac.uk/Projects/nuOTA

for i in $FILES
do
  ORIG=resources/`dirname $i`
  D=`dirname resources/$i | sed 's/\// /g' | awk '{print $3}'` 
  cp resources/$i $D.sgml
  zip -q foo $D.sgml
  unzip -o -a -q foo.zip 
  rm foo.zip
  H=`  head -1 $D.sgml  | sed 's/ id=.*//' | sed 's/ ID=.*//'   | sed  's/ PUBLIC.*//'  | sed  's/ SYSTEM.*//'`
  echo Process $D
 echo  " .. starts with \"$H\""
 case $H in
 "<!DOCTYPE TEI.2")  doTEI ;;
 "<!DOCTYPE tei.2")  doTEI ;;
 "<!DOCTYPE ota")  doOTA ;;
 "<!DOCTYPE ota ")  doOTA ;;
 "<TEI.2>")  doTEI ;;
 "<TEXT")  dotext ;;
 "<TEXT>")  dotext ;;
 "<Text")  dotext ;;
 "<header>")  doheader;;
 "<text")  dotext ;;
 "<text>")  dotext ;;
 "<text> ")  dotext ;;
  esac

perl -p -i -e 's/.*not a function name\n//' $D.errors
perl -p -i -e 's/.*reference to non-existent ID.*\n//' $D.errors
ls -l $D.errors | awk '{print $5,$8}'
xsltproc $NU/tei2tei.xsl $D.stage3 | sed -e '/^ *$/d' > $D.stage4
xsltproc $NU/../../../Sourceforge/trunk/P4toP5/p4top5.xsl $D.stage4 > $D.stage5
xsltproc --stringparam ID $D changeheader.xsl $D.stage5 > $D.xml
rnv $NU/../../../Sourceforge/trunk/P5/Exemplars/tei_all.rnc $D.xml && echo $D.xml SUCCESS
grep "<title[> ]" $D.xml
echo "\n"

done

