<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="dist" name="teitoepub">
  <!--
 Convert TEI documents into ePUB files.
 -->
  <!-- Path to TEI XML file. -->
  <property name="inputFile" value=""/>

  <!-- Path where the output ePUB file will be saved. -->
  <property name="outputFile" value=""/>

  <!-- which profile -->
  <property name="profile" value="default"/>

  <!-- where does oxygen keep stuff -->
  <property name="oxygenlib" value=""/>

  <!-- Stylesheet for transformation -->
  <property name="stylesheetFile" value="../profiles/${profile}/epub/to.xsl"/>
  <property name="odd2oddxsl"  value="../odds2/odd2odd.xsl"/>
  <property name="odd2litexsl" value="../odds2/odd2lite.xsl"/>
  <dirname property="inputFileDir" file="${inputFile}"/>
  <dirname property="outputDir" file="${outputFile}"/>
  <property name="outputTempDir" value="${outputDir}/temp"/>

  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>
<!--  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>-->

  <condition property="processODD">
    <equals arg1="${odd}" arg2="true"/>
  </condition>

  <target name="notodd" unless="processODD">
    <copy 
	file="${inputFile}" 
	tofile="tmp2.xml"
	overwrite="true"/>  
  </target>

  <target name="odd" if="processODD">
    <echo>Do ODD processing</echo>
    <xslt force="yes" 
	  style="${odd2oddxsl}" in="${inputFile}" out="tmp1.xml" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="lang" expression="${lang}" if="lang"/>
      <param name="defaultSource"
	     expression="/usr/share/xml/tei/odd/p5subset.xml"/>
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
    <xslt force="yes" 
	  style="${odd2litexsl}" in="tmp1.xml" out="tmp2.xml" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="displayMode" expression="rnc"/>
      <param name="summaryDoc" expression="true"/>
    </xslt>
  </target>
  
  <scriptdef name="imagelist" language="javascript">
    <attribute name="tdir"/>
    <element name="fileset" type="fileset"/>
    <![CDATA[
	     importClass(java.io.File);
	     files = elements.get("fileset").get(0);
	     f= String(files).split(';');
	     var tempdir = attributes.get("tdir");
	     for (i=1; i<f.length+1; i++) {
	     var filename = f[i-1];
	     var ext = filename.substr(filename.lastIndexOf('.') + 1);
	     mycopy = project.createTask("copy");
	     mycopy.setFile(File(filename));
	     mycopy.setTofile(File(tempdir + '/OEBPS/media/image' + i + '.' + ext));
	     mycopy.execute();
	     }
    ]]>
  </scriptdef>

  <target name="dist" depends="odd,notodd">
    <!-- Recreate temporary output directory -->
    <delete dir="${outputTempDir}"/>
    <mkdir dir="${outputTempDir}"/>
    <!-- The transformation for EPUB output. -->
    <echo level="info">XSLT generate ePub files </echo>
    <xslt force="yes" 
	  style="${stylesheetFile}" in="${inputFile}" out="${outputFile}" classpath="classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <classpath location="${oxygyenlib}/saxon9ee.jar"/>
      <param name="directory" expression="${outputTempDir}/"/>
      <param name="fixgraphicsurl" expression="true"/>
      <!-- supply unique URN for ebook-->
      <param name="uid" expression="${uid}" if="uid"/>
      <!-- set splitting level-->
      <param name="splitLevel" expression="${splitLevel}" if="splitLevel"/>
      <!-- supply name of publisher for ebook-->
      <param name="publisher" expression="${publisher}" if="publisher"/>
      <!-- supply subject/category for ebook-->
      <param name="subject" expression="${subject}" if="subject"/>
      <!-- supply name of JPEG file for ebook cover-->
      <param name="coverimage" expression="${coverimage}" if="coverimage"/>
      <!-- supply name of CSS file-->
      <param name="css" expression="${css}" if="css"/>
      <!-- supply name of language-->
      <param name="lang" expression="${lang}" if="lang"/>
      <!-- emit some diagnostics"-->
      <param name="debug" expression="${debug}" if="debug"/>
      <!-- be verbose-->
      <param name="verbose" expression="${verbose}" if="verbose"/>
    </xslt>
     <imagelist tdir="${outputTempDir}">
       <fileset dir="${inputFileDir}" includesfile="IMAGES.txt"/>
     </imagelist>
      <!--
      <copy flatten="yes" todir="${outputTempDir}/media/images">
      </copy>
      -->

    <echo level="info">ZIP: put files from ${outputTempDir} together into ${outputFile}</echo>
    <zip 
	destfile="${outputDir}/temp.zip" 
	 basedir="${outputTempDir}"
	 compress="true" 
	 excludes="mimetype"/>
    <zip destfile="${outputDir}/temp.zip" 
	 basedir="${outputTempDir}"
	 includes="mimetype" 
	 update="true" 
	 keepcompression="true" 
	 compress="false"/>
    <copy file="${outputDir}/temp.zip" tofile="${outputFile}" overwrite="true"/>
    <delete file="${outputDir}/temp.zip"/> 
    <delete file="${outputDir}/tmp1.xml"/> 
    <delete file="${outputDir}/tmp2.xml"/> 
    <delete file="${outputDir}/IMAGES.txt"/> 
    <delete dir="${outputTempDir}"/> 

  </target>
</project>
