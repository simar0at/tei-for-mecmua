#!/bin/sh 
# convert between TEI and other formats. intended to be use as symlink to other scripts
# whose names will dictate the format and direction of conversion.
# Sebastian Rahtz, July 2011
# copyright: TEI Consortium
# license: GPL
# $Id$

die()
{
    echo "ERROR: $@."
    D=`date "+%Y-%m-%d %H:%M:%S"`
    echo "This was a fatal error. $D"
    exit 1
}

usageMsg()
{
echo "TEI conversion: from $from to $to"
echo ""
echo "  Usage: $0 [options] inputfile [outputfile]"
echo "  options, shown with defaults:"
echo "  --coverimage=XXX        # name of JPEG file for ebook cover (epub output only)"
echo "  --css=XXX               # supply name of CSS file (epub output only)"
echo "  --fileperpage           # create output files one per page (epub output only)"
echo "  --profile=$profile    # which transformation profile to use"
echo "  --mediaoverlay=$overlayfile    # media overlay file (epub output only)"
echo "  --profiledir=$profiledir    # where to find profile directory"
echo "  --publisher=XXX         # name of publisher for ebook (epub output only)"
echo "  --saxonjar=$SAXONJAR  # location of Saxon jar file"
echo "  --splitLevel=$splitLevel        # splitting level (epub output only)"
echo "  --subject=XXX           # subject/category for ebook (epub output only)"
echo "  --uid=XXX               # unique URN for ebook (epub output only)"
echo
echo "  options, binary switches:"
echo "  --odd              # perform processing of ODD (if appropriate)"
echo "  --verbose          # be verbose"
echo "  --debug            # be verbose, do not delete intermediate files"
}

#-------------------------------------------------
fileperpage=
debug=
profile=default
odd=false
verbose=false
antflag=-q
X=`dirname $0`
# epub only
overlayfile=
splitLevel=0
publisher=
coverimage=
cover=
cssFile=
conversion=
subject=
uid=
# ---
APPHOME=`(cd $X; pwd)`
profiledir=$APPHOME/profiles
SAXONJAR=/usr/share/saxon/saxon9he.jar
name=`basename $0`
from=`echo $name | sed 's/to.*//'`
to=`echo $name | sed 's/.*to//'`
if [ $to = "tei" ]
then
   direction=from
   format=$from
   outsuffix=.xml
else
   direction=to
   format=$to
   outsuffix=.$to
fi
while test $# -gt 0; do
  case $1 in
    --coverimage=*) cover=`echo $1 | sed 's/.*=//'`;;
    --css=*)        cssFile=-DcssFile=`echo $1 | sed 's/.*=//'`;;
    --fileperpage)  splitLevel=-1; fileperpage="-DfilePerPage=true";;
    --odd)          odd=true;;
    --mediaoverlay=*)    overlayfile=`echo $1 | sed 's/.*=//'`;;
    --profile=*)    profile=`echo $1 | sed 's/.*=//'`;;
    --profiledir=*) profiledir=`echo $1 | sed 's/.*=//'`;;
    --publisher=*)  publisher=publisher=`echo $1 | sed 's/.*=//'`;;
    --saxonjar=*)   SAXONJAR=`echo $1 | sed 's/.*=//'`;;
    --splitLevel=*) splitLevel=`echo $1 | sed 's/.*=//'`;;
    --subject=*)    subject="`echo $1 | sed 's/.*=//'`";;
    --uid=*)        uid=`echo $1 | sed 's/.*=//'`;;
    --debug)        debug="-Ddebug=true"; verbose=true; antflag=-v;;
    --verbose)      verbose=true; antflag=-v;;
    --help)         usageMsg; exit 1;;
     *) if test "$1" = "${1#--}" ; then 
	   break
	else
	   echo "WARNING: Unrecognized option '$1' ignored"
	fi ;;
  esac
  shift
done
in=${1:?"no input file supplied; for usage syntax $0 --help"}
infile=`basename $in`
D=`dirname "$in"`
indir=`(cd $D; pwd)`
if [ $# -eq 1 ]
then
   outfile=`basename "$1" .$from`$outsuffix
   outdir=$indir
else
   outfile=$2
   O=`dirname $2`
   outdir=`(cd $O; pwd)`
fi
if ! test -f $indir/$infile
then 
    die "Input file $infile does not exist"
fi
if ! test -f $SAXONJAR
then 
    die "Saxon jar file $SAXONJAR does not exist"
fi

if ! test -f $APPHOME/$format/build-$direction.xml 
then
    die "No support for $from to $to: ant task $APPHOME/$format/build-$direction.xml does not exist"
fi
if ! test -f $profiledir/$profile/$format/$direction.xsl
then
    die "No support for profile $profile: $profiledir/$profile/$format/$direction.xsl does not exist"
fi
echo Convert $infile to $outfile \($from to $to\) using profile $profile $debug
ant $antflag -f $APPHOME/$format/build-$direction.xml \
	-lib ${SAXONJAR} $debug $fileperpage \
        -Dodd=$odd \
        -Dverbose=$verbose  \
	-DinputFile="$indir/$infile" \
	-DoutputFile="$outdir/$outfile" \
        -Dprofiledir=$profiledir \
        -Dprofile=$profile \
	-Dpublisher=$publisher \
	-Duid=$uid \
	$cssFile \
	-Dsubject=$subject \
	-Dcoverimage=$coverimage \
	-Dmediaoverlay=$overlayfile \
	-DsplitLevel=$splitLevel 
